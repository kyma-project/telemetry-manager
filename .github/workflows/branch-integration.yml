name: Branch Integration

on:
  push:
    branches:
      - "main"
      - "release-*"
    paths-ignore:
      - 'docs/**'
      - 'dependencies/**'
      - '**/*.md'
      - 'OWNERS'
      - 'CODEOWNERS'
      - 'external-images.yaml'
  workflow_dispatch:

jobs:
  gardener-integration-test:
    strategy:
        fail-fast: false # if one version is not working, continue tests on other versions
        matrix:
          k8s_version: [1.29, 1.30]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Setup Golang
      uses: "./.github/template/setup-golang"

    # wait for the build to succeed so that the manager image is available
    - name: Wait for the image to be available in the registry
      run: "./hack/await_image.sh"
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        IMAGE_REPO: "europe-docker.pkg.dev/kyma-project/prod/telemetry-manager"
        TRIGGER: "${{ github.ref_name }}"
        QUERY_INTERVAL: 30

    # save gardener kubeconfig to a temp file in order to pass it to the command
    - name: Save serviceaccount to file
      shell: bash
      run: 'echo "$GARDENER_SA" > /tmp/gardener-sa.yaml'
      env:
        GARDENER_SA: ${{ secrets.GARDENER_SA }}

    # provision cluster and run tests
    - name: Run test
      run: hack/gardener-integration-test.sh
      env:
        GARDENER_SECRET_NAME: ${{ secrets.GARDENER_SECRET_NAME }}
        GARDENER_PROJECT: ${{ secrets.GARDENER_PROJECT }}
        GARDENER_SA_PATH: /tmp/gardener-sa.yaml
        GARDENER_K8S_VERSION: ${{ matrix.k8s_version }}

    - name: Upload Report
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: ${{ github.job }}-${{ matrix.k8s_version }}-report
        path: junit-report*.xml

    - name: Send slack message on failure
      uses: slackapi/slack-github-action@e28cf165c92ffef168d23c5c9000cffc8a25e117
      if: failure()
      with:
        payload-file-path: ".github/workflows/slack-message.json"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
