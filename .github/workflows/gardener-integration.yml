name: Gardener Integration

permissions:
  contents: read

on:
  push:
    branches:
      - "main"
      - "release-*"
    paths-ignore:
      - "docs/**"
      - "dependencies/**"
      - "**/*.md"
      - "OWNERS"
      - "CODEOWNERS"
      - "external-images.yaml"
  workflow_dispatch:

jobs:
  gardener-integration-test:
    strategy:
      fail-fast: false # if one version is not working, continue tests on other versions
      matrix:
        k8s_version: [1.31, 1.32]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup Golang
        uses: "./.github/template/setup-golang"

      - name: Prepare environment variables
        run: |
          GIT_COMMIT_SHA=$(git rev-parse --short=8 HEAD)
          GIT_COMMIT_DATE=$(git show -s --format=%cd --date=format:'v%Y%m%d' $(GIT_COMMIT_SHA))
          TAG="$GIT_COMMIT_DATE-$GIT_COMMIT_SHA"
          MANAGER_IMAGE="europe-docker.pkg.dev/kyma-project/prod/telemetry-manager:$TAG"

          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "MANAGER_IMAGE=$MANAGER_IMAGE" >> $GITHUB_ENV

      # wait for the build to succeed so that the manager image is available
      - name: Wait for the image to be available in the registry
        run: "./hack/await_image.sh"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          IMAGE_REPO: "europe-docker.pkg.dev/kyma-project/prod/telemetry-manager"
          # sets trigger to SHA if used in merge_group, but to env.TAG if used in push
          # even if env.TAG is available in merge_group event, it will be neglected
          TRIGGER: "${{ github.event.merge_group.head_sha || env.TAG }}"
          QUERY_INTERVAL: 30

      # save gardener kubeconfig to a temp file in order to pass it to the command
      - name: Save serviceaccount to file
        shell: bash
        run: 'echo "$GARDENER_SA" > /tmp/gardener-sa.yaml'
        env:
          GARDENER_SA: ${{ secrets.GARDENER_SA }}

      - name: Provision Gardener
        run: make provision-gardener
        env:
          GARDENER_SECRET_NAME: ${{ secrets.GARDENER_SECRET_NAME }}
          GARDENER_PROJECT: ${{ secrets.GARDENER_PROJECT }}
          GARDENER_SA_PATH: /tmp/gardener-sa.yaml
          GARDENER_K8S_VERSION: ${{ matrix.k8s_version }}

      - name: Deploy module release
        shell: bash
        run: make --debug deploy

      - name: Wait for manager deployment rollout
        shell: bash
        run: kubectl -n kyma-system rollout status deployment telemetry-manager --timeout=90s

      - name: Wait for manager readiness
        shell: bash
        run: kubectl -n kyma-system wait pods -l app.kubernetes.io/instance=telemetry,app.kubernetes.io/name=manager --for=condition=Ready=true --timeout=90s

      - name: Print cluster info
        shell: bash
        run: |
          kubectl cluster-info
          kubectl -n kyma-system get po

      - name: Deploy Istio
        shell: bash
        run: hack/deploy-istio.sh

      - name: Create Telemetry CR
        shell: bash
        run: kubectl apply -f config/samples/operator_v1alpha1_telemetry.yaml -n kyma-system

      # Deploying  a deny-all Network Policy to simulate a typical setup on a Kyma cluster
      - name: Create Network Policy
        shell: bash
        run: kubectl apply -f config/networking/networkpolicy-deny-all.yaml -n kyma-system

      - name: Run a subset of istio tests
        shell: bash
        run: go test -v -timeout=20m ./test/integration/... -- -labels=gardener

      - name: Run a subset of e2e tests
        shell: bash
        run: go test -v -timeout=20m ./test/e2e/... -- -labels=gardener

      - name: Deprovision Gardener
        shell: bash
        if: ${{ !cancelled() }}
        run: make deprovision-gardener
        env:
          GARDENER_SA_PATH: /tmp/gardener-sa.yaml
          GARDENER_K8S_VERSION: ${{ matrix.k8s_version }}

      - name: Upload Report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: ${{ !cancelled() }}
        with:
          name: ${{ github.job }}-${{ matrix.k8s_version }}-report
          path: junit-report*.xml

      - name: Send slack message on failure
        uses: slackapi/slack-github-action@91efab103c0de0a537f72a35f6b8cda0ee76bf0a # v2.1.1
        if: failure()
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            text: ""
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "Workflow <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|*Telemetry ${{ github.workflow }}*> has status *${{ job.status }}*"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "See related <${{ github.event.pull_request.html_url || github.event.head_commit.url }}|commit>"
