name: PR Load Test

# Trigger the test Manually additionally provide PR number.
on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request Number without "PR-" prefix'
        required: true
      image:
        type: choice
        options:
          - otel-collector
          - fluent-bit
          - prometheus
        description: 'Image to test'
        required: true

env:
  IMG: europe-docker.pkg.dev/kyma-project/dev/telemetry-manager:PR-${{ github.event.inputs.pr_number }}

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - id: set-matrix
        run: |
          image=${{ github.event.inputs.image }}
          matrix=$(jq --arg image "$image" 'map( . | select (.image==$image) )' hack/load-tests/matrix_includes.json)                
          echo "matrix={\"include\":$(echo $matrix)}" >> $GITHUB_OUTPUT
  load-test:
    needs: prepare-matrix
    strategy:
      max-parallel: 4
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
    runs-on: ubuntu-latest

    steps:
      - name: debug
        run: |
          mkdir tests
          echo bla > tests/bla.md
#      - name: Test
#        run:  echo "input = ${{ github.event.inputs.image }}, matrix = ${{ matrix.image }}"
#
#      - name: Checkout repo
#        uses: actions/checkout@v4
#        with:
#          ref: 'refs/pull/${{ github.event.inputs.pr_number }}/head'
#          repository: ${{ github.repository }}
#
#      - name: Setup Golang
#        uses: "./.github/template/setup-golang"
#
#      - name: Setup gardener cluster name
#        run:  echo "GARDENER_CLUSTER_NAME=${{ matrix.name }}" >> $GITHUB_ENV
#
#      # save gardener kubeconfig to a temp file in order to pass it to the command
#      - name: Save service account to file
#        shell: bash
#        run: 'echo "$GARDENER_SA" > /tmp/gardener-sa.yaml'
#        env:
#          GARDENER_SA: ${{ secrets.GARDENER_SA }}
#
#      # provision cluster
#      - name: Provision Gardener
#        run: make provision-gardener
#        env:
#          GARDENER_SECRET_NAME: ${{ secrets.GARDENER_SECRET_NAME }}
#          GARDENER_PROJECT: ${{ secrets.GARDENER_PROJECT }}
#          GARDENER_SA_PATH: /tmp/gardener-sa.yaml
#          GARDENER_MIN_NODES: 2
#          GARDENER_MAX_NODES: 2
#
#      - name: Deploy Telemetry
#        run: hack/deploy-telemetry.sh
#
#      - name: Deploy Istio Module
#        run: hack/deploy-istio.sh
#
#      # Run the load test
#      - name: Run Load test
#        run: hack/load-tests/run-load-test.sh -n ${{ matrix.name }} -t ${{ matrix.type }} -m ${{ matrix.multi }} -b ${{ matrix.backpressure }}
#
      - name: Upload Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Results-${{ matrix.name }}
          path: tests/*.md

#      - name: Deprovision Gardener
#        run: make deprovision-gardener
#        # always run the deprovision step, even if the previous steps failed
#        if: always()
#        env:
#          GARDENER_SA_PATH: /tmp/gardener-sa.yaml

  print-results:
    needs: load-test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download Results
        uses: actions/download-artifact@v4
      - name: Print Results
        run: |
          cat Results-*/*.md



