---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.18.0
  name: logpipelines.telemetry.kyma-project.io
spec:
  group: telemetry.kyma-project.io
  names:
    categories:
    - kyma-telemetry
    - kyma-telemetry-pipelines
    kind: LogPipeline
    listKind: LogPipelineList
    plural: logpipelines
    singular: logpipeline
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=="ConfigurationGenerated")].status
      name: Configuration Generated
      type: string
    - jsonPath: .status.conditions[?(@.type=="AgentHealthy")].status
      name: Agent Healthy
      type: string
    - jsonPath: .status.conditions[?(@.type=="TelemetryFlowHealthy")].status
      name: Flow Healthy
      type: string
    - jsonPath: .status.unsupportedMode
      name: Unsupported Mode
      type: boolean
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: LogPipeline is the Schema for the logpipelines API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: Defines the desired state of LogPipeline
            properties:
              files:
                description: Files is a list of content snippets that are mounted as files in the Fluent Bit configuration, which can be linked in the `custom` filters and a `custom` output. Only available when using an output of type `http` and `custom`.
                items:
                  description: Provides file content to be consumed by a LogPipeline configuration
                  properties:
                    content:
                      description: Content of the file to be mounted in the Fluent Bit configuration.
                      type: string
                    name:
                      description: Name of the file under which the content is mounted in the Fluent Bit configuration.
                      type: string
                  type: object
                type: array
              filters:
                description: Filters configures custom Fluent Bit `filters` to transform logs. Only available when using an output of type `http` and `custom`.
                items:
                  description: LogPipelineFilter configures custom Fluent Bit `filters` to transform logs. Only available when using an output of type `http` and `custom`.
                  properties:
                    custom:
                      description: Custom defines a custom filter in the [Fluent Bit syntax](https://docs.fluentbit.io/manual/pipeline/outputs). If you use a `custom` filter, you put the LogPipeline in unsupported mode. Only available when using an output of type `http` and `custom`.
                      type: string
                  type: object
                type: array
              input:
                description: Input configures additional inputs for log collection.
                properties:
                  application:
                    description: Application input configures the log collection from application containers stdout/stderr by tailing the log files of the underlying container runtime.
                    properties:
                      containers:
                        description: Containers describes whether application logs from specific containers are selected. The options are mutually exclusive.
                        properties:
                          exclude:
                            description: Exclude specifies to exclude only the container logs with the specified container names.
                            items:
                              type: string
                            type: array
                          include:
                            description: Include specifies to include only the container logs with the specified container names.
                            items:
                              type: string
                            type: array
                        type: object
                      dropLabels:
                        description: DropLabels defines whether to drop all Kubernetes labels. The default is `false`. Only available when using an output of type `http` and `custom`. For an `otlp` output, use the label enrichement feature in the Telemetry resource instead.
                        type: boolean
                      enabled:
                        description: If enabled, application logs are collected from application containers stdout/stderr. The default is `true`.
                        type: boolean
                      keepAnnotations:
                        description: KeepAnnotations defines whether to keep all Kubernetes annotations. The default is `false`.  Only available when using an output of type `http` and `custom`.
                        type: boolean
                      keepOriginalBody:
                        description: KeepOriginalBody retains the original log data if the log data is in JSON and it is successfully parsed. If set to `false`, the original log data is removed from the log record. The default is `true`.
                        type: boolean
                      namespaces:
                        description: Namespaces describes whether application logs from specific namespaces are selected. The options are mutually exclusive. System namespaces are excluded by default. Use the `system` attribute with value `true` to enable them.
                        properties:
                          exclude:
                            description: Exclude the container logs of the specified Namespace names.
                            items:
                              type: string
                            type: array
                          include:
                            description: Include only the container logs of the specified Namespace names.
                            items:
                              type: string
                            type: array
                          system:
                            description: System specifies whether to collect logs from system namespaces. If set to `true`, you collect logs from all namespaces including system namespaces, such as like kube-system, istio-system, and kyma-system. The default is `false`.
                            type: boolean
                        type: object
                    type: object
                  otlp:
                    description: OTLP input configures the push endpoint to receive logs from a OTLP source.
                    properties:
                      disabled:
                        description: If set to `true`, no push-based OTLP signals are collected. The default is `false`.
                        type: boolean
                      namespaces:
                        description: Namespaces describes whether push-based OTLP signals from specific namespaces are selected. System namespaces are enabled by default.
                        properties:
                          exclude:
                            description: Exclude signals from the specified Namespace names only.
                            items:
                              type: string
                            type: array
                          include:
                            description: Include signals from the specified Namespace names only.
                            items:
                              type: string
                            type: array
                        type: object
                        x-kubernetes-validations:
                        - message: Can only define one namespace selector - either 'include' or 'exclude'
                          rule: '!((has(self.include) && size(self.include) != 0) && (has(self.exclude) && size(self.exclude) != 0))'
                    type: object
                type: object
              output:
                description: Output configures the backend to which logs are sent. You must specify exactly one output per pipeline.
                properties:
                  custom:
                    description: Custom defines a custom output in the [Fluent Bit syntax](https://docs.fluentbit.io/manual/pipeline/outputs) where you want to push the logs. If you use a `custom` output, you put the LogPipeline in unsupported mode. Only available when using an output of type `http` and `custom`.
                    type: string
                  http:
                    description: HTTP configures an HTTP-based output compatible with the Fluent Bit HTTP output plugin.
                    properties:
                      compress:
                        description: Compress defines the compression algorithm to use. Either `none` or `gzip`. Default is `none`.
                        type: string
                      dedot:
                        description: Dedot enables de-dotting of Kubernetes labels and annotations. For compatibility with OpenSearch-based backends, dots (.) are replaced by underscores (_). Default is `false`.
                        type: boolean
                      format:
                        description: Format is the data format to be used in the HTTP request body. Either `gelf`, `json`, `json_stream`, `json_lines`, or `msgpack`. Default is `json`.
                        type: string
                      host:
                        description: Host defines the host of the HTTP backend.
                        properties:
                          value:
                            description: Value as plain text.
                            type: string
                          valueFrom:
                            description: ValueFrom is the value as a reference to a resource.
                            properties:
                              secretKeyRef:
                                description: SecretKeyRef refers to the value of a specific key in a Secret. You must provide `name` and `namespace` of the Secret, as well as the name of the `key`.
                                properties:
                                  key:
                                    description: Key defines the name of the attribute of the Secret holding the referenced value.
                                    type: string
                                  name:
                                    description: Name of the Secret containing the referenced value.
                                    type: string
                                  namespace:
                                    description: Namespace containing the Secret with the referenced value.
                                    type: string
                                required:
                                - key
                                - name
                                - namespace
                                type: object
                            type: object
                        type: object
                      password:
                        description: Password defines the basic auth password.
                        properties:
                          value:
                            description: Value as plain text.
                            type: string
                          valueFrom:
                            description: ValueFrom is the value as a reference to a resource.
                            properties:
                              secretKeyRef:
                                description: SecretKeyRef refers to the value of a specific key in a Secret. You must provide `name` and `namespace` of the Secret, as well as the name of the `key`.
                                properties:
                                  key:
                                    description: Key defines the name of the attribute of the Secret holding the referenced value.
                                    type: string
                                  name:
                                    description: Name of the Secret containing the referenced value.
                                    type: string
                                  namespace:
                                    description: Namespace containing the Secret with the referenced value.
                                    type: string
                                required:
                                - key
                                - name
                                - namespace
                                type: object
                            type: object
                        type: object
                      port:
                        description: Port defines the port of the HTTP backend. Default is 443.
                        type: string
                      tls:
                        description: TLS configures TLS for the HTTP backend.
                        properties:
                          ca:
                            description: CA defines an optional CA certificate for server certificate verification when using TLS. The certificate must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value of a specific key in a Secret. You must provide `name` and `namespace` of the Secret, as well as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                          cert:
                            description: Cert defines a client certificate to use when using TLS. The certificate must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value of a specific key in a Secret. You must provide `name` and `namespace` of the Secret, as well as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                          disabled:
                            description: Disabled specifies if TLS is disabled or enabled. Default is `false`.
                            type: boolean
                          key:
                            description: Key defines the client key to use when using TLS. The key must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value of a specific key in a Secret. You must provide `name` and `namespace` of the Secret, as well as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                          skipCertificateValidation:
                            description: If `true`, the validation of certificates is skipped. Default is `false`.
                            type: boolean
                        type: object
                        x-kubernetes-validations:
                        - message: Can define either both 'cert' and 'key', or neither
                          rule: has(self.cert) == has(self.key)
                      uri:
                        description: URI defines the URI of the HTTP backend. Default is "/".
                        type: string
                      user:
                        description: User defines the basic auth user.
                        properties:
                          value:
                            description: Value as plain text.
                            type: string
                          valueFrom:
                            description: ValueFrom is the value as a reference to a resource.
                            properties:
                              secretKeyRef:
                                description: SecretKeyRef refers to the value of a specific key in a Secret. You must provide `name` and `namespace` of the Secret, as well as the name of the `key`.
                                properties:
                                  key:
                                    description: Key defines the name of the attribute of the Secret holding the referenced value.
                                    type: string
                                  name:
                                    description: Name of the Secret containing the referenced value.
                                    type: string
                                  namespace:
                                    description: Namespace containing the Secret with the referenced value.
                                    type: string
                                required:
                                - key
                                - name
                                - namespace
                                type: object
                            type: object
                        type: object
                    type: object
                  otlp:
                    description: OTLP defines an output using the OpenTelemetry protocol.
                    properties:
                      authentication:
                        description: Authentication defines authentication options for the OTLP output
                        properties:
                          basic:
                            description: Basic activates `Basic` authentication for the destination providing relevant Secrets.
                            properties:
                              password:
                                description: Password contains the basic auth password or a Secret reference.
                                properties:
                                  value:
                                    description: Value as plain text.
                                    type: string
                                  valueFrom:
                                    description: ValueFrom is the value as a reference to a resource.
                                    properties:
                                      secretKeyRef:
                                        description: SecretKeyRef refers to the value of a specific key in a Secret. You must provide `name` and `namespace` of the Secret, as well as the name of the `key`.
                                        properties:
                                          key:
                                            description: Key defines the name of the attribute of the Secret holding the referenced value.
                                            type: string
                                          name:
                                            description: Name of the Secret containing the referenced value.
                                            type: string
                                          namespace:
                                            description: Namespace containing the Secret with the referenced value.
                                            type: string
                                        required:
                                        - key
                                        - name
                                        - namespace
                                        type: object
                                    type: object
                                type: object
                              user:
                                description: User contains the basic auth username or a Secret reference.
                                properties:
                                  value:
                                    description: Value as plain text.
                                    type: string
                                  valueFrom:
                                    description: ValueFrom is the value as a reference to a resource.
                                    properties:
                                      secretKeyRef:
                                        description: SecretKeyRef refers to the value of a specific key in a Secret. You must provide `name` and `namespace` of the Secret, as well as the name of the `key`.
                                        properties:
                                          key:
                                            description: Key defines the name of the attribute of the Secret holding the referenced value.
                                            type: string
                                          name:
                                            description: Name of the Secret containing the referenced value.
                                            type: string
                                          namespace:
                                            description: Namespace containing the Secret with the referenced value.
                                            type: string
                                        required:
                                        - key
                                        - name
                                        - namespace
                                        type: object
                                    type: object
                                type: object
                            required:
                            - password
                            - user
                            type: object
                        type: object
                      endpoint:
                        description: Endpoint defines the host and port (<host>:<port>) of an OTLP endpoint.
                        properties:
                          value:
                            description: Value as plain text.
                            type: string
                          valueFrom:
                            description: ValueFrom is the value as a reference to a resource.
                            properties:
                              secretKeyRef:
                                description: SecretKeyRef refers to the value of a specific key in a Secret. You must provide `name` and `namespace` of the Secret, as well as the name of the `key`.
                                properties:
                                  key:
                                    description: Key defines the name of the attribute of the Secret holding the referenced value.
                                    type: string
                                  name:
                                    description: Name of the Secret containing the referenced value.
                                    type: string
                                  namespace:
                                    description: Namespace containing the Secret with the referenced value.
                                    type: string
                                required:
                                - key
                                - name
                                - namespace
                                type: object
                            type: object
                        type: object
                      headers:
                        description: Headers defines custom headers to be added to outgoing HTTP or gRPC requests.
                        items:
                          properties:
                            name:
                              description: Name defines the header name.
                              type: string
                            prefix:
                              description: Prefix defines an optional header value prefix. The prefix is separated from the value by a space character.
                              type: string
                            value:
                              description: Value as plain text.
                              type: string
                            valueFrom:
                              description: ValueFrom is the value as a reference to a resource.
                              properties:
                                secretKeyRef:
                                  description: SecretKeyRef refers to the value of a specific key in a Secret. You must provide `name` and `namespace` of the Secret, as well as the name of the `key`.
                                  properties:
                                    key:
                                      description: Key defines the name of the attribute of the Secret holding the referenced value.
                                      type: string
                                    name:
                                      description: Name of the Secret containing the referenced value.
                                      type: string
                                    namespace:
                                      description: Namespace containing the Secret with the referenced value.
                                      type: string
                                  required:
                                  - key
                                  - name
                                  - namespace
                                  type: object
                              type: object
                          required:
                          - name
                          type: object
                        type: array
                      path:
                        description: Path defines OTLP export URL path (only for the HTTP protocol). This value overrides auto-appended paths `/v1/metrics` and `/v1/traces`
                        type: string
                      protocol:
                        description: Protocol defines the OTLP protocol (`http` or `grpc`). Default is `grpc`.
                        enum:
                        - grpc
                        - http
                        minLength: 1
                        type: string
                      tls:
                        description: TLS defines TLS options for the OTLP output.
                        properties:
                          ca:
                            description: Defines an optional CA certificate for server certificate verification when using TLS. The certificate must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value of a specific key in a Secret. You must provide `name` and `namespace` of the Secret, as well as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                          cert:
                            description: Defines a client certificate to use when using TLS. The certificate must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value of a specific key in a Secret. You must provide `name` and `namespace` of the Secret, as well as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                          insecure:
                            description: Insecure defines whether to send requests using plaintext instead of TLS.
                            type: boolean
                          insecureSkipVerify:
                            description: InsecureSkipVerify defines whether to skip server certificate verification when using TLS.
                            type: boolean
                          key:
                            description: Defines the client key to use when using TLS. The key must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value of a specific key in a Secret. You must provide `name` and `namespace` of the Secret, as well as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                        type: object
                        x-kubernetes-validations:
                        - message: Can define either both 'cert' and 'key', or neither
                          rule: has(self.cert) == has(self.key)
                    required:
                    - endpoint
                    type: object
                    x-kubernetes-validations:
                    - message: Path is only available with HTTP protocol
                      rule: ((!has(self.path) || size(self.path) <= 0) && (has(self.protocol) && self.protocol == 'grpc')) || (has(self.protocol) && self.protocol == 'http')
                type: object
                x-kubernetes-validations:
                - message: Switching to or away from OTLP output is not supported. Please re-create the LogPipeline instead
                  rule: has(self.otlp) == has(oldSelf.otlp)
                - message: Exactly one output must be defined
                  rule: (!has(self.custom) && !has(self.http)) || !(has(self.custom) && has(self.http))
                - message: Exactly one output must be defined
                  rule: (!has(self.custom) && !has(self.otlp)) || ! (has(self.custom) && has(self.otlp))
                - message: Exactly one output must be defined
                  rule: (!has(self.http) && !has(self.otlp)) || ! (has(self.http) && has(self.otlp))
              variables:
                description: Variables is a list of mappings from Kubernetes Secret keys to environment variables. Mapped keys are mounted as environment variables, so that they are available as [Variables](https://docs.fluentbit.io/manual/administration/configuring-fluent-bit/classic-mode/variables) in the `custom` filters and a `custom` output. Only available when using an output of type `http` and `custom`.
                items:
                  description: References a Kubernetes secret that should be provided as environment variable to Fluent Bit
                  properties:
                    name:
                      description: Name of the variable to map.
                      type: string
                    valueFrom:
                      properties:
                        secretKeyRef:
                          description: SecretKeyRef refers to the value of a specific key in a Secret. You must provide `name` and `namespace` of the Secret, as well as the name of the `key`.
                          properties:
                            key:
                              description: Key defines the name of the attribute of the Secret holding the referenced value.
                              type: string
                            name:
                              description: Name of the Secret containing the referenced value.
                              type: string
                            namespace:
                              description: Namespace containing the Secret with the referenced value.
                              type: string
                          required:
                          - key
                          - name
                          - namespace
                          type: object
                      type: object
                  type: object
                type: array
            type: object
            x-kubernetes-validations:
            - message: otlp input is only supported with otlp output
              rule: '!((has(self.output.http) || has(self.output.custom))  && has(self.input.otlp))'
            - message: input.application.dropLabels is not supported with otlp output
              rule: '!(has(self.output.otlp) && has(self.input.application.dropLabels))'
            - message: input.application.keepAnnotations is not supported with otlp output
              rule: '!(has(self.output.otlp) && has(self.input.application.keepAnnotations))'
            - message: filters are not supported with otlp output
              rule: '!(has(self.output.otlp) && has(self.filters))'
            - message: files not supported with otlp output
              rule: '!(has(self.output.otlp) && has(self.files))'
            - message: variables not supported with otlp output
              rule: '!(has(self.output.otlp) && has(self.variables))'
          status:
            description: Shows the observed state of the LogPipeline
            properties:
              conditions:
                description: An array of conditions describing the status of the pipeline.
                items:
                  description: Condition contains details for one aspect of the current state of this API Resource.
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              unsupportedMode:
                description: Is active when the LogPipeline uses a `custom` output or filter; see [unsupported mode](https://github.com/kyma-project/telemetry-manager/blob/main/docs/user/02-logs.md#unsupported-mode).
                type: boolean
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
