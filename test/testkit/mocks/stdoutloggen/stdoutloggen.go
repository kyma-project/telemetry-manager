package stdoutloggen

import (
	"fmt"

	kitk8s "github.com/kyma-project/telemetry-manager/test/testkit/k8s"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/resource"
)

const (
	DefaultName          = "stdoutloggen"
	DefaultContainerName = "stdoutloggen"
	DefaultImageName     = "europe-docker.pkg.dev/kyma-project/prod/stdout-log-generator:latest"
)

type Option func(*corev1.PodSpec)

// WithField sets a field in logs generated by the stdout log generator
func WithFields(fields map[string]string) Option {
	return func(spec *corev1.PodSpec) {
		for k, v := range fields {
			spec.Containers[0].Args = append(spec.Containers[0].Args, "--fields")
			spec.Containers[0].Args = append(spec.Containers[0].Args, fmt.Sprintf("%s=%s", k, v))
		}
	}
}

// WithRate sets approximately how many logs per second each worker should generate. Zero means no throttling
func WithRate(rate int) Option {
	return func(spec *corev1.PodSpec) {
		// find the rate argument and replace it
		for i, arg := range spec.Containers[0].Args {
			if arg == "--rate" {
				spec.Containers[0].Args[i+1] = fmt.Sprintf("%d", rate)
				return
			}
		}
	}
}

// WithWorkers sets the number of workers (goroutines) to run
func WithWorkers(workers int) Option {
	return func(spec *corev1.PodSpec) {
		spec.Containers[0].Args = append(spec.Containers[0].Args, "--workers")
		spec.Containers[0].Args = append(spec.Containers[0].Args, fmt.Sprintf("%v", workers))
	}
}

func NewDeployment(namespace string, opts ...Option) *kitk8s.Deployment {
	return kitk8s.NewDeployment(DefaultName, namespace).WithPodSpec(PodSpec(opts...)).WithLabel("app.kubernetes.io/name", DefaultName)
}

func NewDeploymentWithName(name, namespace string, opts ...Option) *kitk8s.Deployment {
	return kitk8s.NewDeployment(name, namespace).WithPodSpec(PodSpec(opts...)).WithLabel("app.kubernetes.io/name", name)
}

func PodSpec(opts ...Option) corev1.PodSpec {
	spec := corev1.PodSpec{

		Containers: []corev1.Container{
			{
				Name:  DefaultContainerName,
				Image: DefaultImageName,
				Args: []string{
					"--rate",
					"10",
				},
				ImagePullPolicy: corev1.PullIfNotPresent,
				Resources: corev1.ResourceRequirements{
					Requests: corev1.ResourceList{
						corev1.ResourceCPU:    resource.MustParse("500m"),
						corev1.ResourceMemory: resource.MustParse("64Mi"),
					},
					Limits: corev1.ResourceList{
						corev1.ResourceCPU:    resource.MustParse("2000m"),
						corev1.ResourceMemory: resource.MustParse("128Mi"),
					},
				},
			},
		},
	}

	for _, opt := range opts {
		opt(&spec)
	}

	return spec
}
