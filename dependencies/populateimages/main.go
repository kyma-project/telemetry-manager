package main

import (
	"fmt"
	"log"
	"os"
	"path/filepath"
	"text/template"

	"github.com/joho/godotenv"
	"gopkg.in/yaml.v3"
)

var templates = map[string]string{
	"./test/testkit/images.go": `// This file is generated by "make generate".
// Don't edit, update .env file and run make target generate.

package testkit

const (
	DefaultTelemetryGenImage  = "{{ .ENV_TEST_TELEMETRYGEN_IMAGE }}"
	DefaultOTelCollectorImage = "{{ .ENV_OTEL_COLLECTOR_IMAGE }}"
)
`,
}

type secScanConfig struct {
	ModuleName   string       `yaml:"module-name"`
	Kind         string       `yaml:"kind"`
	BDBA         []string     `yaml:"bdba"`
	Mend         mend         `yaml:"mend"`
	CheckmarxOne checkmarxOne `yaml:"checkmarx-one"`
}

type mend struct {
	Language string   `yaml:"language"`
	Exclude  []string `yaml:"exclude"`
}

type checkmarxOne struct {
	Preset  string   `yaml:"preset"`
	Exclude []string `yaml:"exclude"`
}

func main() {
	if err := run(); err != nil {
		log.Fatal(err)
	}
}

const TWO = 2

func run() error {
	data, err := godotenv.Read(filepath.Join(".", ".env"))
	if err != nil {
		return fmt.Errorf("error reading .env file: %w", err)
	}

	for path, tmpl := range templates {
		err := generateFile(path, tmpl, data)
		if err != nil {
			return fmt.Errorf("error generating file %s: %w", path, err)
		}
	}

	if err := generateSecScanConfig(data); err != nil {
		return fmt.Errorf("error generating sec scan config: %w", err)
	}

	return nil
}

func generateFile(path, tmpl string, data map[string]string) error {
	f, err := os.Create(path)
	if err != nil {
		return err
	}
	defer f.Close()

	t := template.Must(template.New("images").Parse(tmpl))
	if err := t.Execute(f, data); err != nil {
		return err
	}

	return nil
}

func generateSecScanConfig(data map[string]string) error {
	file, err := os.Create("./sec-scanners-config.yaml")
	if err != nil {
		return fmt.Errorf("error opening/creating file: %w", err)
	}
	defer file.Close()

	imgs := []string{
		data["ENV_MANAGER_IMAGE"],
		data["ENV_FLUENTBIT_EXPORTER_IMAGE"],
		data["ENV_FLUENTBIT_IMAGE"],
		data["ENV_OTEL_COLLECTOR_IMAGE"],
		data["ENV_SELFMONITOR_IMAGE"],
	}

	excludes := []string{
		"**/mocks/**",
		"**/stubs/**",
		"**/test/**",
		"**/*_test.go",
		"docs/**",
		"dependencies/**",
	}

	secScanCfg := secScanConfig{
		ModuleName: "telemetry",
		Kind:       "kyma",
		BDBA:       imgs,
		Mend: mend{
			Language: "golang-mod",
			Exclude:  excludes,
		},
		CheckmarxOne: checkmarxOne{
			Preset:  "go-default",
			Exclude: excludes,
		},
	}

	enc := yaml.NewEncoder(file)
	enc.SetIndent(TWO)

	err = enc.Encode(secScanCfg)
	if err != nil {
		return fmt.Errorf("error encoding: %w", err)
	}

	return nil
}
