extensions:
  health_check:
    endpoint: ${MY_POD_IP}:13133
  pprof:
    endpoint: 127.0.0.1:1777
  k8s_leader_elector:
    auth_type: serviceAccount
    lease_name: telemetry-metric-agent-k8scluster
    lease_namespace: kyma-system
service:
  pipelines:
    metrics/enrichment:
      receivers:
        - routing/prometheus-input
        - routing/istio-input
        - routing/runtime-input
      processors:
        - k8sattributes
        - resource/insert-cluster-attributes
        - service_enrichment
        - resource/drop-kyma-attributes
      exporters:
        - routing/enrichment
    metrics/promoteus-input:
      receivers:
        - prometheus/app-pods
        - prometheus/app-services
      processors:
        - memory_limiter
        - resource/delete-service-name
        - transform/set-instrumentation-scope-prometheus
      exporters:
        - routing/prometheus-input
    metrics/prometheus-cls-1-backend-output:
      receivers:
        - routing/enrichment
      processors:
        - filter/drop-diagnostic-metrics-if-input-source-prometheus
        - filter/sample-1-filter-by-namespace-prometheus-input
        - batch
      exporters:
        - otlp/sample-1
    metrics/prometheus-cls-2-backend-output:
      receivers:
        - routing/enrichment
      processors:
        - filter/drop-diagnostic-metrics-if-input-source-prometheus
        - filter/sample-2-filter-by-namespace-prometheus-input
        - batch
      exporters:
        - otlp/sample-2
    metrics/istio-input:
      receivers:
        - prometheus/istio
      processors:
        - memory_limiter
        - resource/delete-service-name
        - istio_noise_filter
        - transform/set-instrumentation-scope-istio
      exporters:
        - routing/istio-input
    metrics/istio-cls-1-backend-output:
      receivers:
        - routing/enrichment
      processors:
        - filter/drop-diagnostic-metrics-if-input-source-istio
        - filter/drop-envoy-metrics-if-disabled
        - filter/sample-1-filter-by-namespace-istio-input
        - batch
      exporters:
        - otlp/sample-1
    metrics/istio-cls-2-backend-output:
      receivers:
        - routing/enrichment
      processors:
        - filter/drop-diagnostic-metrics-if-input-source-istio
        - filter/drop-envoy-metrics-if-disabled
        - filter/sample-2-filter-by-namespace-istio-input
        - batch
      exporters:
        - otlp/sample-2
    metrics/runtime-cls-2-backend-output:
      receivers:
        - routing/enrichment
        - routing/runtime-input
      processors:
        - resource/delete-skip-enrichment-attribute
        - filter/sample-2-filter-by-namespace-runtime-input
        - batch
      exporters:
        - otlp/sample-2
    metrics/runtime-cls-1-backend-output:
      receivers:
        - routing/enrichment
        - routing/runtime-input
      processors:
        - resource/delete-skip-enrichment-attribute
        - filter/sample-1-filter-by-namespace-runtime-input
        - batch
      exporters:
        - otlp/sample-1
    metrics/runtime-input:
      receivers:
        - kubeletstats
        - k8s_cluster
      processors:
        - memory_limiter
        - filter/drop-non-pvc-volumes-metrics
        - resource/delete-service-name
        - transform/set-instrumentation-scope-runtime
        - transform/insert-skip-enrichment-attribute
      exporters:
        - routing/runtime-input
  telemetry:
    metrics:
      readers:
        - pull:
            exporter:
              prometheus:
                host: ${MY_POD_IP}
                port: 8888
    logs:
      level: info
      encoding: json
  extensions:
    - health_check
    - pprof
    - k8s_leader_elector
receivers:
  kubeletstats:
    collection_interval: 30s
    auth_type: serviceAccount
    endpoint: https://${MY_NODE_NAME}:10250
    insecure_skip_verify: true
    metric_groups:
      - container
      - pod
      - node
      - volume
    metrics:
      container.cpu.usage:
        enabled: true
      container.cpu.utilization:
        enabled: false
      k8s.pod.cpu.usage:
        enabled: true
      k8s.pod.cpu.utilization:
        enabled: false
      k8s.node.cpu.usage:
        enabled: true
      k8s.node.cpu.utilization:
        enabled: false
      k8s.node.cpu.time:
        enabled: false
      k8s.node.memory.major_page_faults:
        enabled: false
      k8s.node.memory.page_faults:
        enabled: false
      k8s.node.network.io:
        enabled: false
      k8s.node.network.errors:
        enabled: false
    extra_metadata_labels:
      - k8s.volume.type
  k8s_cluster:
    auth_type: serviceAccount
    collection_interval: 30s
    node_conditions_to_report: []
    metrics:
      k8s.container.storage_request:
        enabled: false
      k8s.container.storage_limit:
        enabled: false
      k8s.container.ephemeralstorage_request:
        enabled: false
      k8s.container.ephemeralstorage_limit:
        enabled: false
      k8s.container.ready:
        enabled: false
      k8s.namespace.phase:
        enabled: false
      k8s.hpa.current_replicas:
        enabled: false
      k8s.hpa.desired_replicas:
        enabled: false
      k8s.hpa.min_replicas:
        enabled: false
      k8s.hpa.max_replicas:
        enabled: false
      k8s.replicaset.available:
        enabled: false
      k8s.replicaset.desired:
        enabled: false
      k8s.replication_controller.available:
        enabled: false
      k8s.replication_controller.desired:
        enabled: false
      k8s.resource_quota.hard_limit:
        enabled: false
      k8s.resource_quota.used:
        enabled: false
      k8s.cronjob.active_jobs:
        enabled: false
    k8s_leader_elector: k8s_leader_elector
  prometheus/app-pods:
    config:
      scrape_configs:
        - job_name: app-pods
          sample_limit: 50000
          scrape_interval: 30s
          relabel_configs:
            - source_labels: [__meta_kubernetes_pod_node_name]
              regex: ${MY_NODE_NAME}
              action: keep
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
              regex: "true"
              action: keep
            - source_labels: [__meta_kubernetes_pod_phase]
              regex: Pending|Succeeded|Failed
              action: drop
            - source_labels: [__meta_kubernetes_pod_container_init]
              regex: (true)
              action: drop
            - source_labels: [__meta_kubernetes_pod_label_security_istio_io_tlsMode]
              regex: (istio)
              target_label: __scheme__
              replacement: https
              action: replace
            - source_labels: [__scheme__]
              regex: (https)
              action: drop
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
              regex: (.+)
              target_label: __metrics_path__
              action: replace
            - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
              regex: ([^:]+)(?::\d+)?;(\d+)
              target_label: __address__
              replacement: $$1:$$2
              action: replace
            - regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
              replacement: __param_$1
              action: labelmap
          kubernetes_sd_configs:
            - role: pod
              selectors:
                - role: pod
                  field: spec.nodeName=${MY_NODE_NAME}
  prometheus/app-services:
    config:
      scrape_configs:
        - job_name: app-services
          sample_limit: 50000
          scrape_interval: 30s
          relabel_configs:
            - source_labels: [__meta_kubernetes_endpoint_node_name]
              regex: ${MY_NODE_NAME}
              action: keep
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
              regex: "true"
              action: keep
            - source_labels: [__meta_kubernetes_pod_phase]
              regex: Pending|Succeeded|Failed
              action: drop
            - source_labels: [__meta_kubernetes_pod_container_init]
              regex: (true)
              action: drop
            - source_labels: [__meta_kubernetes_pod_container_name]
              regex: (istio-proxy)
              action: drop
            - source_labels: [__meta_kubernetes_pod_label_security_istio_io_tlsMode]
              regex: (istio)
              target_label: __scheme__
              replacement: https
              action: replace
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
              regex: (https?)
              target_label: __scheme__
              action: replace
            - regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
              replacement: __param_$1
              action: labelmap
            - source_labels: [__scheme__]
              regex: (https)
              action: drop
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
              regex: (.+)
              target_label: __metrics_path__
              action: replace
            - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
              regex: ([^:]+)(?::\d+)?;(\d+)
              target_label: __address__
              replacement: $$1:$$2
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              target_label: service
              action: replace
          kubernetes_sd_configs:
            - role: endpoints
              selectors:
                - role: pod
                  field: spec.nodeName=${MY_NODE_NAME}
        - job_name: app-services-secure
          sample_limit: 50000
          scrape_interval: 30s
          relabel_configs:
            - source_labels: [__meta_kubernetes_endpoint_node_name]
              regex: ${MY_NODE_NAME}
              action: keep
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
              regex: "true"
              action: keep
            - source_labels: [__meta_kubernetes_pod_phase]
              regex: Pending|Succeeded|Failed
              action: drop
            - source_labels: [__meta_kubernetes_pod_container_init]
              regex: (true)
              action: drop
            - source_labels: [__meta_kubernetes_pod_container_name]
              regex: (istio-proxy)
              action: drop
            - source_labels: [__meta_kubernetes_pod_label_security_istio_io_tlsMode]
              regex: (istio)
              target_label: __scheme__
              replacement: https
              action: replace
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
              regex: (https?)
              target_label: __scheme__
              action: replace
            - regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
              replacement: __param_$1
              action: labelmap
            - source_labels: [__scheme__]
              regex: (http)
              action: drop
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
              regex: (.+)
              target_label: __metrics_path__
              action: replace
            - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
              regex: ([^:]+)(?::\d+)?;(\d+)
              target_label: __address__
              replacement: $$1:$$2
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              target_label: service
              action: replace
          kubernetes_sd_configs:
            - role: endpoints
              selectors:
                - role: pod
                  field: spec.nodeName=${MY_NODE_NAME}
          tls_config:
            ca_file: /etc/istio-output-certs/root-cert.pem
            cert_file: /etc/istio-output-certs/cert-chain.pem
            key_file: /etc/istio-output-certs/key.pem
            insecure_skip_verify: true
  prometheus/istio:
    config:
      scrape_configs:
        - job_name: istio-proxy
          sample_limit: 50000
          scrape_interval: 30s
          metrics_path: /stats/prometheus
          relabel_configs:
            - source_labels: [__meta_kubernetes_pod_node_name]
              regex: ${MY_NODE_NAME}
              action: keep
            - source_labels: [__meta_kubernetes_pod_container_name]
              regex: istio-proxy
              action: keep
            - source_labels: [__meta_kubernetes_pod_container_port_name]
              regex: http-envoy-prom
              action: keep
            - source_labels: [__meta_kubernetes_pod_phase]
              regex: Pending|Succeeded|Failed
              action: drop
          metric_relabel_configs:
            - source_labels: [__name__]
              regex: istio_.*
              action: keep
          kubernetes_sd_configs:
            - role: pod
              selectors:
                - role: pod
                  field: spec.nodeName=${MY_NODE_NAME}
processors:
  batch:
    send_batch_size: 1024
    timeout: 10s
    send_batch_max_size: 1024
  memory_limiter:
    check_interval: 1s
    limit_percentage: 75
    spike_limit_percentage: 15
  resource/delete-service-name:
    attributes:
      - action: delete
        key: service.name
  service_enrichment:
    resource_attributes:
      - kyma.kubernetes_io_app_name
      - kyma.app_name
  resource/drop-kyma-attributes:
    attributes:
      - action: delete
        pattern: kyma.*
  resource/delete-skip-enrichment-attribute:
    attributes:
      - action: delete
        key: io.kyma-project.telemetry.skip_enrichment
  istio_noise_filter: {}
  transform/set-instrumentation-scope-runtime:
    error_mode: ignore
    metric_statements:
      - statements:
          - set(scope.version, "1.6.0-1181-g2696a2e9") where scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/kubeletstatsreceiver"
          - set(scope.name, "io.kyma-project.telemetry/runtime") where scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/kubeletstatsreceiver"
          - set(scope.version, "1.6.0-1181-g2696a2e9") where scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver"
          - set(scope.name, "io.kyma-project.telemetry/runtime") where scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver"
  transform/set-instrumentation-scope-istio:
    error_mode: ignore
    metric_statements:
      - statements:
          - set(scope.version, "1.6.0-1181-g2696a2e9") where scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/prometheusreceiver"
          - set(scope.name, "io.kyma-project.telemetry/istio") where scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/prometheusreceiver"
  transform/set-instrumentation-scope-prometheus:
    error_mode: ignore
    metric_statements:
      - statements:
          - set(resource.attributes["kyma.input.name"], "prometheus")
      - statements:
          - set(scope.version, "1.6.0-1181-g2696a2e9") where scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/prometheusreceiver"
          - set(scope.name, "io.kyma-project.telemetry/prometheus") where scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/prometheusreceiver"
  transform/insert-skip-enrichment-attribute:
    error_mode: ignore
    metric_statements:
      - statements:
          - set(resource.attributes["io.kyma-project.telemetry.skip_enrichment"], "true")
        conditions:
          - IsMatch(metric.name, "^k8s.node.*")
          - IsMatch(metric.name, "^k8s.statefulset.*")
          - IsMatch(metric.name, "^k8s.daemonset.*")
          - IsMatch(metric.name, "^k8s.deployment.*")
          - IsMatch(metric.name, "^k8s.job.*")
  filter/drop-non-pvc-volumes-metrics:
    metrics:
      metric:
        - resource.attributes["k8s.volume.name"] != nil and resource.attributes["k8s.volume.type"] != "persistentVolumeClaim"
  filter/drop-diagnostic-metrics-if-input-source-prometheus:
    metrics:
      metric:
        - instrumentation_scope.name == "io.kyma-project.telemetry/prometheus" and (name == "up" or name == "scrape_duration_seconds" or name == "scrape_samples_scraped" or name == "scrape_samples_post_metric_relabeling" or name == "scrape_series_added")
  resource/insert-cluster-attributes:
    attributes:
      - action: insert
        key: k8s.cluster.name
        value: ${KUBERNETES_SERVICE_HOST}
  filter/sample-2-filter-by-namespace-runtime-input:
    metrics:
      metric:
        - resource.attributes["kyma.input.name"] == "prometheus" and (resource.attributes["k8s.namespace.name"] == "kyma-system" or resource.attributes["k8s.namespace.name"] == "kube-system" or resource.attributes["k8s.namespace.name"] == "istio-system" or resource.attributes["k8s.namespace.name"] == "compass-system")
  filter/sample-1-filter-by-namespace-runtime-input:
    metrics:
      metric:
        - resource.attributes["kyma.input.name"] == "prometheus" and (resource.attributes["k8s.namespace.name"] == "kyma-system" or resource.attributes["k8s.namespace.name"] == "kube-system" or resource.attributes["k8s.namespace.name"] == "istio-system" or resource.attributes["k8s.namespace.name"] == "compass-system")
  filter/sample-1-filter-by-namespace-prometheus-input:
    metrics:
      metric:
        - resource.attributes["kyma.input.name"] == "prometheus" and (resource.attributes["k8s.namespace.name"] == "kyma-system" or resource.attributes["k8s.namespace.name"] == "kube-system" or resource.attributes["k8s.namespace.name"] == "istio-system" or resource.attributes["k8s.namespace.name"] == "compass-system")
  filter/sample-2-filter-by-namespace-prometheus-input:
    metrics:
      metric:
        - resource.attributes["kyma.input.name"] == "prometheus" and not(resource.attributes["k8s.namespace.name"] == "kyma-system" or resource.attributes["k8s.namespace.name"] == "kube-system" or resource.attributes["k8s.namespace.name"] == "istio-system" or resource.attributes["k8s.namespace.name"] == "compass-system")
  filter/sample-1-filter-by-namespace-istio-input:
    metrics:
      metric:
        - resource.attributes["kyma.input.name"] == "prometheus" and (resource.attributes["k8s.namespace.name"] == "kyma-system" or resource.attributes["k8s.namespace.name"] == "kube-system" or resource.attributes["k8s.namespace.name"] == "istio-system" or resource.attributes["k8s.namespace.name"] == "compass-system")
  filter/sample-2-filter-by-namespace-istio-input:
    metrics:
      metric:
        - resource.attributes["kyma.input.name"] == "prometheus" and not(resource.attributes["k8s.namespace.name"] == "kyma-system" or resource.attributes["k8s.namespace.name"] == "kube-system" or resource.attributes["k8s.namespace.name"] == "istio-system" or resource.attributes["k8s.namespace.name"] == "compass-system")
  filter/drop-envoy-metrics-if-disabled:
    metrics:
      metric:
        - IsMatch(name, "^envoy_.*") and instrumentation_scope.name == "io.kyma-project.telemetry/istio"
  filter/drop-diagnostic-metrics-if-input-source-istio:
    metrics:
      metric:
        - instrumentation_scope.name == "io.kyma-project.telemetry/istio" and (name == "up" or name == "scrape_duration_seconds" or name == "scrape_samples_scraped" or name == "scrape_samples_post_metric_relabeling" or name == "scrape_series")
  k8sattributes:
    auth_type: serviceAccount
    passthrough: false
    extract:
      metadata:
        - k8s.pod.name
        - k8s.node.name
        - k8s.namespace.name
        - k8s.deployment.name
        - k8s.statefulset.name
        - k8s.daemonset.name
        - k8s.cronjob.name
        - k8s.job.name
      labels:
        - from: pod
          key: app.kubernetes.io/name
          tag_name: kyma.kubernetes_io_app_name
        - from: pod
          key: app
          tag_name: kyma.app_name
        - from: node
          key: topology.kubernetes.io/region
          tag_name: cloud.region
        - from: node
          key: topology.kubernetes.io/zone
          tag_name: cloud.availability_zone
        - from: node
          key: node.kubernetes.io/instance-type
          tag_name: host.type
        - from: node
          key: kubernetes.io/arch
          tag_name: host.arch
    pod_association:
      - sources:
          - from: resource_attribute
            name: k8s.pod.ip
      - sources:
          - from: resource_attribute
            name: k8s.pod.uid
      - sources:
          - from: connection
exporters:
  otlp/sample-1:
    endpoint: telemetry-otlp-metrics.kyma-system.svc.cluster.local:4317
    tls:
      insecure: true
    sending_queue:
      enabled: true
      queue_size: 512
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 30s
      max_elapsed_time: 300s
  otlp/sample-2:
    endpoint: telemetry-otlp-metrics.kyma-system.svc.cluster.local:4317
    tls:
      insecure: true
    sending_queue:
      enabled: true
      queue_size: 512
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 30s
      max_elapsed_time: 300s
connectors:
  routing/runtime-input:
    error_mode: ignore
    default_pipelines:
      - metrics/enrichment
    table:
      - statement: route() where attributes["io.kyma-project.telemetry.skip_enrichment"] == "true"
        pipelines:
          - metrics/runtime-cls-2-backend-output
          - metrics/runtime-cls-1-backend-output
  routing/prometheus-input:
    error_mode: ignore
    table:
      - pipelines:
          - metrics/enrichment
        condition: name != ""
        context: metric
  routing/istio-input:
    error_mode: ignore
    table:
      - pipelines:
          - metrics/enrichment
        condition: name != ""
        context: metric
  routing/enrichment:
    error_mode: ignore
    table:
      - statement: route() where instrumentation_scope.name == "io.kyma-project.telemetry/istio"
        pipelines:
          - metrics/istio-cls-1-backend-output
          - metrics/istio-cls-2-backend-output
        context: metric
      - statement: route() where instrumentation_scope.name == "io.kyma-project.telemetry/prometheus"
        pipelines:
          - metrics/prometheus-cls-1-backend-output
          - metrics/prometheus-cls-2-backend-output
        context: metric
      - statement: route() where instrumentation_scope.name == "io.kyma-project.telemetry/runtime"
        pipelines:
          - metrics/runtime-cls-2-backend-output
          - metrics/runtime-cls-1-backend-output
        context: metric