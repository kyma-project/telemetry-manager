apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app.kubernetes.io/component: agent
    app.kubernetes.io/managed-by: telemetry-manager
    app.kubernetes.io/name: telemetry-trace-agent
    app.kubernetes.io/part-of: telemetry
    kyma-project.io/module: telemetry
  name: telemetry-trace-agent
  namespace: kyma-system
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: telemetry-trace-agent
  template:
    metadata:
      labels:
        app.kubernetes.io/component: agent
        app.kubernetes.io/managed-by: telemetry-manager
        app.kubernetes.io/name: telemetry-trace-agent
        app.kubernetes.io/part-of: telemetry
        kyma-project.io/module: telemetry
        sidecar.istio.io/inject: "true"
        telemetry.kyma-project.io/trace-export: "true"
        telemetry.kyma-project.io/trace-ingest: "true"
    spec:
      containers:
        - args:
            - --config=/conf/relay.conf
          env:
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: MY_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: GOMEMLIMIT
              value: "1677721600"
          envFrom:
            - secretRef:
                name: telemetry-trace-agent
                optional: true
          image: europe-docker.pkg.dev/kyma-project/prod/kyma-otel-collector:0.120.0-main
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 13133
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: collector
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 13133
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 2000Mi
            requests:
              cpu: 200m
              memory: 32Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 10001
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /conf
              name: config
      dnsPolicy: ClusterFirst
      priorityClassName: telemetry-priority-class
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        seccompProfile:
          type: RuntimeDefault
      serviceAccount: telemetry-trace-agent
      serviceAccountName: telemetry-trace-agent
      terminationGracePeriodSeconds: 30
      volumes:
        - configMap:
            defaultMode: 420
            items:
              - key: relay.conf
                path: relay.conf
            name: telemetry-trace-agent
          name: config
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: agent
    app.kubernetes.io/managed-by: telemetry-manager
    app.kubernetes.io/name: telemetry-trace-agent
    app.kubernetes.io/part-of: telemetry
    kyma-project.io/module: telemetry
  name: telemetry-otlp-traces-local
  namespace: kyma-system
spec:
  internalTrafficPolicy: Local
  ports:
    - name: grpc-collector
      port: 4317
      protocol: TCP
      targetPort: 4317
    - name: http-collector
      port: 4318
      protocol: TCP
      targetPort: 4318
  selector:
    app.kubernetes.io/name: telemetry-trace-agent
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
data:
  relay.conf: |
    extensions:
        health_checkq:
            endpoint: ${MY_POD_IP}:13133
        pprof:
            endpoint: 127.0.0.1:1777
    service:
        pipelines:
            traces/sample:
                receivers:
                    - otlp
                processors:
                    - memory_limiter
                    - k8sattributes
                    - filter/drop-noisy-spans
                    - resource/insert-cluster-attributes
                    - transform/resolve-service-name
                    - resource/drop-kyma-attributes
                    - batch
                exporters:
                    - otlp/sample
        telemetry:
            metrics:
                readers:
                    - pull:
                        exporter:
                            prometheus:
                                host: ${MY_POD_IP}
                                port: 8888
            logs:
                level: debug
                encoding: json
        extensions:
            - health_check
            - pprof
    receivers:
        otlp:
            protocols:
                http:
                    endpoint: ${MY_POD_IP}:4318
                grpc:
                    endpoint: ${MY_POD_IP}:4317
    processors:
        batch:
            send_batch_size: 512
            timeout: 10s
            send_batch_max_size: 512
        memory_limiter:
            check_interval: 1s
            limit_percentage: 75
            spike_limit_percentage: 15
        k8sattributes:
            auth_type: serviceAccount
            passthrough: false
            extract:
                metadata:
                    - k8s.pod.name
                    - k8s.node.name
                    - k8s.namespace.name
                    - k8s.deployment.name
                    - k8s.statefulset.name
                    - k8s.daemonset.name
                    - k8s.cronjob.name
                    - k8s.job.name
                labels:
                    - from: pod
                      key: app.kubernetes.io/name
                      tag_name: kyma.kubernetes_io_app_name
                    - from: pod
                      key: app
                      tag_name: kyma.app_name
                    - from: node
                      key: topology.kubernetes.io/region
                      tag_name: cloud.region
                    - from: node
                      key: topology.kubernetes.io/zone
                      tag_name: cloud.availability_zone
                    - from: node
                      key: node.kubernetes.io/instance-type
                      tag_name: host.type
                    - from: node
                      key: kubernetes.io/arch
                      tag_name: host.arch
            pod_association:
                - sources:
                    - from: resource_attribute
                      name: k8s.pod.ip
                - sources:
                    - from: resource_attribute
                      name: k8s.pod.uid
                - sources:
                    - from: connection
        resource/insert-cluster-attributes:
            attributes:
                - action: insert
                  key: k8s.cluster.name
                  value: ${KUBERNETES_SERVICE_HOST}
        filter/drop-noisy-spans:
            traces:
                span:
                    - attributes["component"] == "proxy" and resource.attributes["k8s.namespace.name"] == "kyma-system" and attributes["istio.canonical_service"] == "telemetry-fluent-bit"
                    - attributes["component"] == "proxy" and resource.attributes["k8s.namespace.name"] == "kyma-system" and attributes["istio.canonical_service"] == "telemetry-trace-gateway"
                    - attributes["component"] == "proxy" and resource.attributes["k8s.namespace.name"] == "kyma-system" and attributes["istio.canonical_service"] == "telemetry-metric-gateway"
                    - attributes["component"] == "proxy" and resource.attributes["k8s.namespace.name"] == "kyma-system" and attributes["istio.canonical_service"] == "telemetry-metric-agent"
                    - attributes["component"] == "proxy" and resource.attributes["k8s.namespace.name"] == "istio-system" and attributes["http.method"] == "GET" and IsMatch(attributes["upstream_cluster.name"], "outbound|.+") == true and attributes["istio.canonical_service"] == "istio-ingressgateway" and IsMatch(attributes["http.url"], "https:\\/\\/healthz\\..+\\/healthz\\/ready") == true
                    - attributes["component"] == "proxy" and attributes["http.method"] == "POST" and IsMatch(attributes["upstream_cluster.name"], "outbound|.+") == true and IsMatch(attributes["http.url"], "http(s)?:\\/\\/telemetry-otlp-traces\\.kyma-system(\\..*)?:(4317|4318).*") == true
                    - attributes["component"] == "proxy" and attributes["http.method"] == "POST" and IsMatch(attributes["upstream_cluster.name"], "outbound|.+") == true and IsMatch(attributes["http.url"], "http(s)?:\\/\\/telemetry-otlp-metrics\\.kyma-system(\\..*)?:(4317|4318).*") == true
                    - attributes["component"] == "proxy" and attributes["http.method"] == "GET" and IsMatch(attributes["upstream_cluster.name"], "inbound|.+") == true and IsMatch(attributes["user_agent"], "vm_promscrape") == true
                    - attributes["component"] == "proxy" and attributes["http.method"] == "GET" and IsMatch(attributes["upstream_cluster.name"], "inbound|.+") == true and IsMatch(attributes["user_agent"], "kyma-otelcol\\/.*") == true
        transform/resolve-service-name:
            error_mode: ignore
            trace_statements:
                - statements:
                    - set(resource.attributes["service.name"], resource.attributes["kyma.kubernetes_io_app_name"]) where resource.attributes["service.name"] == nil or resource.attributes["service.name"] == "" or IsMatch(resource.attributes["service.name"], "^unknown_service(:.+)?$")
                    - set(resource.attributes["service.name"], resource.attributes["kyma.app_name"]) where resource.attributes["service.name"] == nil or resource.attributes["service.name"] == "" or IsMatch(resource.attributes["service.name"], "^unknown_service(:.+)?$")
                    - set(resource.attributes["service.name"], resource.attributes["k8s.deployment.name"]) where resource.attributes["service.name"] == nil or resource.attributes["service.name"] == "" or IsMatch(resource.attributes["service.name"], "^unknown_service(:.+)?$")
                    - set(resource.attributes["service.name"], resource.attributes["k8s.daemonset.name"]) where resource.attributes["service.name"] == nil or resource.attributes["service.name"] == "" or IsMatch(resource.attributes["service.name"], "^unknown_service(:.+)?$")
                    - set(resource.attributes["service.name"], resource.attributes["k8s.statefulset.name"]) where resource.attributes["service.name"] == nil or resource.attributes["service.name"] == "" or IsMatch(resource.attributes["service.name"], "^unknown_service(:.+)?$")
                    - set(resource.attributes["service.name"], resource.attributes["k8s.job.name"]) where resource.attributes["service.name"] == nil or resource.attributes["service.name"] == "" or IsMatch(resource.attributes["service.name"], "^unknown_service(:.+)?$")
                    - set(resource.attributes["service.name"], resource.attributes["k8s.pod.name"]) where resource.attributes["service.name"] == nil or resource.attributes["service.name"] == "" or IsMatch(resource.attributes["service.name"], "^unknown_service(:.+)?$")
                    - set(resource.attributes["service.name"], "unknown_service") where resource.attributes["service.name"] == nil or resource.attributes["service.name"] == ""
        resource/drop-kyma-attributes:
            attributes:
                - action: delete
                  pattern: kyma.*
    exporters:
        otlp/sample:
            endpoint: ${OTLP_ENDPOINT_SAMPLE}
            tls:
                insecure: true
            sending_queue:
                enabled: true
                queue_size: 256
            retry_on_failure:
                enabled: true
                initial_interval: 5s
                max_interval: 30s
                max_elapsed_time: 300s
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: agent
    app.kubernetes.io/managed-by: telemetry-manager
    app.kubernetes.io/name: telemetry-trace-agent
    app.kubernetes.io/part-of: telemetry
    kyma-project.io/module: telemetry
  name: telemetry-trace-agent
  namespace: kyma-system
---
apiVersion: v1
stringData:
  OTLP_ENDPOINT_SAMPLE: "http://trace-sink.trace-sink:4317"
kind: Secret
metadata:
  labels:
    app.kubernetes.io/component: agent
    app.kubernetes.io/managed-by: telemetry-manager
    app.kubernetes.io/name: telemetry-trace-agent
    app.kubernetes.io/part-of: telemetry
    kyma-project.io/module: telemetry
  name: telemetry-trace-agent
  namespace: kyma-system
type: Opaque
---
apiVersion: security.istio.io/v1
kind: PeerAuthentication
metadata:
  name: default
  namespace: kyma-system
spec:
  mtls:
    mode: PERMISSIVE
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: agent
    app.kubernetes.io/managed-by: telemetry-manager
    app.kubernetes.io/name: telemetry-trace-agent
    app.kubernetes.io/part-of: telemetry
    kyma-project.io/module: telemetry
  name: telemetry-trace-agent
  namespace: kyma-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: agent
    app.kubernetes.io/managed-by: telemetry-manager
    app.kubernetes.io/name: telemetry-trace-agent
    app.kubernetes.io/part-of: telemetry
    kyma-project.io/module: telemetry
  name: telemetry-trace-agent
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
      - pods
      - nodes
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - replicasets
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: agent
    app.kubernetes.io/managed-by: telemetry-manager
    app.kubernetes.io/name: telemetry-trace-agent
    app.kubernetes.io/part-of: telemetry
    kyma-project.io/module: telemetry
  name: telemetry-trace-agent
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: telemetry-trace-agent
subjects:
  - kind: ServiceAccount
    name: telemetry-trace-agent
    namespace: kyma-system
