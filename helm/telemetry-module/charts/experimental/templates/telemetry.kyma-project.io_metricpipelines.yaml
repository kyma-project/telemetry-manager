---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.18.0
  name: metricpipelines.telemetry.kyma-project.io
spec:
  group: telemetry.kyma-project.io
  names:
    categories:
    - kyma-telemetry
    - kyma-telemetry-pipelines
    kind: MetricPipeline
    listKind: MetricPipelineList
    plural: metricpipelines
    singular: metricpipeline
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=="ConfigurationGenerated")].status
      name: Configuration Generated
      type: string
    - jsonPath: .status.conditions[?(@.type=="GatewayHealthy")].status
      name: Gateway Healthy
      type: string
    - jsonPath: .status.conditions[?(@.type=="AgentHealthy")].status
      name: Agent Healthy
      type: string
    - jsonPath: .status.conditions[?(@.type=="TelemetryFlowHealthy")].status
      name: Flow Healthy
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: MetricPipeline is the Schema for the metricpipelines API.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: Spec defines the desired characteristics of MetricPipeline.
            properties:
              input:
                description: Input configures additional inputs for metric collection.
                properties:
                  istio:
                    description: Istio input configures collection of Istio metrics from applications running in the Istio service mesh.
                    properties:
                      diagnosticMetrics:
                        description: DiagnosticMetrics configures collection of additional diagnostic metrics. The default is `false`.
                        properties:
                          enabled:
                            description: If enabled, diagnostic metrics are collected. The default is `false`.
                            type: boolean
                        type: object
                      enabled:
                        description: Enabled specifies that istio-proxy metrics are scraped from Pods that have the istio-proxy sidecar injected. The default is `false`.
                        type: boolean
                      envoyMetrics:
                        description: EnvoyMetrics enables the collection of additional Envoy metrics with prefix `envoy_`. The default is `false`.
                        properties:
                          enabled:
                            description: Enabled specifies that Envoy metrics with prefix `envoy_` are scraped additionally. The default is `false`.
                            type: boolean
                        type: object
                      namespaces:
                        description: Namespaces configures the namespaces for which the collection should be activated. By default, all namespaces including system namespaces are enabled.
                        properties:
                          exclude:
                            description: Exclude signals from the specified Namespace names only.
                            items:
                              type: string
                            type: array
                          include:
                            description: Include signals from the specified Namespace names only.
                            items:
                              type: string
                            type: array
                        type: object
                        x-kubernetes-validations:
                        - message: Can only define one namespace selector - either 'include' or 'exclude'
                          rule: '!((has(self.include) && size(self.include) != 0) && (has(self.exclude) && size(self.exclude) != 0))'
                    type: object
                  otlp:
                    description: OTLP input configures the push endpoint to receive metrics from an OTLP source.
                    properties:
                      disabled:
                        description: If set to `true`, no push-based OTLP signals are collected. The default is `false`.
                        type: boolean
                      namespaces:
                        description: Namespaces describes whether push-based OTLP signals from specific namespaces are selected. System namespaces are enabled by default.
                        properties:
                          exclude:
                            description: Exclude signals from the specified Namespace names only.
                            items:
                              type: string
                            type: array
                          include:
                            description: Include signals from the specified Namespace names only.
                            items:
                              type: string
                            type: array
                        type: object
                        x-kubernetes-validations:
                        - message: Can only define one namespace selector - either 'include' or 'exclude'
                          rule: '!((has(self.include) && size(self.include) != 0) && (has(self.exclude) && size(self.exclude) != 0))'
                    type: object
                  prometheus:
                    description: Prometheus input configures collection of application metrics in the pull-based Prometheus protocol using endpoint discovery based on annotations.
                    properties:
                      diagnosticMetrics:
                        description: DiagnosticMetrics configures collection of additional diagnostic metrics. The default is `false`.
                        properties:
                          enabled:
                            description: If enabled, diagnostic metrics are collected. The default is `false`.
                            type: boolean
                        type: object
                      enabled:
                        description: Enabled specifies whether Service endpoints and Pods marked with `prometheus.io/scrape=true` annotation are scraped. The default is `false`.
                        type: boolean
                      namespaces:
                        description: Namespaces specifies from which namespaces metrics are collected. By default, all namespaces except the system namespaces are enabled. To enable all namespaces including system namespaces, use an empty struct notation.
                        properties:
                          exclude:
                            description: Exclude signals from the specified Namespace names only.
                            items:
                              type: string
                            type: array
                          include:
                            description: Include signals from the specified Namespace names only.
                            items:
                              type: string
                            type: array
                        type: object
                        x-kubernetes-validations:
                        - message: Can only define one namespace selector - either 'include' or 'exclude'
                          rule: '!((has(self.include) && size(self.include) != 0) && (has(self.exclude) && size(self.exclude) != 0))'
                    type: object
                  runtime:
                    description: Runtime input configures collection of Kubernetes runtime metrics.
                    properties:
                      enabled:
                        description: Enabled specifies whether runtime metrics are collected. The default is `false`.
                        type: boolean
                      namespaces:
                        description: Namespaces specifies from which namespaces metrics are collected. By default, all namespaces except the system namespaces are enabled. To enable all namespaces including system namespaces, use an empty struct notation.
                        properties:
                          exclude:
                            description: Exclude signals from the specified Namespace names only.
                            items:
                              type: string
                            type: array
                          include:
                            description: Include signals from the specified Namespace names only.
                            items:
                              type: string
                            type: array
                        type: object
                        x-kubernetes-validations:
                        - message: Can only define one namespace selector - either 'include' or 'exclude'
                          rule: '!((has(self.include) && size(self.include) != 0) && (has(self.exclude) && size(self.exclude) != 0))'
                      resources:
                        description: Resources configures the Kubernetes resource types for which metrics are collected.
                        properties:
                          container:
                            description: Container configures container runtime metrics collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics for the resource type are collected. The default is `true`.
                                type: boolean
                            type: object
                          daemonset:
                            description: DaemonSet configures DaemonSet runtime metrics collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics for the resource type are collected. The default is `true`.
                                type: boolean
                            type: object
                          deployment:
                            description: Deployment configures Deployment runtime metrics collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics for the resource type are collected. The default is `true`.
                                type: boolean
                            type: object
                          job:
                            description: Job configures Job runtime metrics collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics for the resource type are collected. The default is `true`.
                                type: boolean
                            type: object
                          node:
                            description: Node configures Node runtime metrics collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics for the resource type are collected. The default is `true`.
                                type: boolean
                            type: object
                          pod:
                            description: Pod configures Pod runtime metrics collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics for the resource type are collected. The default is `true`.
                                type: boolean
                            type: object
                          statefulset:
                            description: StatefulSet configures StatefulSet runtime metrics collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics for the resource type are collected. The default is `true`.
                                type: boolean
                            type: object
                          volume:
                            description: Volume configures Volume runtime metrics collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics for the resource type are collected. The default is `true`.
                                type: boolean
                            type: object
                        type: object
                    type: object
                type: object
              output:
                description: Output configures the backend to which metrics are sent. You must specify exactly one output per pipeline.
                properties:
                  otlp:
                    description: OTLP output defines an output using the OpenTelemetry protocol.
                    properties:
                      authentication:
                        description: Authentication defines authentication options for the OTLP output
                        properties:
                          basic:
                            description: Basic activates `Basic` authentication for the destination providing relevant Secrets.
                            properties:
                              password:
                                description: Password contains the basic auth password or a Secret reference.
                                properties:
                                  value:
                                    description: Value as plain text.
                                    type: string
                                  valueFrom:
                                    description: ValueFrom is the value as a reference to a resource.
                                    properties:
                                      secretKeyRef:
                                        description: SecretKeyRef refers to the value of a specific key in a Secret. You must provide `name` and `namespace` of the Secret, as well as the name of the `key`.
                                        properties:
                                          key:
                                            description: Key defines the name of the attribute of the Secret holding the referenced value.
                                            type: string
                                          name:
                                            description: Name of the Secret containing the referenced value.
                                            type: string
                                          namespace:
                                            description: Namespace containing the Secret with the referenced value.
                                            type: string
                                        required:
                                        - key
                                        - name
                                        - namespace
                                        type: object
                                    type: object
                                type: object
                              user:
                                description: User contains the basic auth username or a Secret reference.
                                properties:
                                  value:
                                    description: Value as plain text.
                                    type: string
                                  valueFrom:
                                    description: ValueFrom is the value as a reference to a resource.
                                    properties:
                                      secretKeyRef:
                                        description: SecretKeyRef refers to the value of a specific key in a Secret. You must provide `name` and `namespace` of the Secret, as well as the name of the `key`.
                                        properties:
                                          key:
                                            description: Key defines the name of the attribute of the Secret holding the referenced value.
                                            type: string
                                          name:
                                            description: Name of the Secret containing the referenced value.
                                            type: string
                                          namespace:
                                            description: Namespace containing the Secret with the referenced value.
                                            type: string
                                        required:
                                        - key
                                        - name
                                        - namespace
                                        type: object
                                    type: object
                                type: object
                            required:
                            - password
                            - user
                            type: object
                        type: object
                      endpoint:
                        description: Endpoint defines the host and port (<host>:<port>) of an OTLP endpoint.
                        properties:
                          value:
                            description: Value as plain text.
                            type: string
                          valueFrom:
                            description: ValueFrom is the value as a reference to a resource.
                            properties:
                              secretKeyRef:
                                description: SecretKeyRef refers to the value of a specific key in a Secret. You must provide `name` and `namespace` of the Secret, as well as the name of the `key`.
                                properties:
                                  key:
                                    description: Key defines the name of the attribute of the Secret holding the referenced value.
                                    type: string
                                  name:
                                    description: Name of the Secret containing the referenced value.
                                    type: string
                                  namespace:
                                    description: Namespace containing the Secret with the referenced value.
                                    type: string
                                required:
                                - key
                                - name
                                - namespace
                                type: object
                            type: object
                        type: object
                      headers:
                        description: Headers defines custom headers to be added to outgoing HTTP or gRPC requests.
                        items:
                          properties:
                            name:
                              description: Name defines the header name.
                              type: string
                            prefix:
                              description: Prefix defines an optional header value prefix. The prefix is separated from the value by a space character.
                              type: string
                            value:
                              description: Value as plain text.
                              type: string
                            valueFrom:
                              description: ValueFrom is the value as a reference to a resource.
                              properties:
                                secretKeyRef:
                                  description: SecretKeyRef refers to the value of a specific key in a Secret. You must provide `name` and `namespace` of the Secret, as well as the name of the `key`.
                                  properties:
                                    key:
                                      description: Key defines the name of the attribute of the Secret holding the referenced value.
                                      type: string
                                    name:
                                      description: Name of the Secret containing the referenced value.
                                      type: string
                                    namespace:
                                      description: Namespace containing the Secret with the referenced value.
                                      type: string
                                  required:
                                  - key
                                  - name
                                  - namespace
                                  type: object
                              type: object
                          required:
                          - name
                          type: object
                        type: array
                      path:
                        description: Path defines OTLP export URL path (only for the HTTP protocol). This value overrides auto-appended paths `/v1/metrics` and `/v1/traces`
                        type: string
                      protocol:
                        description: Protocol defines the OTLP protocol (`http` or `grpc`). Default is `grpc`.
                        enum:
                        - grpc
                        - http
                        minLength: 1
                        type: string
                      tls:
                        description: TLS defines TLS options for the OTLP output.
                        properties:
                          ca:
                            description: Defines an optional CA certificate for server certificate verification when using TLS. The certificate must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value of a specific key in a Secret. You must provide `name` and `namespace` of the Secret, as well as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                          cert:
                            description: Defines a client certificate to use when using TLS. The certificate must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value of a specific key in a Secret. You must provide `name` and `namespace` of the Secret, as well as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                          insecure:
                            description: Insecure defines whether to send requests using plaintext instead of TLS.
                            type: boolean
                          insecureSkipVerify:
                            description: InsecureSkipVerify defines whether to skip server certificate verification when using TLS.
                            type: boolean
                          key:
                            description: Defines the client key to use when using TLS. The key must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value of a specific key in a Secret. You must provide `name` and `namespace` of the Secret, as well as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                        type: object
                        x-kubernetes-validations:
                        - message: Can define either both 'cert' and 'key', or neither
                          rule: has(self.cert) == has(self.key)
                    required:
                    - endpoint
                    type: object
                    x-kubernetes-validations:
                    - message: Path is only available with HTTP protocol
                      rule: ((!has(self.path) || size(self.path) <= 0) && (has(self.protocol) && self.protocol == 'grpc')) || (has(self.protocol) && self.protocol == 'http')
                required:
                - otlp
                type: object
              transform:
                description: Transforms specify a list of transformations to apply to telemetry data.
                items:
                  description: TransformSpec defines a transformation to apply to telemetry data.
                  properties:
                    conditions:
                      description: Conditions specify a list of multiple where clauses, which will be processed as global conditions for the accompanying set of statements. The conditions are ORed together, which means only one condition needs to evaluate to true in order for the statements (including their individual where clauses) to be executed.
                      items:
                        type: string
                      type: array
                    statements:
                      description: Statements specify a list of OTTL statements to perform the transformation.
                      items:
                        type: string
                      type: array
                  type: object
                type: array
            type: object
          status:
            description: Status represents the current information/status of MetricPipeline.
            properties:
              conditions:
                description: An array of conditions describing the status of the pipeline.
                items:
                  description: Condition contains details for one aspect of the current state of this API Resource.
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=="ConfigurationGenerated")].status
      name: Configuration Generated
      type: string
    - jsonPath: .status.conditions[?(@.type=="GatewayHealthy")].status
      name: Gateway Healthy
      type: string
    - jsonPath: .status.conditions[?(@.type=="AgentHealthy")].status
      name: Agent Healthy
      type: string
    - jsonPath: .status.conditions[?(@.type=="TelemetryFlowHealthy")].status
      name: Flow Healthy
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: MetricPipeline is the Schema for the metricpipelines API.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: Spec defines the desired characteristics of MetricPipeline.
            properties:
              input:
                description: Input configures additional inputs for metric collection.
                properties:
                  istio:
                    description: Istio input configures collection of Istio metrics from applications running in the Istio service mesh.
                    properties:
                      diagnosticMetrics:
                        description: DiagnosticMetrics configures collection of additional diagnostic metrics. The default is `false`.
                        properties:
                          enabled:
                            description: If enabled, diagnostic metrics are collected. The default is `false`.
                            type: boolean
                        type: object
                      enabled:
                        description: Enabled specifies that istio-proxy metrics are scraped from Pods that have the istio-proxy sidecar injected. The default is `false`.
                        type: boolean
                      envoyMetrics:
                        description: EnvoyMetrics enables the collection of additional Envoy metrics with prefix `envoy_`. The default is `false`.
                        properties:
                          enabled:
                            description: Enabled specifies that Envoy metrics with prefix `envoy_` are scraped additionally. The default is `false`.
                            type: boolean
                        type: object
                      namespaces:
                        description: Namespaces configures the namespaces for which the collection should be activated. By default, all namespaces including system namespaces are enabled.
                        properties:
                          exclude:
                            description: Exclude signals from the specified Namespace names only.
                            items:
                              type: string
                            type: array
                          include:
                            description: Include signals from the specified Namespace names only.
                            items:
                              type: string
                            type: array
                        type: object
                        x-kubernetes-validations:
                        - message: Can only define one namespace selector - either 'include' or 'exclude'
                          rule: '!((has(self.include) && size(self.include) != 0) && (has(self.exclude) && size(self.exclude) != 0))'
                    type: object
                  otlp:
                    description: OTLP input configures the push endpoint to receive metrics from an OTLP source.
                    properties:
                      disabled:
                        description: If set to `true`, no push-based OTLP signals are collected. The default is `false`.
                        type: boolean
                      namespaces:
                        description: Namespaces describes whether push-based OTLP signals from specific namespaces are selected. System namespaces are enabled by default.
                        properties:
                          exclude:
                            description: Exclude signals from the specified Namespace names only.
                            items:
                              type: string
                            type: array
                          include:
                            description: Include signals from the specified Namespace names only.
                            items:
                              type: string
                            type: array
                        type: object
                        x-kubernetes-validations:
                        - message: Can only define one namespace selector - either 'include' or 'exclude'
                          rule: '!((has(self.include) && size(self.include) != 0) && (has(self.exclude) && size(self.exclude) != 0))'
                    type: object
                  prometheus:
                    description: Prometheus input configures collection of application metrics in the pull-based Prometheus protocol using endpoint discovery based on annotations.
                    properties:
                      diagnosticMetrics:
                        description: DiagnosticMetrics configures collection of additional diagnostic metrics. The default is `false`.
                        properties:
                          enabled:
                            description: If enabled, diagnostic metrics are collected. The default is `false`.
                            type: boolean
                        type: object
                      enabled:
                        description: Enabled specifies whether Service endpoints and Pods marked with `prometheus.io/scrape=true` annotation are scraped. The default is `false`.
                        type: boolean
                      namespaces:
                        description: Namespaces specifies from which namespaces metrics are collected. By default, all namespaces except the system namespaces are enabled. To enable all namespaces including system namespaces, use an empty struct notation.
                        properties:
                          exclude:
                            description: Exclude signals from the specified Namespace names only.
                            items:
                              type: string
                            type: array
                          include:
                            description: Include signals from the specified Namespace names only.
                            items:
                              type: string
                            type: array
                        type: object
                        x-kubernetes-validations:
                        - message: Can only define one namespace selector - either 'include' or 'exclude'
                          rule: '!((has(self.include) && size(self.include) != 0) && (has(self.exclude) && size(self.exclude) != 0))'
                    type: object
                  runtime:
                    description: Runtime input configures collection of Kubernetes runtime metrics.
                    properties:
                      enabled:
                        description: Enabled specifies whether runtime metrics are collected. The default is `false`.
                        type: boolean
                      namespaces:
                        description: Namespaces specifies from which namespaces metrics are collected. By default, all namespaces except the system namespaces are enabled. To enable all namespaces including system namespaces, use an empty struct notation.
                        properties:
                          exclude:
                            description: Exclude signals from the specified Namespace names only.
                            items:
                              type: string
                            type: array
                          include:
                            description: Include signals from the specified Namespace names only.
                            items:
                              type: string
                            type: array
                        type: object
                        x-kubernetes-validations:
                        - message: Can only define one namespace selector - either 'include' or 'exclude'
                          rule: '!((has(self.include) && size(self.include) != 0) && (has(self.exclude) && size(self.exclude) != 0))'
                      resources:
                        description: Resources configures the Kubernetes resource types for which metrics are collected.
                        properties:
                          container:
                            description: Container configures container runtime metrics collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics for the resource type are collected. The default is `true`.
                                type: boolean
                            type: object
                          daemonset:
                            description: DaemonSet configures DaemonSet runtime metrics collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics for the resource type are collected. The default is `true`.
                                type: boolean
                            type: object
                          deployment:
                            description: Deployment configures Deployment runtime metrics collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics for the resource type are collected. The default is `true`.
                                type: boolean
                            type: object
                          job:
                            description: Job configures Job runtime metrics collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics for the resource type are collected. The default is `true`.
                                type: boolean
                            type: object
                          node:
                            description: Node configures Node runtime metrics collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics for the resource type are collected. The default is `true`.
                                type: boolean
                            type: object
                          pod:
                            description: Pod configures Pod runtime metrics collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics for the resource type are collected. The default is `true`.
                                type: boolean
                            type: object
                          statefulset:
                            description: StatefulSet configures StatefulSet runtime metrics collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics for the resource type are collected. The default is `true`.
                                type: boolean
                            type: object
                          volume:
                            description: Volume configures Volume runtime metrics collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics for the resource type are collected. The default is `true`.
                                type: boolean
                            type: object
                        type: object
                    type: object
                type: object
              output:
                description: Output configures the backend to which metrics are sent. You must specify exactly one output per pipeline.
                properties:
                  otlp:
                    description: OTLP output defines an output using the OpenTelemetry protocol.
                    properties:
                      authentication:
                        description: Authentication defines authentication options for the OTLP output
                        properties:
                          basic:
                            description: Basic activates `Basic` authentication for the destination providing relevant Secrets.
                            properties:
                              password:
                                description: Password contains the basic auth password or a Secret reference.
                                properties:
                                  value:
                                    description: Value as plain text.
                                    type: string
                                  valueFrom:
                                    description: ValueFrom is the value as a reference to a resource.
                                    properties:
                                      secretKeyRef:
                                        description: SecretKeyRef refers to the value of a specific key in a Secret. You must provide `name` and `namespace` of the Secret, as well as the name of the `key`.
                                        properties:
                                          key:
                                            description: Key defines the name of the attribute of the Secret holding the referenced value.
                                            type: string
                                          name:
                                            description: Name of the Secret containing the referenced value.
                                            type: string
                                          namespace:
                                            description: Namespace containing the Secret with the referenced value.
                                            type: string
                                        required:
                                        - key
                                        - name
                                        - namespace
                                        type: object
                                    type: object
                                type: object
                              user:
                                description: User contains the basic auth username or a Secret reference.
                                properties:
                                  value:
                                    description: Value as plain text.
                                    type: string
                                  valueFrom:
                                    description: ValueFrom is the value as a reference to a resource.
                                    properties:
                                      secretKeyRef:
                                        description: SecretKeyRef refers to the value of a specific key in a Secret. You must provide `name` and `namespace` of the Secret, as well as the name of the `key`.
                                        properties:
                                          key:
                                            description: Key defines the name of the attribute of the Secret holding the referenced value.
                                            type: string
                                          name:
                                            description: Name of the Secret containing the referenced value.
                                            type: string
                                          namespace:
                                            description: Namespace containing the Secret with the referenced value.
                                            type: string
                                        required:
                                        - key
                                        - name
                                        - namespace
                                        type: object
                                    type: object
                                type: object
                            required:
                            - password
                            - user
                            type: object
                        type: object
                      endpoint:
                        description: Endpoint defines the host and port (<host>:<port>) of an OTLP endpoint.
                        properties:
                          value:
                            description: Value as plain text.
                            type: string
                          valueFrom:
                            description: ValueFrom is the value as a reference to a resource.
                            properties:
                              secretKeyRef:
                                description: SecretKeyRef refers to the value of a specific key in a Secret. You must provide `name` and `namespace` of the Secret, as well as the name of the `key`.
                                properties:
                                  key:
                                    description: Key defines the name of the attribute of the Secret holding the referenced value.
                                    type: string
                                  name:
                                    description: Name of the Secret containing the referenced value.
                                    type: string
                                  namespace:
                                    description: Namespace containing the Secret with the referenced value.
                                    type: string
                                required:
                                - key
                                - name
                                - namespace
                                type: object
                            type: object
                        type: object
                      headers:
                        description: Headers defines custom headers to be added to outgoing HTTP or gRPC requests.
                        items:
                          properties:
                            name:
                              description: Name defines the header name.
                              type: string
                            prefix:
                              description: Prefix defines an optional header value prefix. The prefix is separated from the value by a space character.
                              type: string
                            value:
                              description: Value as plain text.
                              type: string
                            valueFrom:
                              description: ValueFrom is the value as a reference to a resource.
                              properties:
                                secretKeyRef:
                                  description: SecretKeyRef refers to the value of a specific key in a Secret. You must provide `name` and `namespace` of the Secret, as well as the name of the `key`.
                                  properties:
                                    key:
                                      description: Key defines the name of the attribute of the Secret holding the referenced value.
                                      type: string
                                    name:
                                      description: Name of the Secret containing the referenced value.
                                      type: string
                                    namespace:
                                      description: Namespace containing the Secret with the referenced value.
                                      type: string
                                  required:
                                  - key
                                  - name
                                  - namespace
                                  type: object
                              type: object
                          required:
                          - name
                          type: object
                        type: array
                      path:
                        description: Path defines OTLP export URL path (only for the HTTP protocol). This value overrides auto-appended paths `/v1/metrics` and `/v1/traces`
                        type: string
                      protocol:
                        description: Protocol defines the OTLP protocol (`http` or `grpc`). Default is `grpc``.
                        enum:
                        - grpc
                        - http
                        type: string
                      tls:
                        description: TLS defines TLS options for the OTLP output.
                        properties:
                          ca:
                            description: Defines an optional CA certificate for server certificate verification when using TLS. The certificate must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value of a specific key in a Secret. You must provide `name` and `namespace` of the Secret, as well as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                          cert:
                            description: Defines a client certificate to use when using TLS. The certificate must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value of a specific key in a Secret. You must provide `name` and `namespace` of the Secret, as well as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                          disabled:
                            description: Disabled specifies if TLS is disabled or enabled. Default is `false`.
                            type: boolean
                          key:
                            description: Defines the client key to use when using TLS. The key must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value of a specific key in a Secret. You must provide `name` and `namespace` of the Secret, as well as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                          skipCertificateValidation:
                            description: If `true`, the validation of certificates is skipped. Default is `false`.
                            type: boolean
                        type: object
                        x-kubernetes-validations:
                        - message: Can define either both 'cert' and 'key', or neither
                          rule: has(self.cert) == has(self.key)
                    required:
                    - endpoint
                    type: object
                    x-kubernetes-validations:
                    - message: Path is only available with HTTP protocol
                      rule: ((!has(self.path) || size(self.path) <= 0) && (has(self.protocol) && self.protocol == 'grpc')) || (has(self.protocol) && self.protocol == 'http')
                required:
                - otlp
                type: object
              transform:
                description: Transforms specify a list of transformations to apply to telemetry data.
                items:
                  description: TransformSpec defines a transformation to apply to telemetry data.
                  properties:
                    conditions:
                      description: Conditions specify a list of multiple where clauses, which will be processed as global conditions for the accompanying set of statements. The conditions are ORed together, which means only one condition needs to evaluate to true in order for the statements (including their individual where clauses) to be executed.
                      items:
                        type: string
                      type: array
                    statements:
                      description: Statements specify a list of OTTL statements to perform the transformation.
                      items:
                        type: string
                      type: array
                  type: object
                type: array
            type: object
          status:
            description: Status represents the current information/status of MetricPipeline.
            properties:
              conditions:
                description: An array of conditions describing the status of the pipeline.
                items:
                  description: Condition contains details for one aspect of the current state of this API Resource.
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
