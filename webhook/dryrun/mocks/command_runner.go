// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// CommandRunner is an autogenerated mock type for the commandRunner type
type CommandRunner struct {
	mock.Mock
}

// Run provides a mock function with given fields: ctx, command, args
func (_m *CommandRunner) Run(ctx context.Context, command string, args ...string) ([]byte, error) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, command)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) ([]byte, error)); ok {
		return rf(ctx, command, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) []byte); ok {
		r0 = rf(ctx, command, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...string) error); ok {
		r1 = rf(ctx, command, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCommandRunner creates a new instance of CommandRunner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommandRunner(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommandRunner {
	mock := &CommandRunner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
