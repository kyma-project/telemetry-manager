//go:build tools
// +build tools

package main

import (
	"fmt"
	"github.com/joho/godotenv"
	"gopkg.in/yaml.v2"
	"log"
	"os"
	"path/filepath"
)

type secScanConfig struct {
	ModuleName  string      `yaml:"module-name"`
	Protocode   []string    `yaml:"protocode"`
	WhiteSource whiteSource `yaml:"whitesource"`
}

type whiteSource struct {
	Language    string   `yaml:"language"`
	Subprojects bool     `yaml:"subprojects"`
	Exclude     []string `yaml:"exclude"`
}

func main() {

	data, err := godotenv.Read(filepath.Join(".", ".env"))
	if err != nil {
		log.Fatal(err)
	}

	generateCommonConstants(data)

	generateTestKitCommonConstants(data)

	generateSecScanConfig(data)
}

func generateCommonConstants(data map[string]string) {
	f, err := os.Create("./internal/images/images.go")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()
	_, err = f.WriteString(`// This file is generated by "make generate".
// Don't edit, update .env file and run make target generate.

package images

`)

	if err != nil {
		log.Fatal(err)
	}

	_, err = f.WriteString("const (\n")
	if err != nil {
		log.Fatal(err)
	}

	_, err = f.WriteString("\tDefaultFluentBitExporterImage = ")
	if err != nil {
		log.Fatal(err)
	}
	_, err = f.WriteString(fmt.Sprintf("\"%s\"\n", data["DEFAULT_FLUENTBIT_EXPORTER_IMAGE"]))
	if err != nil {
		log.Fatal(err)
	}

	_, err = f.WriteString("\tDefaultFluentBitImage         = ")
	if err != nil {
		log.Fatal(err)
	}
	_, err = f.WriteString(fmt.Sprintf("\"%s\"\n", data["DEFAULT_FLUENTBIT_IMAGE"]))
	if err != nil {
		log.Fatal(err)
	}

	_, err = f.WriteString("\tDefaultOTelCollectorImage     = ")
	if err != nil {
		log.Fatal(err)
	}
	_, err = f.WriteString(fmt.Sprintf("\"%s\"\n", data["DEFAULT_OTEL_COLLECTOR_IMAGE"]))
	if err != nil {
		log.Fatal(err)
	}

	_, err = f.WriteString("\tDefaultSelfMonitorImage       = ")
	if err != nil {
		log.Fatal(err)
	}
	_, err = f.WriteString(fmt.Sprintf("\"%s\"\n", data["DEFAULT_SELFMONITOR_IMAGE"]))
	if err != nil {
		log.Fatal(err)
	}

	_, err = f.WriteString(")\n")
	if err != nil {
		log.Fatal(err)
	}
}

func generateTestKitCommonConstants(data map[string]string) {
	f, err := os.Create("./test/testkit/images.go")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()
	_, err = f.WriteString(`// This file is generated by "make generate".
// Don't edit, update .env file and run make target generate.

package testkit

`)

	if err != nil {
		log.Fatal(err)
	}

	_, err = f.WriteString("const (\n")
	if err != nil {
		log.Fatal(err)
	}

	_, err = f.WriteString("\tDefaultTelemetryGenImage = ")
	if err != nil {
		log.Fatal(err)
	}
	_, err = f.WriteString(fmt.Sprintf("\"%s\"\n", data["DEFAULT_TEST_TELEMETRYGEN_IMAGE"]))
	if err != nil {
		log.Fatal(err)
	}

	_, err = f.WriteString(")\n")
	if err != nil {
		log.Fatal(err)
	}
}

func generateSecScanConfig(data map[string]string) {
	file, err := os.Create("../../sec-scanners-config.yaml")
	if err != nil {
		log.Fatalf("error opening/creating file: %v", err)
	}
	defer file.Close()

	enc := yaml.NewEncoder(file)

	imgs := []string{data["ENV_IMG"], data["DEFAULT_FLUENTBIT_EXPORTER_IMAGE"], data["DEFAULT_FLUENTBIT_IMAGE"], data["DEFAULT_OTEL_COLLECTOR_IMAGE"], data["DEFAULT_SELFMONITOR_IMAGE"]}
	secScanCfg := secScanConfig{
		ModuleName: "telemetry",
		Protocode:  imgs,
		WhiteSource: whiteSource{
			Language:    "golang-mod",
			Subprojects: false,
			Exclude:     []string{"**/mocks/**", "**/stubs/**", "**/test/**", "**/*_test.go"},
		},
	}

	err = enc.Encode(secScanCfg)

	if err != nil {
		log.Fatalf("error encoding: %v", err)
	}
}
