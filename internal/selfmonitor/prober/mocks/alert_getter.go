// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/prometheus/client_golang/api/prometheus/v1"
	mock "github.com/stretchr/testify/mock"
)

// NewAlertGetter creates a new instance of AlertGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAlertGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *AlertGetter {
	mock := &AlertGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AlertGetter is an autogenerated mock type for the alertGetter type
type AlertGetter struct {
	mock.Mock
}

type AlertGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *AlertGetter) EXPECT() *AlertGetter_Expecter {
	return &AlertGetter_Expecter{mock: &_m.Mock}
}

// Alerts provides a mock function for the type AlertGetter
func (_mock *AlertGetter) Alerts(ctx context.Context) (v1.AlertsResult, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Alerts")
	}

	var r0 v1.AlertsResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (v1.AlertsResult, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) v1.AlertsResult); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(v1.AlertsResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AlertGetter_Alerts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Alerts'
type AlertGetter_Alerts_Call struct {
	*mock.Call
}

// Alerts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *AlertGetter_Expecter) Alerts(ctx interface{}) *AlertGetter_Alerts_Call {
	return &AlertGetter_Alerts_Call{Call: _e.mock.On("Alerts", ctx)}
}

func (_c *AlertGetter_Alerts_Call) Run(run func(ctx context.Context)) *AlertGetter_Alerts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *AlertGetter_Alerts_Call) Return(alertsResult v1.AlertsResult, err error) *AlertGetter_Alerts_Call {
	_c.Call.Return(alertsResult, err)
	return _c
}

func (_c *AlertGetter_Alerts_Call) RunAndReturn(run func(ctx context.Context) (v1.AlertsResult, error)) *AlertGetter_Alerts_Call {
	_c.Call.Return(run)
	return _c
}
