extensions:
    health_check:
        endpoint: ${MY_POD_IP}:13133
    k8s_leader_elector:
        auth_type: serviceAccount
        lease_name: telemetry-metric-agent-k8scluster
    pprof:
        endpoint: 127.0.0.1:1777
service:
    pipelines:
        metrics/enrichment-conditional:
            receivers:
                - routing/prometheus-input
            processors:
                - k8sattributes
                - service_enrichment
            exporters:
                - routing/enrichment
        metrics/input-prometheus:
            receivers:
                - prometheus/app-pods
                - prometheus/app-services
            processors:
                - memory_limiter
                - resource/drop-service-name
                - transform/set-instrumentation-scope-prometheus
            exporters:
                - routing/prometheus-input
        metrics/output-test:
            receivers:
                - routing/enrichment
                - routing/prometheus-input
            processors:
                - filter/drop-diagnostic-metrics-if-input-source-prometheus
                - filter/drop-envoy-metrics-if-disabled
                - filter/test-filter-by-namespace-prometheus-input
                - resource/insert-cluster-attributes
                - resource/drop-skip-enrichment-attribute
                - resource/drop-kyma-attributes
                - batch
            exporters:
                - otlp/test
    telemetry:
        metrics:
            readers:
                - pull:
                    exporter:
                        prometheus:
                            host: ${MY_POD_IP}
                            port: 8888
        logs:
            level: info
            encoding: json
    extensions:
        - health_check
        - pprof
        - k8s_leader_elector
receivers:
    prometheus/app-pods:
        config:
            scrape_configs:
                - job_name: app-pods
                  sample_limit: 50000
                  scrape_interval: 30s
                  relabel_configs:
                    - source_labels: [__meta_kubernetes_pod_node_name]
                      regex: ${MY_NODE_NAME}
                      action: keep
                    - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                      regex: "true"
                      action: keep
                    - source_labels: [__meta_kubernetes_pod_phase]
                      regex: Pending|Succeeded|Failed
                      action: drop
                    - source_labels: [__meta_kubernetes_pod_container_init]
                      regex: (true)
                      action: drop
                    - source_labels: [__meta_kubernetes_pod_label_security_istio_io_tlsMode]
                      regex: (istio)
                      target_label: __scheme__
                      replacement: https
                      action: replace
                    - source_labels: [__scheme__]
                      regex: (https)
                      action: drop
                    - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
                      regex: (.+)
                      target_label: __metrics_path__
                      action: replace
                    - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
                      regex: ([^:]+)(?::\d+)?;(\d+)
                      target_label: __address__
                      replacement: $$1:$$2
                      action: replace
                    - regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
                      replacement: __param_$1
                      action: labelmap
                  kubernetes_sd_configs:
                    - role: pod
                      selectors:
                        - role: pod
                          field: spec.nodeName=${MY_NODE_NAME}
    prometheus/app-services:
        config:
            scrape_configs:
                - job_name: app-services
                  sample_limit: 50000
                  scrape_interval: 30s
                  relabel_configs:
                    - source_labels: [__meta_kubernetes_endpoint_node_name]
                      regex: ${MY_NODE_NAME}
                      action: keep
                    - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
                      regex: "true"
                      action: keep
                    - source_labels: [__meta_kubernetes_pod_phase]
                      regex: Pending|Succeeded|Failed
                      action: drop
                    - source_labels: [__meta_kubernetes_pod_container_init]
                      regex: (true)
                      action: drop
                    - source_labels: [__meta_kubernetes_pod_container_name]
                      regex: (istio-proxy)
                      action: drop
                    - source_labels: [__meta_kubernetes_pod_label_security_istio_io_tlsMode]
                      regex: (istio)
                      target_label: __scheme__
                      replacement: https
                      action: replace
                    - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
                      regex: (https?)
                      target_label: __scheme__
                      action: replace
                    - regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
                      replacement: __param_$1
                      action: labelmap
                    - source_labels: [__scheme__]
                      regex: (https)
                      action: drop
                    - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
                      regex: (.+)
                      target_label: __metrics_path__
                      action: replace
                    - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
                      regex: ([^:]+)(?::\d+)?;(\d+)
                      target_label: __address__
                      replacement: $$1:$$2
                      action: replace
                    - source_labels: [__meta_kubernetes_service_name]
                      target_label: service
                      action: replace
                  kubernetes_sd_configs:
                    - role: endpoints
                      selectors:
                        - role: pod
                          field: spec.nodeName=${MY_NODE_NAME}
processors:
    batch:
        send_batch_size: 1024
        timeout: 10s
        send_batch_max_size: 1024
    filter/drop-diagnostic-metrics-if-input-source-prometheus:
        error_mode: ignore
        metrics:
            metric:
                - instrumentation_scope.name == "io.kyma-project.telemetry/prometheus" and (name == "up" or name == "scrape_duration_seconds" or name == "scrape_samples_scraped" or name == "scrape_samples_post_metric_relabeling" or name == "scrape_series_added")
    filter/drop-envoy-metrics-if-disabled:
        error_mode: ignore
        metrics:
            metric:
                - IsMatch(name, "^envoy_.*") and instrumentation_scope.name == "io.kyma-project.telemetry/istio"
    filter/test-filter-by-namespace-prometheus-input:
        error_mode: ignore
        metrics:
            metric:
                - resource.attributes["kyma.input.name"] == "prometheus" and (resource.attributes["k8s.namespace.name"] == "kube-system" or resource.attributes["k8s.namespace.name"] == "istio-system")
                - resource.attributes["kyma.input.name"] == "prometheus" and resource.attributes["k8s.namespace.name"] != nil and not(resource.attributes["k8s.namespace.name"] == "monitoring" or resource.attributes["k8s.namespace.name"] == "observability")
    k8sattributes:
        auth_type: serviceAccount
        passthrough: false
        extract:
            metadata:
                - k8s.pod.name
                - k8s.node.name
                - k8s.namespace.name
                - k8s.deployment.name
                - k8s.statefulset.name
                - k8s.daemonset.name
                - k8s.cronjob.name
                - k8s.job.name
            labels:
                - from: pod
                  key: app.kubernetes.io/name
                  tag_name: kyma.kubernetes_io_app_name
                - from: pod
                  key: app
                  tag_name: kyma.app_name
                - from: node
                  key: topology.kubernetes.io/region
                  tag_name: cloud.region
                - from: node
                  key: topology.kubernetes.io/zone
                  tag_name: cloud.availability_zone
                - from: node
                  key: node.kubernetes.io/instance-type
                  tag_name: host.type
                - from: node
                  key: kubernetes.io/arch
                  tag_name: host.arch
        pod_association:
            - sources:
                - from: resource_attribute
                  name: k8s.pod.ip
            - sources:
                - from: resource_attribute
                  name: k8s.pod.uid
            - sources:
                - from: connection
    memory_limiter:
        check_interval: 1s
        limit_percentage: 75
        spike_limit_percentage: 15
    resource/drop-kyma-attributes:
        attributes:
            - action: delete
              pattern: kyma.*
    resource/drop-service-name:
        attributes:
            - action: delete
              key: service.name
    resource/drop-skip-enrichment-attribute:
        attributes:
            - action: delete
              key: io.kyma-project.telemetry.skip_enrichment
    resource/insert-cluster-attributes:
        attributes:
            - action: insert
              key: k8s.cluster.name
            - action: insert
              key: k8s.cluster.uid
    service_enrichment:
        resource_attributes:
            - kyma.kubernetes_io_app_name
            - kyma.app_name
    transform/set-instrumentation-scope-prometheus:
        error_mode: ignore
        metric_statements:
            - statements:
                - set(resource.attributes["kyma.input.name"], "prometheus")
            - statements:
                - set(scope.version, "main") where scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/prometheusreceiver"
                - set(scope.name, "io.kyma-project.telemetry/prometheus") where scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/prometheusreceiver"
exporters:
    otlp/test:
        endpoint: ${OTLP_ENDPOINT_TEST}
        sending_queue:
            enabled: true
            queue_size: 256
        retry_on_failure:
            enabled: true
            initial_interval: 5s
            max_interval: 30s
            max_elapsed_time: 300s
connectors:
    routing/enrichment:
        default_pipelines: []
        error_mode: ignore
        table:
            - statement: route() where resource.attributes["kyma.input.name"] == "prometheus"
              pipelines:
                - metrics/output-test
              context: metric
    routing/prometheus-input:
        default_pipelines:
            - metrics/enrichment-conditional
        error_mode: ignore
        table:
            - statement: route() where attributes["io.kyma-project.telemetry.skip_enrichment"] == "true"
              pipelines:
                - metrics/output-test
