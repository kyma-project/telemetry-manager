extensions:
    health_check:
        endpoint: ${MY_POD_IP}:13133
    k8s_leader_elector:
        auth_type: serviceAccount
        lease_name: telemetry-metric-agent-k8scluster
    pprof:
        endpoint: 127.0.0.1:1777
service:
    pipelines:
        metrics/runtime:
            receivers:
                - kubeletstats
                - k8s_cluster
            processors:
                - memory_limiter
                - filter/drop-virtual-network-interfaces
                - resource/delete-service-name
                - transform/set-instrumentation-scope-runtime
                - transform/insert-skip-enrichment-attribute
                - batch
            exporters:
                - otlp
    telemetry:
        metrics:
            readers:
                - pull:
                    exporter:
                        prometheus:
                            host: ${MY_POD_IP}
                            port: 8888
        logs:
            level: info
            encoding: json
    extensions:
        - health_check
        - pprof
        - k8s_leader_elector
receivers:
    k8s_cluster:
        auth_type: serviceAccount
        collection_interval: 30s
        node_conditions_to_report: []
        metrics:
            k8s.container.storage_request:
                enabled: false
            k8s.container.storage_limit:
                enabled: false
            k8s.container.ephemeralstorage_request:
                enabled: false
            k8s.container.ephemeralstorage_limit:
                enabled: false
            k8s.container.ready:
                enabled: false
            k8s.namespace.phase:
                enabled: false
            k8s.hpa.current_replicas:
                enabled: false
            k8s.hpa.desired_replicas:
                enabled: false
            k8s.hpa.min_replicas:
                enabled: false
            k8s.hpa.max_replicas:
                enabled: false
            k8s.replicaset.available:
                enabled: false
            k8s.replicaset.desired:
                enabled: false
            k8s.replication_controller.available:
                enabled: false
            k8s.replication_controller.desired:
                enabled: false
            k8s.resource_quota.hard_limit:
                enabled: false
            k8s.resource_quota.used:
                enabled: false
            k8s.cronjob.active_jobs:
                enabled: false
            k8s.pod.phase:
                enabled: false
            k8s.daemonset.current_scheduled_nodes:
                enabled: false
            k8s.daemonset.desired_scheduled_nodes:
                enabled: false
            k8s.daemonset.misscheduled_nodes:
                enabled: false
            k8s.daemonset.ready_nodes:
                enabled: false
        k8s_leader_elector: k8s_leader_elector
    kubeletstats:
        collection_interval: 30s
        auth_type: serviceAccount
        endpoint: https://${MY_NODE_NAME}:10250
        insecure_skip_verify: true
        metric_groups:
            - container
        metrics:
            container.cpu.usage:
                enabled: true
            container.cpu.utilization:
                enabled: false
            k8s.pod.cpu.usage:
                enabled: true
            k8s.pod.cpu.utilization:
                enabled: false
            k8s.node.cpu.usage:
                enabled: true
            k8s.node.cpu.utilization:
                enabled: false
            k8s.node.cpu.time:
                enabled: false
            k8s.node.memory.major_page_faults:
                enabled: false
            k8s.node.memory.page_faults:
                enabled: false
        extra_metadata_labels:
            - k8s.volume.type
        collect_all_network_interfaces:
            node: true
processors:
    batch:
        send_batch_size: 1024
        timeout: 10s
        send_batch_max_size: 1024
    filter/drop-virtual-network-interfaces:
        metrics:
            datapoint:
                - IsMatch(metric.name, "^k8s.node.network.*") and not(IsMatch(attributes["interface"], "^(eth|en).*"))
    memory_limiter:
        check_interval: 1s
        limit_percentage: 75
        spike_limit_percentage: 15
    resource/delete-service-name:
        attributes:
            - action: delete
              key: service.name
    transform/insert-skip-enrichment-attribute:
        error_mode: ignore
        metric_statements:
            - statements:
                - set(resource.attributes["io.kyma-project.telemetry.skip_enrichment"], "true")
              conditions:
                - IsMatch(metric.name, "^k8s.node.*")
                - IsMatch(metric.name, "^k8s.statefulset.*")
                - IsMatch(metric.name, "^k8s.daemonset.*")
                - IsMatch(metric.name, "^k8s.deployment.*")
                - IsMatch(metric.name, "^k8s.job.*")
    transform/set-instrumentation-scope-runtime:
        error_mode: ignore
        metric_statements:
            - statements:
                - set(scope.version, "main") where scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/kubeletstatsreceiver"
                - set(scope.name, "io.kyma-project.telemetry/runtime") where scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/kubeletstatsreceiver"
                - set(scope.version, "main") where scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver"
                - set(scope.name, "io.kyma-project.telemetry/runtime") where scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver"
exporters:
    otlp:
        endpoint: metrics.telemetry-system.svc.cluster.local:4317
        tls:
            insecure: true
        sending_queue:
            enabled: true
            queue_size: 512
        retry_on_failure:
            enabled: true
            initial_interval: 5s
            max_interval: 30s
            max_elapsed_time: 300s
