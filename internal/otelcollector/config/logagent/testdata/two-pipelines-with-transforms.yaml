service:
    pipelines:
        logs/test1:
            receivers:
                - filelog/test1
            processors:
                - memory_limiter
                - transform/set-instrumentation-scope-runtime
                - k8sattributes
                - resource/insert-cluster-attributes
                - service_enrichment
                - resource/drop-kyma-attributes
                - transform/user-defined-test1
            exporters:
                - otlp/test1
        logs/test2:
            receivers:
                - filelog/test2
            processors:
                - memory_limiter
                - transform/set-instrumentation-scope-runtime
                - k8sattributes
                - resource/insert-cluster-attributes
                - service_enrichment
                - resource/drop-kyma-attributes
                - transform/user-defined-test2
            exporters:
                - otlp/test2
    telemetry:
        metrics:
            readers:
                - pull:
                    exporter:
                        prometheus:
                            host: ${MY_POD_IP}
                            port: 8888
        logs:
            level: info
            encoding: json
    extensions:
        - health_check
        - pprof
        - file_storage
extensions:
    health_check:
        endpoint: ${MY_POD_IP}:13133
    pprof:
        endpoint: 127.0.0.1:1777
    file_storage:
        create_directory: true
        directory: /tmp/telemetry-log-agent/file-log-receiver
receivers:
    filelog/test1:
        exclude:
            - /var/log/pods/kyma-system_*system-logs-agent-*/collector/*.log
            - /var/log/pods/kyma-system_*system-logs-collector-*/collector/*.log
            - /var/log/pods/kyma-system_telemetry-log-agent-*/collector/*.log
            - /var/log/pods/kyma-system_telemetry-fluent-bit-*/fluent-bit/*.log
            - /var/log/pods/kyma-system_*/*/*.log
            - /var/log/pods/kube-system_*/*/*.log
            - /var/log/pods/istio-system_*/*/*.log
            - /var/log/pods/compass-system_*/*/*.log
        include:
            - /var/log/pods/*_*/*/*.log
        include_file_name: false
        include_file_path: true
        start_at: beginning
        storage: file_storage
        retry_on_failure:
            enabled: true
            initial_interval: 5s
            max_interval: 30s
            max_elapsed_time: 300s
        operators:
            - id: containerd-parser
              type: container
              add_metadata_from_file_path: true
              format: containerd
            - id: move-to-log-stream
              type: move
              from: attributes["stream"]
              to: attributes["log.iostream"]
              if: attributes["stream"] != nil
            - id: drop-attribute-log-tag
              type: remove
              field: attributes["logtag"]
            - id: body-router
              type: router
              routes:
                - expr: body matches '^{.*}$'
                  output: json-parser
              default: noop
            - id: json-parser
              type: json_parser
              parse_from: body
              parse_to: attributes
            - id: remove-body
              type: remove
              field: body
            - id: move-message-to-body
              type: move
              from: attributes["message"]
              to: body
              if: attributes["message"] != nil
            - id: move-msg-to-body
              type: move
              from: attributes["msg"]
              to: body
              if: attributes["msg"] != nil
            - id: parse-level
              type: severity_parser
              if: attributes["level"] != nil
              parse_from: attributes["level"]
            - id: remove-level
              type: remove
              if: attributes["level"] != nil
              field: attributes["level"]
            - id: parse-log-level
              type: severity_parser
              if: attributes["log.level"] != nil
              parse_from: attributes["log.level"]
            - id: remove-log-level
              type: remove
              if: attributes["log.level"] != nil
              field: attributes["log.level"]
            - id: trace-router
              type: router
              routes:
                - expr: attributes["trace_id"] != nil
                  output: trace-parser
                - expr: attributes["traceparent"] != nil and attributes["traceparent"] matches '^[0-9a-f]{2}-(?P<trace_id>[0-9a-f]{32})-(?P<span_id>[0-9a-f]{16})-(?P<trace_flags>[0-9a-f]{2})$'
                  output: trace-parent-parser
              default: noop
            - id: trace-parent-parser
              type: regex_parser
              parse_from: attributes["traceparent"]
              regex: ^[0-9a-f]{2}-(?P<trace_id>[0-9a-f]{32})-(?P<span_id>[0-9a-f]{16})-(?P<trace_flags>[0-9a-f]{2})$
              trace:
                trace_id:
                    parse_from: attributes["trace_id"]
                span_id:
                    parse_from: attributes["span_id"]
                trace_flags:
                    parse_from: attributes["trace_flags"]
              output: remove-trace-parent
            - id: trace-parser
              type: trace_parser
              trace_id:
                parse_from: attributes["trace_id"]
              span_id:
                parse_from: attributes["span_id"]
              trace_flags:
                parse_from: attributes["trace_flags"]
              output: remove-trace-id
            - id: remove-trace-parent
              type: remove
              field: attributes["traceparent"]
            - id: remove-trace-id
              type: remove
              if: attributes["trace_id"] != nil
              field: attributes["trace_id"]
            - id: remove-span-id
              type: remove
              if: attributes["span_id"] != nil
              field: attributes["span_id"]
            - id: remove-trace-flags
              type: remove
              if: attributes["trace_flags"] != nil
              field: attributes["trace_flags"]
            - id: noop
              type: noop
    filelog/test2:
        exclude:
            - /var/log/pods/kyma-system_*system-logs-agent-*/collector/*.log
            - /var/log/pods/kyma-system_*system-logs-collector-*/collector/*.log
            - /var/log/pods/kyma-system_telemetry-log-agent-*/collector/*.log
            - /var/log/pods/kyma-system_telemetry-fluent-bit-*/fluent-bit/*.log
            - /var/log/pods/kyma-system_*/*/*.log
            - /var/log/pods/kube-system_*/*/*.log
            - /var/log/pods/istio-system_*/*/*.log
            - /var/log/pods/compass-system_*/*/*.log
        include:
            - /var/log/pods/*_*/*/*.log
        include_file_name: false
        include_file_path: true
        start_at: beginning
        storage: file_storage
        retry_on_failure:
            enabled: true
            initial_interval: 5s
            max_interval: 30s
            max_elapsed_time: 300s
        operators:
            - id: containerd-parser
              type: container
              add_metadata_from_file_path: true
              format: containerd
            - id: move-to-log-stream
              type: move
              from: attributes["stream"]
              to: attributes["log.iostream"]
              if: attributes["stream"] != nil
            - id: drop-attribute-log-tag
              type: remove
              field: attributes["logtag"]
            - id: body-router
              type: router
              routes:
                - expr: body matches '^{.*}$'
                  output: json-parser
              default: noop
            - id: json-parser
              type: json_parser
              parse_from: body
              parse_to: attributes
            - id: remove-body
              type: remove
              field: body
            - id: move-message-to-body
              type: move
              from: attributes["message"]
              to: body
              if: attributes["message"] != nil
            - id: move-msg-to-body
              type: move
              from: attributes["msg"]
              to: body
              if: attributes["msg"] != nil
            - id: parse-level
              type: severity_parser
              if: attributes["level"] != nil
              parse_from: attributes["level"]
            - id: remove-level
              type: remove
              if: attributes["level"] != nil
              field: attributes["level"]
            - id: parse-log-level
              type: severity_parser
              if: attributes["log.level"] != nil
              parse_from: attributes["log.level"]
            - id: remove-log-level
              type: remove
              if: attributes["log.level"] != nil
              field: attributes["log.level"]
            - id: trace-router
              type: router
              routes:
                - expr: attributes["trace_id"] != nil
                  output: trace-parser
                - expr: attributes["traceparent"] != nil and attributes["traceparent"] matches '^[0-9a-f]{2}-(?P<trace_id>[0-9a-f]{32})-(?P<span_id>[0-9a-f]{16})-(?P<trace_flags>[0-9a-f]{2})$'
                  output: trace-parent-parser
              default: noop
            - id: trace-parent-parser
              type: regex_parser
              parse_from: attributes["traceparent"]
              regex: ^[0-9a-f]{2}-(?P<trace_id>[0-9a-f]{32})-(?P<span_id>[0-9a-f]{16})-(?P<trace_flags>[0-9a-f]{2})$
              trace:
                trace_id:
                    parse_from: attributes["trace_id"]
                span_id:
                    parse_from: attributes["span_id"]
                trace_flags:
                    parse_from: attributes["trace_flags"]
              output: remove-trace-parent
            - id: trace-parser
              type: trace_parser
              trace_id:
                parse_from: attributes["trace_id"]
              span_id:
                parse_from: attributes["span_id"]
              trace_flags:
                parse_from: attributes["trace_flags"]
              output: remove-trace-id
            - id: remove-trace-parent
              type: remove
              field: attributes["traceparent"]
            - id: remove-trace-id
              type: remove
              if: attributes["trace_id"] != nil
              field: attributes["trace_id"]
            - id: remove-span-id
              type: remove
              if: attributes["span_id"] != nil
              field: attributes["span_id"]
            - id: remove-trace-flags
              type: remove
              if: attributes["trace_flags"] != nil
              field: attributes["trace_flags"]
            - id: noop
              type: noop
processors:
    memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25
    transform/set-instrumentation-scope-runtime:
        error_mode: ignore
        log_statements:
            - statements:
                - set(scope.version, "main")
                - set(scope.name, "io.kyma-project.telemetry/runtime")
    k8sattributes:
        auth_type: serviceAccount
        passthrough: false
        extract:
            metadata:
                - k8s.pod.name
                - k8s.node.name
                - k8s.namespace.name
                - k8s.deployment.name
                - k8s.statefulset.name
                - k8s.daemonset.name
                - k8s.cronjob.name
                - k8s.job.name
            labels:
                - from: pod
                  key: app.kubernetes.io/name
                  tag_name: kyma.kubernetes_io_app_name
                - from: pod
                  key: app
                  tag_name: kyma.app_name
                - from: node
                  key: topology.kubernetes.io/region
                  tag_name: cloud.region
                - from: node
                  key: topology.kubernetes.io/zone
                  tag_name: cloud.availability_zone
                - from: node
                  key: node.kubernetes.io/instance-type
                  tag_name: host.type
                - from: node
                  key: kubernetes.io/arch
                  tag_name: host.arch
        pod_association:
            - sources:
                - from: resource_attribute
                  name: k8s.pod.ip
            - sources:
                - from: resource_attribute
                  name: k8s.pod.uid
            - sources:
                - from: connection
    resource/insert-cluster-attributes:
        attributes:
            - action: insert
              key: k8s.cluster.name
              value: test-cluster
            - action: insert
              key: k8s.cluster.uid
            - action: insert
              key: cloud.provider
              value: azure
    service_enrichment:
        resource_attributes:
            - kyma.kubernetes_io_app_name
            - kyma.app_name
    resource/drop-kyma-attributes:
        attributes:
            - action: delete
              pattern: kyma.*
    transform/user-defined-test1:
        error_mode: ignore
        log_statements:
            - statements:
                - set(attributes["log.level"], "error")
                - set(body, "transformed1")
              conditions:
                - IsMatch(body, ".*error.*")
    transform/user-defined-test2:
        error_mode: ignore
        log_statements:
            - statements:
                - set(attributes["log.level"], "error")
                - set(body, "transformed2")
              conditions:
                - IsMatch(body, ".*error.*")
exporters:
    otlp/test1:
        endpoint: ${OTLP_ENDPOINT_TEST1}
        tls:
            insecure: true
        retry_on_failure:
            enabled: true
            initial_interval: 5s
            max_interval: 30s
            max_elapsed_time: 300s
    otlp/test2:
        endpoint: ${OTLP_ENDPOINT_TEST2}
        tls:
            insecure: true
        retry_on_failure:
            enabled: true
            initial_interval: 5s
            max_interval: 30s
            max_elapsed_time: 300s
