extensions:
    health_check:
        endpoint: ${MY_POD_IP}:13133
    pprof:
        endpoint: 127.0.0.1:1777
service:
    pipelines:
        metrics/test:
            receivers:
                - otlp
            processors:
                - memory_limiter
                - k8sattributes
                - filter/drop-if-input-source-runtime
                - filter/drop-if-input-source-prometheus
                - filter/drop-if-input-source-istio
                - resource/insert-cluster-name
                - transform/resolve-service-name
                - resource/drop-kyma-attributes
                - batch
            exporters:
                - otlp/test
    telemetry:
        metrics:
            address: ${MY_POD_IP}:8888
        logs:
            level: info
            encoding: json
    extensions:
        - health_check
        - pprof
receivers:
    otlp:
        protocols:
            http:
                endpoint: ${MY_POD_IP}:4318
            grpc:
                endpoint: ${MY_POD_IP}:4317
processors:
    batch:
        send_batch_size: 1024
        timeout: 10s
        send_batch_max_size: 1024
    memory_limiter:
        check_interval: 0.1s
        limit_percentage: 75
        spike_limit_percentage: 20
    k8sattributes:
        auth_type: serviceAccount
        passthrough: false
        extract:
            metadata:
                - k8s.pod.name
                - k8s.node.name
                - k8s.namespace.name
                - k8s.deployment.name
                - k8s.statefulset.name
                - k8s.daemonset.name
                - k8s.cronjob.name
                - k8s.job.name
            labels:
                - from: pod
                  key: app.kubernetes.io/name
                  tag_name: kyma.kubernetes_io_app_name
                - from: pod
                  key: app
                  tag_name: kyma.app_name
        pod_association:
            - sources:
                - from: resource_attribute
                  name: k8s.pod.ip
            - sources:
                - from: resource_attribute
                  name: k8s.pod.uid
            - sources:
                - from: connection
    resource/insert-cluster-name:
        attributes:
            - action: insert
              key: k8s.cluster.name
              value: ${KUBERNETES_SERVICE_HOST}
    filter/drop-if-input-source-runtime:
        metrics:
            datapoint:
                - resource.attributes["kyma.source"] == "runtime"
    filter/drop-if-input-source-prometheus:
        metrics:
            datapoint:
                - resource.attributes["kyma.source"] == "prometheus"
    filter/drop-if-input-source-istio:
        metrics:
            datapoint:
                - resource.attributes["kyma.source"] == "istio"
    transform/resolve-service-name:
        error_mode: ignore
        metric_statements:
            - context: resource
              statements:
                - set(attributes["service.name"], attributes["kyma.kubernetes_io_app_name"]) where attributes["service.name"] == nil or attributes["service.name"] == "" or IsMatch(attributes["service.name"], "^unknown_service(:.+)?$")
                - set(attributes["service.name"], attributes["kyma.app_name"]) where attributes["service.name"] == nil or attributes["service.name"] == "" or IsMatch(attributes["service.name"], "^unknown_service(:.+)?$")
                - set(attributes["service.name"], attributes["k8s.deployment.name"]) where attributes["service.name"] == nil or attributes["service.name"] == "" or IsMatch(attributes["service.name"], "^unknown_service(:.+)?$")
                - set(attributes["service.name"], attributes["k8s.daemonset.name"]) where attributes["service.name"] == nil or attributes["service.name"] == "" or IsMatch(attributes["service.name"], "^unknown_service(:.+)?$")
                - set(attributes["service.name"], attributes["k8s.statefulset.name"]) where attributes["service.name"] == nil or attributes["service.name"] == "" or IsMatch(attributes["service.name"], "^unknown_service(:.+)?$")
                - set(attributes["service.name"], attributes["k8s.job.name"]) where attributes["service.name"] == nil or attributes["service.name"] == "" or IsMatch(attributes["service.name"], "^unknown_service(:.+)?$")
                - set(attributes["service.name"], attributes["k8s.pod.name"]) where attributes["service.name"] == nil or attributes["service.name"] == "" or IsMatch(attributes["service.name"], "^unknown_service(:.+)?$")
                - set(attributes["service.name"], "unknown_service") where attributes["service.name"] == nil or attributes["service.name"] == ""
    resource/drop-kyma-attributes:
        attributes:
            - action: delete
              pattern: kyma.*
exporters:
    otlp/test:
        endpoint: ${OTLP_ENDPOINT_TEST}
        sending_queue:
            enabled: true
            queue_size: 256
        retry_on_failure:
            enabled: true
            initial_interval: 5s
            max_interval: 30s
            max_elapsed_time: 300s
