// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/kyma-project/telemetry-manager/internal/overrides"
	mock "github.com/stretchr/testify/mock"
)

// NewOverridesHandler creates a new instance of OverridesHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOverridesHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *OverridesHandler {
	mock := &OverridesHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// OverridesHandler is an autogenerated mock type for the OverridesHandler type
type OverridesHandler struct {
	mock.Mock
}

type OverridesHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *OverridesHandler) EXPECT() *OverridesHandler_Expecter {
	return &OverridesHandler_Expecter{mock: &_m.Mock}
}

// LoadOverrides provides a mock function for the type OverridesHandler
func (_mock *OverridesHandler) LoadOverrides(ctx context.Context) (*overrides.Config, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for LoadOverrides")
	}

	var r0 *overrides.Config
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*overrides.Config, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *overrides.Config); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*overrides.Config)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// OverridesHandler_LoadOverrides_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadOverrides'
type OverridesHandler_LoadOverrides_Call struct {
	*mock.Call
}

// LoadOverrides is a helper method to define mock.On call
//   - ctx context.Context
func (_e *OverridesHandler_Expecter) LoadOverrides(ctx interface{}) *OverridesHandler_LoadOverrides_Call {
	return &OverridesHandler_LoadOverrides_Call{Call: _e.mock.On("LoadOverrides", ctx)}
}

func (_c *OverridesHandler_LoadOverrides_Call) Run(run func(ctx context.Context)) *OverridesHandler_LoadOverrides_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *OverridesHandler_LoadOverrides_Call) Return(config *overrides.Config, err error) *OverridesHandler_LoadOverrides_Call {
	_c.Call.Return(config, err)
	return _c
}

func (_c *OverridesHandler_LoadOverrides_Call) RunAndReturn(run func(ctx context.Context) (*overrides.Config, error)) *OverridesHandler_LoadOverrides_Call {
	_c.Call.Return(run)
	return _c
}
