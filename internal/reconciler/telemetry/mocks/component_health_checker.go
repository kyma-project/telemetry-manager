// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"k8s.io/apimachinery/pkg/apis/meta/v1"
)

// NewComponentHealthChecker creates a new instance of ComponentHealthChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewComponentHealthChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *ComponentHealthChecker {
	mock := &ComponentHealthChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ComponentHealthChecker is an autogenerated mock type for the ComponentHealthChecker type
type ComponentHealthChecker struct {
	mock.Mock
}

type ComponentHealthChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *ComponentHealthChecker) EXPECT() *ComponentHealthChecker_Expecter {
	return &ComponentHealthChecker_Expecter{mock: &_m.Mock}
}

// Check provides a mock function for the type ComponentHealthChecker
func (_mock *ComponentHealthChecker) Check(ctx context.Context, telemetryInDeletion bool) (*v1.Condition, error) {
	ret := _mock.Called(ctx, telemetryInDeletion)

	if len(ret) == 0 {
		panic("no return value specified for Check")
	}

	var r0 *v1.Condition
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, bool) (*v1.Condition, error)); ok {
		return returnFunc(ctx, telemetryInDeletion)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, bool) *v1.Condition); ok {
		r0 = returnFunc(ctx, telemetryInDeletion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Condition)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = returnFunc(ctx, telemetryInDeletion)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ComponentHealthChecker_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type ComponentHealthChecker_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
//   - ctx context.Context
//   - telemetryInDeletion bool
func (_e *ComponentHealthChecker_Expecter) Check(ctx interface{}, telemetryInDeletion interface{}) *ComponentHealthChecker_Check_Call {
	return &ComponentHealthChecker_Check_Call{Call: _e.mock.On("Check", ctx, telemetryInDeletion)}
}

func (_c *ComponentHealthChecker_Check_Call) Run(run func(ctx context.Context, telemetryInDeletion bool)) *ComponentHealthChecker_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 bool
		if args[1] != nil {
			arg1 = args[1].(bool)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ComponentHealthChecker_Check_Call) Return(condition *v1.Condition, err error) *ComponentHealthChecker_Check_Call {
	_c.Call.Return(condition, err)
	return _c
}

func (_c *ComponentHealthChecker_Check_Call) RunAndReturn(run func(ctx context.Context, telemetryInDeletion bool) (*v1.Condition, error)) *ComponentHealthChecker_Check_Call {
	_c.Call.Return(run)
	return _c
}
