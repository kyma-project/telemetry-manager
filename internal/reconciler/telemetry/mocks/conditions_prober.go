// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	telemetry "github.com/kyma-project/telemetry-manager/internal/reconciler/telemetry"
	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	v1alpha1 "github.com/kyma-project/telemetry-manager/apis/operator/v1alpha1"
)

// ConditionsProber is an autogenerated mock type for the ConditionsProber type
type ConditionsProber struct {
	mock.Mock
}

// Endpoints provides a mock function with given fields: ctx, config, endpoints
func (_m *ConditionsProber) Endpoints(ctx context.Context, config telemetry.Config, endpoints v1alpha1.Endpoints) (v1alpha1.Endpoints, error) {
	ret := _m.Called(ctx, config, endpoints)

	var r0 v1alpha1.Endpoints
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, telemetry.Config, v1alpha1.Endpoints) (v1alpha1.Endpoints, error)); ok {
		return rf(ctx, config, endpoints)
	}
	if rf, ok := ret.Get(0).(func(context.Context, telemetry.Config, v1alpha1.Endpoints) v1alpha1.Endpoints); ok {
		r0 = rf(ctx, config, endpoints)
	} else {
		r0 = ret.Get(0).(v1alpha1.Endpoints)
	}

	if rf, ok := ret.Get(1).(func(context.Context, telemetry.Config, v1alpha1.Endpoints) error); ok {
		r1 = rf(ctx, config, endpoints)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsComponentHealthy provides a mock function with given fields: ctx
func (_m *ConditionsProber) check(ctx context.Context) (*v1.Condition, error) {
	ret := _m.Called(ctx)

	var r0 *v1.Condition
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*v1.Condition, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *v1.Condition); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Condition)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Name provides a mock function with given fields:
func (_m *ConditionsProber) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewConditionsProber creates a new instance of ConditionsProber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConditionsProber(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConditionsProber {
	mock := &ConditionsProber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
