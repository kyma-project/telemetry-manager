// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"

	overrides "github.com/kyma-project/telemetry-manager/internal/overrides"
	mock "github.com/stretchr/testify/mock"
)

// OverridesHandler is an autogenerated mock type for the OverridesHandler type
type OverridesHandler struct {
	mock.Mock
}

// LoadOverrides provides a mock function with given fields: ctx
func (_m *OverridesHandler) LoadOverrides(ctx context.Context) (*overrides.Config, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for LoadOverrides")
	}

	var r0 *overrides.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*overrides.Config, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *overrides.Config); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*overrides.Config)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOverridesHandler creates a new instance of OverridesHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOverridesHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *OverridesHandler {
	mock := &OverridesHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
