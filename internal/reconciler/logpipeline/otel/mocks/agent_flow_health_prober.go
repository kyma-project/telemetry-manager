// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/kyma-project/telemetry-manager/internal/selfmonitor/prober"
	mock "github.com/stretchr/testify/mock"
)

// NewAgentFlowHealthProber creates a new instance of AgentFlowHealthProber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAgentFlowHealthProber(t interface {
	mock.TestingT
	Cleanup(func())
}) *AgentFlowHealthProber {
	mock := &AgentFlowHealthProber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AgentFlowHealthProber is an autogenerated mock type for the AgentFlowHealthProber type
type AgentFlowHealthProber struct {
	mock.Mock
}

type AgentFlowHealthProber_Expecter struct {
	mock *mock.Mock
}

func (_m *AgentFlowHealthProber) EXPECT() *AgentFlowHealthProber_Expecter {
	return &AgentFlowHealthProber_Expecter{mock: &_m.Mock}
}

// Probe provides a mock function for the type AgentFlowHealthProber
func (_mock *AgentFlowHealthProber) Probe(ctx context.Context, pipelineName string) (prober.OTelAgentProbeResult, error) {
	ret := _mock.Called(ctx, pipelineName)

	if len(ret) == 0 {
		panic("no return value specified for Probe")
	}

	var r0 prober.OTelAgentProbeResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (prober.OTelAgentProbeResult, error)); ok {
		return returnFunc(ctx, pipelineName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) prober.OTelAgentProbeResult); ok {
		r0 = returnFunc(ctx, pipelineName)
	} else {
		r0 = ret.Get(0).(prober.OTelAgentProbeResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, pipelineName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AgentFlowHealthProber_Probe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Probe'
type AgentFlowHealthProber_Probe_Call struct {
	*mock.Call
}

// Probe is a helper method to define mock.On call
//   - ctx
//   - pipelineName
func (_e *AgentFlowHealthProber_Expecter) Probe(ctx interface{}, pipelineName interface{}) *AgentFlowHealthProber_Probe_Call {
	return &AgentFlowHealthProber_Probe_Call{Call: _e.mock.On("Probe", ctx, pipelineName)}
}

func (_c *AgentFlowHealthProber_Probe_Call) Run(run func(ctx context.Context, pipelineName string)) *AgentFlowHealthProber_Probe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AgentFlowHealthProber_Probe_Call) Return(oTelAgentProbeResult prober.OTelAgentProbeResult, err error) *AgentFlowHealthProber_Probe_Call {
	_c.Call.Return(oTelAgentProbeResult, err)
	return _c
}

func (_c *AgentFlowHealthProber_Probe_Call) RunAndReturn(run func(ctx context.Context, pipelineName string) (prober.OTelAgentProbeResult, error)) *AgentFlowHealthProber_Probe_Call {
	_c.Call.Return(run)
	return _c
}
