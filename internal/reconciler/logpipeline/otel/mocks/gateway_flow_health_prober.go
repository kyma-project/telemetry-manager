// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/kyma-project/telemetry-manager/internal/selfmonitor/prober"
	mock "github.com/stretchr/testify/mock"
)

// NewGatewayFlowHealthProber creates a new instance of GatewayFlowHealthProber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGatewayFlowHealthProber(t interface {
	mock.TestingT
	Cleanup(func())
}) *GatewayFlowHealthProber {
	mock := &GatewayFlowHealthProber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// GatewayFlowHealthProber is an autogenerated mock type for the GatewayFlowHealthProber type
type GatewayFlowHealthProber struct {
	mock.Mock
}

type GatewayFlowHealthProber_Expecter struct {
	mock *mock.Mock
}

func (_m *GatewayFlowHealthProber) EXPECT() *GatewayFlowHealthProber_Expecter {
	return &GatewayFlowHealthProber_Expecter{mock: &_m.Mock}
}

// Probe provides a mock function for the type GatewayFlowHealthProber
func (_mock *GatewayFlowHealthProber) Probe(ctx context.Context, pipelineName string) (prober.OTelGatewayProbeResult, error) {
	ret := _mock.Called(ctx, pipelineName)

	if len(ret) == 0 {
		panic("no return value specified for Probe")
	}

	var r0 prober.OTelGatewayProbeResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (prober.OTelGatewayProbeResult, error)); ok {
		return returnFunc(ctx, pipelineName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) prober.OTelGatewayProbeResult); ok {
		r0 = returnFunc(ctx, pipelineName)
	} else {
		r0 = ret.Get(0).(prober.OTelGatewayProbeResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, pipelineName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GatewayFlowHealthProber_Probe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Probe'
type GatewayFlowHealthProber_Probe_Call struct {
	*mock.Call
}

// Probe is a helper method to define mock.On call
//   - ctx
//   - pipelineName
func (_e *GatewayFlowHealthProber_Expecter) Probe(ctx interface{}, pipelineName interface{}) *GatewayFlowHealthProber_Probe_Call {
	return &GatewayFlowHealthProber_Probe_Call{Call: _e.mock.On("Probe", ctx, pipelineName)}
}

func (_c *GatewayFlowHealthProber_Probe_Call) Run(run func(ctx context.Context, pipelineName string)) *GatewayFlowHealthProber_Probe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GatewayFlowHealthProber_Probe_Call) Return(oTelGatewayProbeResult prober.OTelGatewayProbeResult, err error) *GatewayFlowHealthProber_Probe_Call {
	_c.Call.Return(oTelGatewayProbeResult, err)
	return _c
}

func (_c *GatewayFlowHealthProber_Probe_Call) RunAndReturn(run func(ctx context.Context, pipelineName string) (prober.OTelGatewayProbeResult, error)) *GatewayFlowHealthProber_Probe_Call {
	_c.Call.Return(run)
	return _c
}
