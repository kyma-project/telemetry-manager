// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/kyma-project/telemetry-manager/internal/resources/otelcollector"
	mock "github.com/stretchr/testify/mock"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// NewGatewayApplierDeleter creates a new instance of GatewayApplierDeleter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGatewayApplierDeleter(t interface {
	mock.TestingT
	Cleanup(func())
}) *GatewayApplierDeleter {
	mock := &GatewayApplierDeleter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// GatewayApplierDeleter is an autogenerated mock type for the GatewayApplierDeleter type
type GatewayApplierDeleter struct {
	mock.Mock
}

type GatewayApplierDeleter_Expecter struct {
	mock *mock.Mock
}

func (_m *GatewayApplierDeleter) EXPECT() *GatewayApplierDeleter_Expecter {
	return &GatewayApplierDeleter_Expecter{mock: &_m.Mock}
}

// ApplyResources provides a mock function for the type GatewayApplierDeleter
func (_mock *GatewayApplierDeleter) ApplyResources(ctx context.Context, c client.Client, opts otelcollector.GatewayApplyOptions) error {
	ret := _mock.Called(ctx, c, opts)

	if len(ret) == 0 {
		panic("no return value specified for ApplyResources")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, client.Client, otelcollector.GatewayApplyOptions) error); ok {
		r0 = returnFunc(ctx, c, opts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GatewayApplierDeleter_ApplyResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyResources'
type GatewayApplierDeleter_ApplyResources_Call struct {
	*mock.Call
}

// ApplyResources is a helper method to define mock.On call
//   - ctx context.Context
//   - c client.Client
//   - opts otelcollector.GatewayApplyOptions
func (_e *GatewayApplierDeleter_Expecter) ApplyResources(ctx interface{}, c interface{}, opts interface{}) *GatewayApplierDeleter_ApplyResources_Call {
	return &GatewayApplierDeleter_ApplyResources_Call{Call: _e.mock.On("ApplyResources", ctx, c, opts)}
}

func (_c *GatewayApplierDeleter_ApplyResources_Call) Run(run func(ctx context.Context, c client.Client, opts otelcollector.GatewayApplyOptions)) *GatewayApplierDeleter_ApplyResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 client.Client
		if args[1] != nil {
			arg1 = args[1].(client.Client)
		}
		var arg2 otelcollector.GatewayApplyOptions
		if args[2] != nil {
			arg2 = args[2].(otelcollector.GatewayApplyOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *GatewayApplierDeleter_ApplyResources_Call) Return(err error) *GatewayApplierDeleter_ApplyResources_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GatewayApplierDeleter_ApplyResources_Call) RunAndReturn(run func(ctx context.Context, c client.Client, opts otelcollector.GatewayApplyOptions) error) *GatewayApplierDeleter_ApplyResources_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteResources provides a mock function for the type GatewayApplierDeleter
func (_mock *GatewayApplierDeleter) DeleteResources(ctx context.Context, c client.Client, isIstioActive bool) error {
	ret := _mock.Called(ctx, c, isIstioActive)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResources")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, client.Client, bool) error); ok {
		r0 = returnFunc(ctx, c, isIstioActive)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GatewayApplierDeleter_DeleteResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteResources'
type GatewayApplierDeleter_DeleteResources_Call struct {
	*mock.Call
}

// DeleteResources is a helper method to define mock.On call
//   - ctx context.Context
//   - c client.Client
//   - isIstioActive bool
func (_e *GatewayApplierDeleter_Expecter) DeleteResources(ctx interface{}, c interface{}, isIstioActive interface{}) *GatewayApplierDeleter_DeleteResources_Call {
	return &GatewayApplierDeleter_DeleteResources_Call{Call: _e.mock.On("DeleteResources", ctx, c, isIstioActive)}
}

func (_c *GatewayApplierDeleter_DeleteResources_Call) Run(run func(ctx context.Context, c client.Client, isIstioActive bool)) *GatewayApplierDeleter_DeleteResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 client.Client
		if args[1] != nil {
			arg1 = args[1].(client.Client)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *GatewayApplierDeleter_DeleteResources_Call) Return(err error) *GatewayApplierDeleter_DeleteResources_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GatewayApplierDeleter_DeleteResources_Call) RunAndReturn(run func(ctx context.Context, c client.Client, isIstioActive bool) error) *GatewayApplierDeleter_DeleteResources_Call {
	_c.Call.Return(run)
	return _c
}
