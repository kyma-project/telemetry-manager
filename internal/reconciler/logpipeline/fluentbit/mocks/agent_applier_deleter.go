// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/kyma-project/telemetry-manager/internal/resources/fluentbit"
	mock "github.com/stretchr/testify/mock"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// NewAgentApplierDeleter creates a new instance of AgentApplierDeleter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAgentApplierDeleter(t interface {
	mock.TestingT
	Cleanup(func())
}) *AgentApplierDeleter {
	mock := &AgentApplierDeleter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AgentApplierDeleter is an autogenerated mock type for the AgentApplierDeleter type
type AgentApplierDeleter struct {
	mock.Mock
}

type AgentApplierDeleter_Expecter struct {
	mock *mock.Mock
}

func (_m *AgentApplierDeleter) EXPECT() *AgentApplierDeleter_Expecter {
	return &AgentApplierDeleter_Expecter{mock: &_m.Mock}
}

// ApplyResources provides a mock function for the type AgentApplierDeleter
func (_mock *AgentApplierDeleter) ApplyResources(ctx context.Context, c client.Client, opts fluentbit.AgentApplyOptions) error {
	ret := _mock.Called(ctx, c, opts)

	if len(ret) == 0 {
		panic("no return value specified for ApplyResources")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, client.Client, fluentbit.AgentApplyOptions) error); ok {
		r0 = returnFunc(ctx, c, opts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AgentApplierDeleter_ApplyResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyResources'
type AgentApplierDeleter_ApplyResources_Call struct {
	*mock.Call
}

// ApplyResources is a helper method to define mock.On call
//   - ctx context.Context
//   - c client.Client
//   - opts fluentbit.AgentApplyOptions
func (_e *AgentApplierDeleter_Expecter) ApplyResources(ctx interface{}, c interface{}, opts interface{}) *AgentApplierDeleter_ApplyResources_Call {
	return &AgentApplierDeleter_ApplyResources_Call{Call: _e.mock.On("ApplyResources", ctx, c, opts)}
}

func (_c *AgentApplierDeleter_ApplyResources_Call) Run(run func(ctx context.Context, c client.Client, opts fluentbit.AgentApplyOptions)) *AgentApplierDeleter_ApplyResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 client.Client
		if args[1] != nil {
			arg1 = args[1].(client.Client)
		}
		var arg2 fluentbit.AgentApplyOptions
		if args[2] != nil {
			arg2 = args[2].(fluentbit.AgentApplyOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *AgentApplierDeleter_ApplyResources_Call) Return(err error) *AgentApplierDeleter_ApplyResources_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AgentApplierDeleter_ApplyResources_Call) RunAndReturn(run func(ctx context.Context, c client.Client, opts fluentbit.AgentApplyOptions) error) *AgentApplierDeleter_ApplyResources_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteResources provides a mock function for the type AgentApplierDeleter
func (_mock *AgentApplierDeleter) DeleteResources(ctx context.Context, c client.Client) error {
	ret := _mock.Called(ctx, c)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResources")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, client.Client) error); ok {
		r0 = returnFunc(ctx, c)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AgentApplierDeleter_DeleteResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteResources'
type AgentApplierDeleter_DeleteResources_Call struct {
	*mock.Call
}

// DeleteResources is a helper method to define mock.On call
//   - ctx context.Context
//   - c client.Client
func (_e *AgentApplierDeleter_Expecter) DeleteResources(ctx interface{}, c interface{}) *AgentApplierDeleter_DeleteResources_Call {
	return &AgentApplierDeleter_DeleteResources_Call{Call: _e.mock.On("DeleteResources", ctx, c)}
}

func (_c *AgentApplierDeleter_DeleteResources_Call) Run(run func(ctx context.Context, c client.Client)) *AgentApplierDeleter_DeleteResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 client.Client
		if args[1] != nil {
			arg1 = args[1].(client.Client)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AgentApplierDeleter_DeleteResources_Call) Return(err error) *AgentApplierDeleter_DeleteResources_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AgentApplierDeleter_DeleteResources_Call) RunAndReturn(run func(ctx context.Context, c client.Client) error) *AgentApplierDeleter_DeleteResources_Call {
	_c.Call.Return(run)
	return _c
}
