// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	builder "github.com/kyma-project/telemetry-manager/internal/fluentbit/config/builder"

	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/kyma-project/telemetry-manager/apis/telemetry/v1alpha1"
)

// AgentConfigBuilder is an autogenerated mock type for the AgentConfigBuilder type
type AgentConfigBuilder struct {
	mock.Mock
}

// Build provides a mock function with given fields: ctx, reconcilablePipelines
func (_m *AgentConfigBuilder) Build(ctx context.Context, reconcilablePipelines []v1alpha1.LogPipeline) (*builder.FluentBitConfig, error) {
	ret := _m.Called(ctx, reconcilablePipelines)

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 *builder.FluentBitConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []v1alpha1.LogPipeline) (*builder.FluentBitConfig, error)); ok {
		return rf(ctx, reconcilablePipelines)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []v1alpha1.LogPipeline) *builder.FluentBitConfig); ok {
		r0 = rf(ctx, reconcilablePipelines)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*builder.FluentBitConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []v1alpha1.LogPipeline) error); ok {
		r1 = rf(ctx, reconcilablePipelines)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAgentConfigBuilder creates a new instance of AgentConfigBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAgentConfigBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *AgentConfigBuilder {
	mock := &AgentConfigBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
