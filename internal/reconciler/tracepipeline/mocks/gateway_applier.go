// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"

	client "sigs.k8s.io/controller-runtime/pkg/client"

	mock "github.com/stretchr/testify/mock"

	otelcollector "github.com/kyma-project/telemetry-manager/internal/resources/otelcollector"
)

// GatewayApplier is an autogenerated mock type for the GatewayApplier type
type GatewayApplier struct {
	mock.Mock
}

// ApplyResources provides a mock function with given fields: ctx, c, opts
func (_m *GatewayApplier) ApplyResources(ctx context.Context, c client.Client, opts otelcollector.GatewayApplyOptions) error {
	ret := _m.Called(ctx, c, opts)

	if len(ret) == 0 {
		panic("no return value specified for ApplyResources")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.Client, otelcollector.GatewayApplyOptions) error); ok {
		r0 = rf(ctx, c, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewGatewayApplier creates a new instance of GatewayApplier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGatewayApplier(t interface {
	mock.TestingT
	Cleanup(func())
}) *GatewayApplier {
	mock := &GatewayApplier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
