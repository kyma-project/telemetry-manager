// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// PipelineLock is an autogenerated mock type for the PipelineLock type
type PipelineLock struct {
	mock.Mock
}

// IsLockHolder provides a mock function with given fields: ctx, owner
func (_m *PipelineLock) IsLockHolder(ctx context.Context, owner v1.Object) error {
	ret := _m.Called(ctx, owner)

	if len(ret) == 0 {
		panic("no return value specified for IsLockHolder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, v1.Object) error); ok {
		r0 = rf(ctx, owner)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TryAcquireLock provides a mock function with given fields: ctx, owner
func (_m *PipelineLock) TryAcquireLock(ctx context.Context, owner v1.Object) error {
	ret := _m.Called(ctx, owner)

	if len(ret) == 0 {
		panic("no return value specified for TryAcquireLock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, v1.Object) error); ok {
		r0 = rf(ctx, owner)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPipelineLock creates a new instance of PipelineLock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPipelineLock(t interface {
	mock.TestingT
	Cleanup(func())
}) *PipelineLock {
	mock := &PipelineLock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
