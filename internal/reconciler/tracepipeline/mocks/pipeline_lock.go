// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"k8s.io/apimachinery/pkg/apis/meta/v1"
)

// NewPipelineLock creates a new instance of PipelineLock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPipelineLock(t interface {
	mock.TestingT
	Cleanup(func())
}) *PipelineLock {
	mock := &PipelineLock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// PipelineLock is an autogenerated mock type for the PipelineLock type
type PipelineLock struct {
	mock.Mock
}

type PipelineLock_Expecter struct {
	mock *mock.Mock
}

func (_m *PipelineLock) EXPECT() *PipelineLock_Expecter {
	return &PipelineLock_Expecter{mock: &_m.Mock}
}

// IsLockHolder provides a mock function for the type PipelineLock
func (_mock *PipelineLock) IsLockHolder(ctx context.Context, owner v1.Object) error {
	ret := _mock.Called(ctx, owner)

	if len(ret) == 0 {
		panic("no return value specified for IsLockHolder")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1.Object) error); ok {
		r0 = returnFunc(ctx, owner)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PipelineLock_IsLockHolder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsLockHolder'
type PipelineLock_IsLockHolder_Call struct {
	*mock.Call
}

// IsLockHolder is a helper method to define mock.On call
//   - ctx
//   - owner
func (_e *PipelineLock_Expecter) IsLockHolder(ctx interface{}, owner interface{}) *PipelineLock_IsLockHolder_Call {
	return &PipelineLock_IsLockHolder_Call{Call: _e.mock.On("IsLockHolder", ctx, owner)}
}

func (_c *PipelineLock_IsLockHolder_Call) Run(run func(ctx context.Context, owner v1.Object)) *PipelineLock_IsLockHolder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(v1.Object))
	})
	return _c
}

func (_c *PipelineLock_IsLockHolder_Call) Return(err error) *PipelineLock_IsLockHolder_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PipelineLock_IsLockHolder_Call) RunAndReturn(run func(ctx context.Context, owner v1.Object) error) *PipelineLock_IsLockHolder_Call {
	_c.Call.Return(run)
	return _c
}

// TryAcquireLock provides a mock function for the type PipelineLock
func (_mock *PipelineLock) TryAcquireLock(ctx context.Context, owner v1.Object) error {
	ret := _mock.Called(ctx, owner)

	if len(ret) == 0 {
		panic("no return value specified for TryAcquireLock")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1.Object) error); ok {
		r0 = returnFunc(ctx, owner)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PipelineLock_TryAcquireLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TryAcquireLock'
type PipelineLock_TryAcquireLock_Call struct {
	*mock.Call
}

// TryAcquireLock is a helper method to define mock.On call
//   - ctx
//   - owner
func (_e *PipelineLock_Expecter) TryAcquireLock(ctx interface{}, owner interface{}) *PipelineLock_TryAcquireLock_Call {
	return &PipelineLock_TryAcquireLock_Call{Call: _e.mock.On("TryAcquireLock", ctx, owner)}
}

func (_c *PipelineLock_TryAcquireLock_Call) Run(run func(ctx context.Context, owner v1.Object)) *PipelineLock_TryAcquireLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(v1.Object))
	})
	return _c
}

func (_c *PipelineLock_TryAcquireLock_Call) Return(err error) *PipelineLock_TryAcquireLock_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PipelineLock_TryAcquireLock_Call) RunAndReturn(run func(ctx context.Context, owner v1.Object) error) *PipelineLock_TryAcquireLock_Call {
	_c.Call.Return(run)
	return _c
}
