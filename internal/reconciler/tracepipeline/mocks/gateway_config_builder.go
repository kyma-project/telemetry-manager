// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/kyma-project/telemetry-manager/apis/telemetry/v1alpha1"
	"github.com/kyma-project/telemetry-manager/internal/otelcollector/config/otlpexporter"
	"github.com/kyma-project/telemetry-manager/internal/otelcollector/config/trace/gateway"
	mock "github.com/stretchr/testify/mock"
)

// NewGatewayConfigBuilder creates a new instance of GatewayConfigBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGatewayConfigBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *GatewayConfigBuilder {
	mock := &GatewayConfigBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// GatewayConfigBuilder is an autogenerated mock type for the GatewayConfigBuilder type
type GatewayConfigBuilder struct {
	mock.Mock
}

type GatewayConfigBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *GatewayConfigBuilder) EXPECT() *GatewayConfigBuilder_Expecter {
	return &GatewayConfigBuilder_Expecter{mock: &_m.Mock}
}

// Build provides a mock function for the type GatewayConfigBuilder
func (_mock *GatewayConfigBuilder) Build(ctx context.Context, pipelines []v1alpha1.TracePipeline, opts gateway.BuildOptions) (*gateway.Config, otlpexporter.EnvVars, error) {
	ret := _mock.Called(ctx, pipelines, opts)

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 *gateway.Config
	var r1 otlpexporter.EnvVars
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []v1alpha1.TracePipeline, gateway.BuildOptions) (*gateway.Config, otlpexporter.EnvVars, error)); ok {
		return returnFunc(ctx, pipelines, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []v1alpha1.TracePipeline, gateway.BuildOptions) *gateway.Config); ok {
		r0 = returnFunc(ctx, pipelines, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gateway.Config)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []v1alpha1.TracePipeline, gateway.BuildOptions) otlpexporter.EnvVars); ok {
		r1 = returnFunc(ctx, pipelines, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(otlpexporter.EnvVars)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, []v1alpha1.TracePipeline, gateway.BuildOptions) error); ok {
		r2 = returnFunc(ctx, pipelines, opts)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// GatewayConfigBuilder_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type GatewayConfigBuilder_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
//   - ctx
//   - pipelines
//   - opts
func (_e *GatewayConfigBuilder_Expecter) Build(ctx interface{}, pipelines interface{}, opts interface{}) *GatewayConfigBuilder_Build_Call {
	return &GatewayConfigBuilder_Build_Call{Call: _e.mock.On("Build", ctx, pipelines, opts)}
}

func (_c *GatewayConfigBuilder_Build_Call) Run(run func(ctx context.Context, pipelines []v1alpha1.TracePipeline, opts gateway.BuildOptions)) *GatewayConfigBuilder_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]v1alpha1.TracePipeline), args[2].(gateway.BuildOptions))
	})
	return _c
}

func (_c *GatewayConfigBuilder_Build_Call) Return(config *gateway.Config, envVars otlpexporter.EnvVars, err error) *GatewayConfigBuilder_Build_Call {
	_c.Call.Return(config, envVars, err)
	return _c
}

func (_c *GatewayConfigBuilder_Build_Call) RunAndReturn(run func(ctx context.Context, pipelines []v1alpha1.TracePipeline, opts gateway.BuildOptions) (*gateway.Config, otlpexporter.EnvVars, error)) *GatewayConfigBuilder_Build_Call {
	_c.Call.Return(run)
	return _c
}
