// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewErrorToMessageConverter creates a new instance of ErrorToMessageConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewErrorToMessageConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ErrorToMessageConverter {
	mock := &ErrorToMessageConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ErrorToMessageConverter is an autogenerated mock type for the ErrorToMessageConverter type
type ErrorToMessageConverter struct {
	mock.Mock
}

type ErrorToMessageConverter_Expecter struct {
	mock *mock.Mock
}

func (_m *ErrorToMessageConverter) EXPECT() *ErrorToMessageConverter_Expecter {
	return &ErrorToMessageConverter_Expecter{mock: &_m.Mock}
}

// Convert provides a mock function for the type ErrorToMessageConverter
func (_mock *ErrorToMessageConverter) Convert(err error) string {
	ret := _mock.Called(err)

	if len(ret) == 0 {
		panic("no return value specified for Convert")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(error) string); ok {
		r0 = returnFunc(err)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// ErrorToMessageConverter_Convert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Convert'
type ErrorToMessageConverter_Convert_Call struct {
	*mock.Call
}

// Convert is a helper method to define mock.On call
//   - err
func (_e *ErrorToMessageConverter_Expecter) Convert(err interface{}) *ErrorToMessageConverter_Convert_Call {
	return &ErrorToMessageConverter_Convert_Call{Call: _e.mock.On("Convert", err)}
}

func (_c *ErrorToMessageConverter_Convert_Call) Run(run func(err error)) *ErrorToMessageConverter_Convert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *ErrorToMessageConverter_Convert_Call) Return(s string) *ErrorToMessageConverter_Convert_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *ErrorToMessageConverter_Convert_Call) RunAndReturn(run func(err error) string) *ErrorToMessageConverter_Convert_Call {
	_c.Call.Return(run)
	return _c
}
