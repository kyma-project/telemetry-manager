
####### This block configures resource limits for the tooling and disables scaping of them via annotations

prometheusOperator:
  # Define resource limits
  resources:
    requests:
      cpu: "10m"
      memory: "128Mi"
    limits:
      memory: "1Gi"

prometheus-node-exporter:
  # Disables prometheus annotations on monitoring components as they are scraped using an explicit config
  service:
    annotations:
      prometheus.io/scrape: "false"

kube-state-metrics:
  # Disables prometheus annotations on monitoring components as they are scraped using an explicit config
  prometheusScrape: false

  # Define resource limits
  resources:
    requests:
      cpu: "10m"
      memory: "128Mi"
    limits:
      memory: "2Gi"

alertmanager:
  # Disable alertmanager as it is not needed for the load test
  enabled: false

####### This block disables not needed features

kubeEtcd:
  # Disable scraping of control plane component etcd as it is not reachable from the data plane
  enabled: false

kubeControllerManager:
  # Disable scraping of control plane component kubeControllerManager as it is not reachable from the data plane
  enabled: false

kubeProxy:
  # Disable scraping of control plane component kubeProxy as it is not reachable from the data plane
  enabled: false

kubeScheduler:
  # Disable scraping of control plane component kubeScheduler as it is not reachable from the data plane
  enabled: false

####### This block is required to enable scraping of endpoints with Istio strict mTLS, see also https://istio.io/latest/docs/ops/integrations/prometheus/#tls-settings
prometheus:
  prometheusSpec:

####### This block configures data retention and persistence
    # How long to retain metrics
    retention: 1d

    # Maximum size of metrics
    retentionSize: 25GB

    # Use a persistent volume for durable storage of data
    storageSpec:
      volumeClaimTemplate:
        spec:
          resources:
            requests:
              storage: 30Gi
    
    # Define resource limits
    resources:
      limits:
        memory: 4Gi
      requests:
        cpu: 125m
        memory: 256m


####### This block enabled scrape discovery based on typical prometheus annotations

    additionalScrapeConfigs:
      # Scrape config for service endpoints.
      #
      # The relabeling allows the actual service scrape endpoint to be configured
      # via the following annotations:
      #
      # * `prometheus.io/scrape`: Only scrape services that have a value of `true`
      # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
      # to set this to `https` & most likely set the `tls_config` of the scrape config.
      # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
      # * `prometheus.io/port`: If the metrics are exposed on a different port to the
      # service then set this appropriately.
      - job_name: 'kubernetes-service-endpoints'

        kubernetes_sd_configs:
          - role: endpoints

        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
            action: replace
            target_label: __scheme__
            regex: (https?)
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
            action: replace
            target_label: __address__
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
          - source_labels: [__meta_kubernetes_namespace]
            action: keep
            regex: kyma-system
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: service
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: pod
          - source_labels: [__meta_kubernetes_pod_node_name]
            action: replace
            target_label: node
