---
# Source: telemetry-manager/templates/priority-class-high.yaml
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: telemetry-priority-class-high
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/part-of: telemetry
    kyma-project.io/module: telemetry
    
    app.kubernetes.io/managed-by: kyma
description: Global scheduling priority of Telemetry DaemonSet components. Must not
  be blocked by unschedulable non-daemonset workloads.
globalDefault: false
value: 2100000
---
# Source: telemetry-manager/templates/priority-class.yaml
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: telemetry-priority-class
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/part-of: telemetry
    kyma-project.io/module: telemetry
    
    app.kubernetes.io/managed-by: kyma
description: Global (default) scheduling priority of Kyma components. Must not be
  blocked by unschedulable user workloads.
globalDefault: false
value: 2000000
---
# Source: telemetry-manager/templates/networkpolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: telemetry-manager
  namespace: default
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/part-of: telemetry
    kyma-project.io/module: telemetry
    
    app.kubernetes.io/managed-by: kyma
spec:
  egress:
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
    - ipBlock:
        cidr: ::/0
  ingress:
  - from:
    - ipBlock:
        cidr: 0.0.0.0/0
    - ipBlock:
        cidr: ::/0
    ports:
    - port: 8080
      protocol: TCP
    - port: 8081
      protocol: TCP
    - port: 9443
      protocol: TCP
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: telemetry
      app.kubernetes.io/name: manager
      control-plane: telemetry-manager
      kyma-project.io/component: controller
  policyTypes:
  - Ingress
  - Egress
---
# Source: telemetry-manager/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: telemetry-manager
  namespace: default
---
# Source: telemetry-manager/templates/busola-logpipelines.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: telemetry-logpipelines
  namespace: default
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/part-of: telemetry
    busola.io/extension: resource
    busola.io/extension-version: "0.5"
    kyma-project.io/module: telemetry
    
    app.kubernetes.io/managed-by: kyma
data: 
  details: |-
    header:
      - source: >-
           $each(spec.output, function($v, $k) { $exists($v) ? $k })
        type: string
        name: Type
        isSelected: true
        widget: Text
    status:
      body:
        - name: Supported Mode
          widget: Badge
          source: $not(status.unsupportedMode)
          highlights:
            positive:
              - 'true'
            critical:
              - 'false'
        - name: Condition details
          widget: ConditionList
          source: status.conditions
          highlights:
            - type: AgentHealthy
              positive:
                - 'True'
              critical:
                - 'False'
              warning:
                - 'Unknown'
            - type: ConfigurationGenerated
              positive:
                - 'True'
              critical:
                - 'False'
              warning:
                - 'Unknown'
            - type: TelemetryFlowHealthy
              positive:
                - 'True'
              critical:
                - 'False'
              warning:
                - 'Unknown'
          customContent:
            - value:
                widget: Badge
                source: $filter(status.conditions, function($c){$c.type = 'AgentHealthy'}).reason
              header: Reason
              type: AgentHealthy
            - value: $readableTimestamp($filter(status.conditions, function($c){$c.type = 'AgentHealthy'}).lastTransitionTime)
              header: Last transition time
              type: AgentHealthy
            - value:
                widget: Badge
                source: $filter(status.conditions, function($c){$c.type = 'ConfigurationGenerated'}).reason
              header: Reason
              type: ConfigurationGenerated
            - value: $readableTimestamp($filter(status.conditions, function($c){$c.type = 'ConfigurationGenerated'}).lastTransitionTime)
              header: Last transition time
              type: ConfigurationGenerated
            - value:
                widget: Badge
                source: $filter(status.conditions, function($c){$c.type = 'TelemetryFlowHealthy'}).reason
              header: Reason
              type: TelemetryFlowHealthy
            - value: $readableTimestamp($filter(status.conditions, function($c){$c.type = 'TelemetryFlowHealthy'}).lastTransitionTime)
              header: Last transition time
              type: TelemetryFlowHealthy
    body:
      - widget: Panel
        name: Input
        children:
          - widget: Panel
            name: Applications
            visibility: spec.input.application.enabled
            children:
              - name: Enabled
                source: spec.input.application.enabled
              - widget: Panel
                name: Namespaces
                children:
                  - name: Include
                    widget: JoinedArray
                    source: spec.input.application.namespaces.include
                    separator: ', '
                  - name: Exclude
                    widget: JoinedArray
                    source: spec.input.application.namespaces.exclude
                    separator: ', '
                  - name: System Namespaces
                    source: spec.input.application.namespaces.system
              - widget: Panel
                name: Containers
                children:
                  - name: Include
                    widget: JoinedArray
                    source: spec.input.application.containers.include
                    separator: ', '
                  - name: Exclude
                    widget: JoinedArray
                    source: spec.input.application.containers.exclude
                    separator: ', '
              - widget: Panel
                name: Other Settings
                children:
                  - name: Keep Annotations
                    source: spec.input.application.keepAnnotations
                  - name: Drop Labels
                    source: spec.input.application.dropLabels
                  - name: Keep Original Log Body
                    source: spec.input.application.keepOriginalBody
          - widget: Panel
            name: OTLP
            visibility: $exists(spec.output.otlp)
            children:
              - name: Disabled
                source: spec.input.otlp.disabled
                placeholder: 'false'
              - widget: Panel
                name: Namespaces
                children:
                  - name: Include
                    widget: JoinedArray
                    source: spec.input.otlp.namespaces.include
                    separator: ', '
                  - name: Exclude
                    widget: JoinedArray
                    source: spec.input.otlp.namespaces.exclude
                    separator: ', '
      - widget: Panel
        name: Output
        children:
          - name: Custom
            widget: CodeViewer
            language: '''plaintext'''
            source: spec.output.custom
            visibility: $exists(spec.output.custom)
          - name: HTTP
            widget: Panel
            visibility: $exists(spec.output.http)
            children:
              - name: Host
                widget: Panel
                children:
                  - name: Value
                    source: spec.output.http.host.value
                    visibility: $exists(spec.output.http.host.value)
                  - name: Value From Secret
                    widget: ResourceRefs
                    source: spec.output.http.host.valueFrom.secretKeyRef
                    kind: Secret
                    visibility: $exists(spec.output.http.host.valueFrom.secretKeyRef.name)
              - name: User
                widget: Panel
                children:
                  - name: Value
                    source: spec.output.http.user.value
                    visibility: $exists(spec.output.http.user.value)
                  - name: Value From Secret
                    widget: ResourceRefs
                    source: spec.output.http.user.valueFrom.secretKeyRef
                    kind: Secret
                    visibility: $exists(spec.output.http.user.valueFrom.secretKeyRef.name)
              - name: Password
                widget: Panel
                children:
                  - name: Value
                    source: spec.output.http.password.value
                    visibility: $exists(spec.output.http.password.value)
                  - name: Value From Secret
                    widget: ResourceRefs
                    source: spec.output.http.password.valueFrom.secretKeyRef
                    kind: Secret
                    visibility: $exists(spec.output.http.password.valueFrom.secretKeyRef.name)
              - name: TLS Settings
                widget: Panel
                children:
                  - name: Disabled
                    source: spec.output.http.tls.disabled
                    placeholder: 'false'
                  - name: Skip certificate validation
                    source: spec.output.http.tls.skipCertificateValidation
                    placeholder: 'false'
                  - name: Ca
                    widget: Panel
                    visibility: $exists(spec.output.http.tls.ca)
                    source: spec.output.http.tls.ca
                    children:
                      - name: Value
                        source: value
                        visibility: $exists(value)
                      - name: Value From Secret
                        widget: ResourceRefs
                        source: valueFrom.secretKeyRef
                        kind: Secret
                        visibility: $exists(valueFrom.secretKeyRef.name)
                  - name: Cert
                    widget: Panel
                    visibility: $exists(spec.output.http.tls.cert)
                    source: spec.output.http.tls.cert
                    children:
                      - name: Value
                        source: value
                        visibility: $exists(value)
                      - name: Value From Secret
                        widget: ResourceRefs
                        source: valueFrom.secretKeyRef
                        kind: Secret
                        visibility: $exists(valueFrom.secretKeyRef.name)
                  - name: Key
                    widget: Panel
                    visibility: $exists(spec.output.http.tls.key)
                    source: spec.output.http.tls.key
                    children:
                      - name: Value
                        source: value
                        visibility: $exists(value)
                      - name: Value From Secret
                        widget: ResourceRefs
                        source: valueFrom.secretKeyRef
                        kind: Secret
                        visibility: $exists(valueFrom.secretKeyRef.name)
              - name: Other Settings
                widget: Panel
                children:
                  - name: Compression
                    source: spec.output.http.compress
                  - name: De-dot
                    source: spec.output.http.dedot
                    placeholder: 'false'
                  - name: Format
                    source: spec.output.http.format
                    placeholder: json
                  - name: Port
                    source: spec.output.http.port
                    placeholder: '443'
                  - name: URI
                    source: spec.output.http.uri
          - name: OTLP
            widget: Panel
            visibility: $exists(spec.output.otlp)
            children:
              - name: Host
                widget: Panel
                children:
                  - name: Value
                    source: spec.output.otlp.endpoint.value
                    visibility: $exists(spec.output.otlp.endpoint.value)
                  - name: Value From Secret
                    widget: ResourceRefs
                    source: spec.output.otlp.endpoint.valueFrom.secretKeyRef
                    kind: Secret
                    visibility: $exists(spec.output.otlp.endpoint.valueFrom.secretKeyRef.name)
    
    resourceGraph:
      colorVariant: 2
      dataSources:
        - source: relatedSecrets
  form: |
    - path: spec.input
      widget: FormGroup
      defaultExpanded: true
      children:
        - var: applicationInput
          type: string
          simple: true
          defaultValue: "Enabled"
          name: Application Input
          enum: ["Disabled", "Enabled"]
          trigger: [appChange]
        - name: Application
          path: application
          widget: FormGroup
          visibility: '$applicationInput = "Enabled"'
          overwrite: false
          defaultExpanded: true
          children:
            - name: Enabled
              path: enabled
              visibility: false
              overwrite: false
              subscribe:
                appChange: '$applicationInput = "Enabled"'
            - name: Include Namespaces
              widget: SimpleList
              path: namespaces.include
              defaultExpanded: true
              inputInfo: Include container logs from selected namespaces
              children:
                - path: '[]'
            - name: Exclude Namespaces
              widget: SimpleList
              path: namespaces.exclude
              children:
                - path: '[]'
            - name: Include System Namespaces
              path: namespaces.system
            - name: Include Containers
              widget: SimpleList
              path: containers.include
            - name: Exclude Containers
              widget: SimpleList
              path: containers.exclude
            - name: Keep Annotations
              path: keepAnnotations
            - name: Drop Labels
              path: dropLabels
            - name: Keep Original Log Body
              path: keepOriginalBody
        - var: otlpInput
          type: string
          simple: true
          defaultValue: "Enabled"
          name: OTLP Input
          enum: ["Disabled", "Enabled"]
          trigger: [otlpChange]
        - name: OTLP
          path: otlp
          visibility: '$otlpInput = "Enabled"'
          overwrite: false
          defaultExpanded: true
          widget: FormGroup
          children:
            - name: Disabled
              path: disabled
              visibility: false
              overwrite: false
              subscribe:
                otlpChange: '$otlpInput = "Disabled"'
            - name: Include Namespaces
              widget: SimpleList
              path: namespaces.include
              defaultExpanded: true
              inputInfo: Include container logs from selected namespaces
              children:
                - path: '[]'
            - name: Exclude Namespaces
              widget: SimpleList
              path: namespaces.exclude
              children:
                - path: '[]'
    - name: Filters
      widget: SimpleList
      path: spec.filters
      children:
        - widget: FormGroup
          path: '[]'
          children:
            - widget: CodeEditor
              path: custom
    - path: spec.output
      widget: FormGroup
      defaultExpanded: true
      children:
        - var: outputType
          type: string
          simple: true
          defaultValue: "OTLP"
          name: Output Type
          enum: [HTTP, OTLP]
        - name: Custom
          path: custom
          widget: CodeEditor
          visibility: '$outputType = "HTTP"'
          advanced: true
          inputInfo: >-
            Note: If you use a custom output, you put the LogPipeline in unsupported
            mode
            (https://kyma-project.io/#/telemetry-manager/user/02-logs?id=unsupported-mode)
        - name: HTTP
          path: http
          widget: FormGroup
          visibility: '$outputType = "HTTP"'
          defaultExpanded: true
          children:
            - name: Host
              path: host
              widget: FormGroup
              children:
                - name: Value
                  path: value
                  widget: Text
                - name: Secret Reference
                  path: valueFrom.secretKeyRef
                  widget: ResourceRef
                  resource:
                    kind: secret
                    version: v1
                  children:
                    - path: key
                      enum: $keys($secret.data)
            - name: User
              path: user
              widget: FormGroup
              children:
                - name: Value
                  path: value
                  widget: Text
                - name: Secret Reference
                  path: valueFrom.secretKeyRef
                  widget: ResourceRef
                  resource:
                    kind: secret
                    version: v1
                  children:
                    - path: key
                      enum: $keys($secret.data)
            - name: Password
              path: password
              widget: FormGroup
              children:
                - name: Value
                  path: value
                  widget: Text
                - name: Secret Reference
                  path: valueFrom.secretKeyRef
                  widget: ResourceRef
                  resource:
                    kind: secret
                    version: v1
                  children:
                    - path: key
                      enum: $keys($secret.data)
            - name: TLS
              widget: FormGroup
              path: tls
              children:
                - name: Disabled
                  path: disabled
                - name: Skip Certificate Validation
                  path: skipCertificateValidation
                - name: CA
                  path: ca
                  widget: FormGroup
                  children:
                    - name: Value
                      path: value
                      widget: Text
                    - name: Secret Reference
                      path: valueFrom.secretKeyRef
                      widget: ResourceRef
                      resource:
                        kind: secret
                        version: v1
                      children:
                        - path: key
                          enum: $keys($secret.data)
                - name: Cert
                  path: cert
                  widget: FormGroup
                  children:
                    - name: Value
                      path: value
                      widget: Text
                    - name: Secret Reference
                      path: valueFrom.secretKeyRef
                      widget: ResourceRef
                      resource:
                        kind: secret
                        version: v1
                      children:
                        - path: key
                          enum: $keys($secret.data)
                - name: Key
                  path: key
                  widget: FormGroup
                  children:
                    - name: Value
                      path: value
                      widget: Text
                    - name: Secret Reference
                      path: valueFrom.secretKeyRef
                      widget: ResourceRef
                      resource:
                        kind: secret
                        version: v1
                      children:
                        - path: key
                          enum: $keys($secret.data)
            - name: URI
              path: uri
              widget: Text
            - name: Port
              path: port
              widget: Text
            - name: Compress
              path: compress
              widget: Text
            - name: Format
              path: format
              widget: Text
            - name: Dedot
              path: dedot
        - name: OTLP
          path: otlp
          widget: FormGroup
          visibility: '$outputType = "OTLP"'
          defaultExpanded: true
          children:
            - name: Protocol
              path: protocol
              widget: Text
            - name: Endpoint
              path: endpoint
              widget: FormGroup
              children:
                - name: Value
                  path: value
                  widget: Text
                - name: Secret Reference
                  path: valueFrom.secretKeyRef
                  widget: ResourceRef
                  resource:
                    kind: secret
                    version: v1
                  children:
                    - path: key
                      enum: $keys($secret.data)
            - name: Path
              path: path
              widget: Text
            - name: Authentication
              path: authentication
              widget: FormGroup
              children:
                - name: Basic
                  path: basic
                  widget: FormGroup
                  children:
                    - name: User
                      path: user
                      widget: FormGroup
                      children:
                        - name: Value
                          path: value
                          widget: Text
                        - name: Secret Reference
                          path: valueFrom.secretKeyRef
                          widget: ResourceRef
                          resource:
                            kind: secret
                            version: v1
                          children:
                          - path: key
                            enum: $keys($secret.data)
                    - name: Password
                      path: password
                      widget: FormGroup
                      children:
                        - name: Value
                          path: value
                          widget: Text
                        - name: Secret Reference
                          path: valueFrom.secretKeyRef
                          widget: ResourceRef
                          resource:
                            kind: secret
                            version: v1
                          children:
                            - path: key
                              enum: $keys($secret.data)
            - name: Headers
              path: headers
              widget: GenericList
              children:
                - name: Name
                  path: '[].name'
                  widget: Text
                - widget: Text
                  name: Value
                  path: '[].value'
                - widget: FormGroup
                  name: From Secret
                  path: '[].valueFrom'
                  children:
                    - name: Secret Reference
                      path: secretKeyRef
                      widget: ResourceRef
                      resource:
                        kind: secret
                        version: v1
                      children:
                        - path: key
                          enum: $keys($secret.data)
                - name: Prefix
                  path: '[].prefix'
                  widget: Text
            - name: TLS
              path: tls
              widget: FormGroup
              children:
                - name: Insecure
                  path: insecure
                - name: InsecureSkipVerify
                  path: insecureSkipVerify
                - name: CA
                  path: ca
                  widget: FormGroup
                  children:
                    - name: Value
                      path: value
                      widget: Text
                    - name: Secret Reference
                      path: valueFrom.secretKeyRef
                      widget: ResourceRef
                      resource:
                        kind: secret
                        version: v1
                      children:
                        - path: key
                          enum: $keys($secret.data)
                - name: Cert
                  path: cert
                  widget: FormGroup
                  children:
                    - name: Value
                      path: value
                      widget: Text
                    - name: Secret Reference
                      path: valueFrom.secretKeyRef
                      widget: ResourceRef
                      resource:
                        kind: secret
                        version: v1
                      children:
                        - path: key
                          enum: $keys($secret.data)
                - name: Key
                  path: key
                  widget: FormGroup
                  children:
                    - name: Value
                      path: value
                      widget: Text
                    - name: Secret Reference
                      path: valueFrom.secretKeyRef
                      widget: ResourceRef
                      resource:
                        kind: secret
                        version: v1
                      children:
                        - path: key
                          enum: $keys($secret.data)
  general: |-
    resource:
      kind: LogPipeline
      group: telemetry.kyma-project.io
      version: v1alpha1
    name: Log Pipelines
    category: Telemetry
    urlPath: logpipelines
    scope: cluster
    description: >-
      {{[LogPipeline custom resource](https://kyma-project.io/#/telemetry-manager/user/resources/02-logpipeline)}} configures a custom Log Pipeline.
  list: |-
    - source: >-
         $each(spec.output, function($v, $k) { $exists($v) ? $k })
      type: string
      name: Type
      isSelected: true
      widget: Text
    - name: Supported-Mode
      source: $not(status.unsupportedMode)
      widget: Badge
      highlights:
        positive:
          - 'true'
        critical:
          - 'false'
    - name: Status
      source: status.conditions
      widget: Columns
      children:
        - name: Type
          source: type
          widget: Badge
        - name: Status
          source: status
          widget: Badge
          highlights:
            positive:
              - 'True'
            critical:
              - 'False'
  presets: |-
    - name: Default
      default: true
      value:
        spec:
          input:
            application:
              enabled: true
              keepOriginalBody: true
          output:
            otlp:
              protocol: 'grpc'
  dataSources: |-
    relatedSecrets:
      resource:
        kind: Secret
        version: v1
      filter: |-
          $item.metadata.name =  $root.spec.output.http.user.valueFrom.secretKeyRef.name or
          $item.metadata.name = $root.spec.output.http.password.valueFrom.secretKeyRef.name or
          $item.metadata.name = $root.spec.output.http.host.valueFrom.secretKeyRef.name or
          $item.metadata.name = $root.spec.output.http.url.valueFrom.secretKeyRef.name or
          $item.metadata.name = $root.spec.output.http.tls.ca.valueFrom.secretKeyRef.name or
          $item.metadata.name = $root.spec.output.http.tls.cert.valueFrom.secretKeyRef.name or
          $item.metadata.name = $root.spec.output.http.tls.key.valueFrom.secretKeyRef.name
---
# Source: telemetry-manager/templates/busola-metricpipelines.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: telemetry-metricpipelines
  namespace: default
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/part-of: telemetry
    busola.io/extension: resource
    busola.io/extension-version: "0.5"
    kyma-project.io/module: telemetry
    
    app.kubernetes.io/managed-by: kyma
data: 
  details: |-
    header:
      - source: >-
          $each(spec.output, function($v, $k) {$v.endpoint.value or
          $v.endpoint.valueFrom.secretKeyRef.name ? $k})
        placeholder: custom
        type: string
        name: Type
        isSelected: true
        widget: Text
    status:
      body:
        - name: Condition details
          widget: ConditionList
          source: status.conditions
          highlights:
            - type: GatewayHealthy
              positive:
                - 'True'
              critical:
                - 'False'
              warning:
                - 'Unknown'
            - type: AgentHealthy
              positive:
                - 'True'
              critical:
                - 'False'
              warning:
                - 'Unknown'
            - type: ConfigurationGenerated
              positive:
                - 'True'
              critical:
                - 'False'
              warning:
                - 'Unknown'
            - type: TelemetryFlowHealthy
              positive:
                - 'True'
              critical:
                - 'False'
              warning:
                - 'Unknown'
          customContent:
            - value:
                widget: Badge
                source: $filter(status.conditions, function($c){$c.type = 'GatewayHealthy'}).reason
              header: Reason
              type: GatewayHealthy
            - value: $readableTimestamp($filter(status.conditions, function($c){$c.type = 'GatewayHealthy'}).lastTransitionTime)
              header: Last transition time
              type: GatewayHealthy
            - value:
                widget: Badge
                source: $filter(status.conditions, function($c){$c.type = 'AgentHealthy'}).reason
              header: Reason
              type: AgentHealthy
            - value: $readableTimestamp($filter(status.conditions, function($c){$c.type = 'AgentHealthy'}).lastTransitionTime)
              header: Last transition time
              type: AgentHealthy
            - value:
                widget: Badge
                source: $filter(status.conditions, function($c){$c.type = 'ConfigurationGenerated'}).reason
              header: Reason
              type: ConfigurationGenerated
            - value: $readableTimestamp($filter(status.conditions, function($c){$c.type = 'ConfigurationGenerated'}).lastTransitionTime)
              header: Last transition time
              type: ConfigurationGenerated
            - value:
                widget: Badge
                source: $filter(status.conditions, function($c){$c.type = 'TelemetryFlowHealthy'}).reason
              header: Reason
              type: TelemetryFlowHealthy
            - value: $readableTimestamp($filter(status.conditions, function($c){$c.type = 'TelemetryFlowHealthy'}).lastTransitionTime)
              header: Last transition time
              type: TelemetryFlowHealthy
    body:
      - widget: Panel
        name: Input
        children:
          - name: Prometheus
            widget: Panel
            visibility: $exists(spec.input.prometheus)
            children:
              - name: Enabled
                visibility: $exists(spec.input.prometheus.enabled)
                source: spec.input.prometheus.enabled
              - name: Include Namespaces
                widget: JoinedArray
                visibility: $exists(spec.input.prometheus.namespaces.include)
                source: spec.input.prometheus.namespaces.include
                separator: ', '
              - name: Exclude Namespaces
                widget: JoinedArray
                visibility: $exists(spec.input.prometheus.namespaces.exclude)
                source: spec.input.prometheus.namespaces.exclude
                separator: ', '
              - name: Diagnostic Metrics
                visibility: $exists(spec.input.prometheus.diagnosticMetrics.enabled)
                source: spec.input.prometheus.diagnosticMetrics.enabled
          - name: Istio
            widget: Panel
            visibility: $exists(spec.input.istio)
            children:
              - name: Enabled
                visibility: $exists(spec.input.istio.enabled)
                source: spec.input.istio.enabled
              - name: Include Namespaces
                widget: JoinedArray
                visibility: $exists(spec.input.istio.namespaces.include)
                source: spec.input.istio.namespaces.include
                separator: ', '
              - name: Exclude Namespaces
                widget: JoinedArray
                visibility: $exists(spec.input.istio.namespaces.exclude)
                source: spec.input.istio.namespaces.exclude
                separator: ', '
              - name: Diagnostic Metrics
                visibility: $exists(spec.input.istio.diagnosticMetrics.enabled)
                source: spec.input.istio.diagnosticMetrics.enabled
              - name: Envoy Metrics
                visibility: $exists(spec.input.istio.envoyMetrics.enabled)
                source: spec.input.istio.envoyMetrics.enabled
          - name: Runtime
            widget: Panel
            visibility: $exists(spec.input.runtime)
            children:
              - name: Enabled
                visibility: $exists(spec.input.runtime.enabled)
                source: spec.input.runtime.enabled
              - name: Include Namespaces
                widget: JoinedArray
                visibility: $exists(spec.input.runtime.namespaces.include)
                source: spec.input.runtime.namespaces.include
                separator: ', '
              - name: Exclude Namespaces
                widget: JoinedArray
                visibility: $exists(spec.input.runtime.namespaces.exclude)
                source: spec.input.runtime.namespaces.exclude
                separator: ', '
              - name: Resources
                widget: Panel
                visibility: $exists(spec.input.runtime.resources)
                children:
                  - name: Pod
                    visibility: $exists(spec.input.runtime.resources.pod)
                    source: spec.input.runtime.resources.pod.enabled
                  - name: Container
                    visibility: $exists(spec.input.runtime.resources.container)
                    source: spec.input.runtime.resources.container.enabled
                  - name: Node
                    visibility: $exists(spec.input.runtime.resources.node)
                    source: spec.input.runtime.resources.node.enabled
                  - name: Volume
                    visibility: $exists(spec.input.runtime.resources.volume)
                    source: spec.input.runtime.resources.volume.enabled
                  - name: DaemonSet
                    visibility: $exists(spec.input.runtime.resources.daemonset)
                    source: spec.input.runtime.resources.daemonset.enabled
                  - name: Deployment
                    visibility: $exists(spec.input.runtime.resources.deployment)
                    source: spec.input.runtime.resources.deployment.enabled
                  - name: StatefulSet
                    visibility: $exists(spec.input.runtime.resources.statefulset)
                    source: spec.input.runtime.resources.statefulset.enabled
                  - name: Job
                    visibility: $exists(spec.input.runtime.resources.job)
                    source: spec.input.runtime.resources.job.enabled
          - name: OTLP
            widget: Panel
            visibility: $exists(spec.input.otlp)
            children:
              - name: Disabled
                visibility: $exists(spec.input.otlp.disabled)
                source: spec.input.otlp.disabled
              - name: Include Namespaces
                widget: JoinedArray
                visibility: $exists(spec.input.otlp.namespaces.include)
                source: spec.input.otlp.namespaces.include
                separator: ', '
              - name: Exclude Namespaces
                widget: JoinedArray
                visibility: $exists(spec.input.otlp.namespaces.exclude)
                source: spec.input.otlp.namespaces.exclude
                separator: ', '
      - widget: Panel
        name: Output
        children:
          - name: OTLP
            widget: Panel
            visibility: $exists(spec.output.otlp)
            children:
              - name: Endpoint
                widget: Panel
                visibility: $exists(spec.output.otlp.endpoint)
                children:
                  - name: Value
                    source: spec.output.otlp.endpoint.value
                    visibility: $exists(spec.output.otlp.endpoint.value)
                  - name: Value From Secret
                    widget: ResourceRefs
                    source: spec.output.otlp.endpoint.valueFrom.secretKeyRef
                    kind: Secret
                    visibility: $exists(spec.output.otlp.endpoint.valueFrom.secretKeyRef.name)
              - name: Authentication
                widget: Panel
                visibility: $exists(spec.output.otlp.authentication)
                children:
                  - name: User
                    widget: Panel
                    visibility: $exists(spec.output.otlp.authentication.basic.user)
                    children:
                      - name: Value
                        source: spec.output.otlp.authentication.basic.user.value
                        visibility: $exists(spec.output.otlp.authentication.basic.user.value)
                      - name: Value From Secret
                        widget: ResourceRefs
                        source: >-
                          spec.output.otlp.authentication.basic.user.valueFrom.secretKeyRef
                        kind: Secret
                        visibility: >-
                          $exists(spec.output.otlp.authentication.basic.user.valueFrom.secretKeyRef.name)
                  - name: Password
                    widget: Panel
                    visibility: $exists(spec.output.otlp.authentication.basic.password)
                    children:
                      - name: Value
                        source: spec.output.otlp.authentication.basic.password.value
                        visibility: >-
                          $exists(spec.output.otlp.authentication.basic.password.value)
                      - name: Value From Secret
                        widget: ResourceRefs
                        source: >-
                          spec.output.otlp.authentication.basic.password.valueFrom.secretKeyRef
                        kind: Secret
                        visibility: >-
                          $exists(spec.output.otlp.authentication.basic.password.valueFrom.secretKeyRef.name)
              - name: Headers
                widget: Panel
                visibility: $exists(spec.output.otlp.headers)
                children:
                  - name: Header
                    widget: Panel
                    visibility: $exists(spec.output.otlp.headers[].name)
                    source: spec.output.otlp.headers[]
                    children:
                      - name: Name
                        source: name
                        visibility: $exists(name)
                      - name: Prefix
                        source: prefix
                        visibility: $exists(prefix)
                      - name: Value
                        source: value
                        visibility: $exists(value)
                      - name: Value From Secret
                        widget: ResourceRefs
                        source: valueFrom.secretKeyRef
                        kind: Secret
                        visibility: $exists(valueFrom.secretKeyRef.name)
              - name: TLS
                widget: Panel
                visibility: $exists(spec.output.otlp.tls)
                children:
                  - name: Insecure
                    visibility: $exists(spec.output.otlp.tls.insecure)
                    source: spec.output.otlp.tls.insecure
                  - name: Skip Cert Verification
                    visibility: $exists(spec.output.otlp.tls.insecureSkipVerify)
                    source: spec.output.otlp.tls.insecureSkipVerify
                  - name: Ca
                    widget: Panel
                    visibility: $exists(spec.output.otlp.tls.ca)
                    source: spec.output.otlp.tls.ca
                    children:
                      - name: Value
                        source: value
                        visibility: $exists(value)
                      - name: Value From Secret
                        widget: ResourceRefs
                        source: valueFrom.secretKeyRef
                        kind: Secret
                        visibility: $exists(valueFrom.secretKeyRef.name)
                  - name: Cert
                    widget: Panel
                    visibility: $exists(spec.output.otlp.tls.cert)
                    source: spec.output.otlp.tls.cert
                    children:
                      - name: Value
                        source: value
                        visibility: $exists(value)
                      - name: Value From Secret
                        widget: ResourceRefs
                        source: valueFrom.secretKeyRef
                        kind: Secret
                        visibility: $exists(valueFrom.secretKeyRef.name)
                  - name: Key
                    widget: Panel
                    visibility: $exists(spec.output.otlp.tls.key)
                    source: spec.output.otlp.tls.key
                    children:
                      - name: Value
                        source: value
                        visibility: $exists(value)
                      - name: Value From Secret
                        widget: ResourceRefs
                        source: valueFrom.secretKeyRef
                        kind: Secret
                        visibility: $exists(valueFrom.secretKeyRef.name)
              - widget: Panel
                name: Other Settings
                children:
                  - name: Protocol
                    source: spec.output.otlp.protocol
    resourceGraph:
      colorVariant: 2
      dataSources:
        - source: relatedSecrets
  form: |
    - path: spec.input
      widget: FormGroup
      defaultExpanded: true
      simple: true
      children:
        - name: Prometheus
          path: prometheus
          widget: FormGroup
          simple: true
          children:
            - name: Enabled
              path: enabled
              simple: true
            - name: Include Namespaces
              widget: SimpleList
              path: namespaces.include
              defaultExpanded: true
              children:
                - path: '[]'
            - name: Exclude Namespaces
              widget: SimpleList
              path: namespaces.exclude
              defaultExpanded: true
              children:
                - path: '[]'
            - name: Enable Diagnostic Metrics
              path: diagnosticMetrics.enabled
              simple: true
        - name: Istio
          path: istio
          widget: FormGroup
          simple: true
          children:
            - name: Enabled
              path: enabled
              simple: true
            - name: Include Namespaces
              widget: SimpleList
              path: namespaces.include
              defaultExpanded: true
              children:
                - path: '[]'
            - name: Exclude Namespaces
              widget: SimpleList
              path: namespaces.exclude
              defaultExpanded: true
              children:
                - path: '[]'
            - name: Enable Diagnostic Metrics
              path: diagnosticMetrics.enabled
              simple: true
            - name: Enable Envoy Metrics
              path: envoyMetrics.enabled
              simple: true
        - name: Runtime
          path: runtime
          widget: FormGroup
          simple: true
          children:
            - name: Enabled
              path: enabled
              simple: true
            - name: Include Namespaces
              widget: SimpleList
              path: namespaces.include
              defaultExpanded: true
              children:
                - path: '[]'
            - name: Exclude Namespaces
              widget: SimpleList
              path: namespaces.exclude
              defaultExpanded: true
              children:
                - path: '[]'
            - name: Resources
              path: resources
              widget: FormGroup
              simple: true
              children:
              - name: Enable Pod Metrics
                path: pod.enabled
                simple: true
              - name: Enable Container Metrics
                path: container.enabled
                simple: true
              - name: Enable Node Metrics
                path: node.enabled
                simple: true
              - name: Enable Volume Metrics
                path: volume.enabled
                simple: true
              - name: Enable DaemonSet Metrics
                path: daemonset.enabled
                simple: true
              - name: Enable Deployment Metrics
                path: deployment.enabled
                simple: true
              - name: Enable StatefulSet Metrics
                path: statefulset.enabled
                simple: true
              - name: Enable Job Metrics
                path: job.enabled
                simple: true
        - name: OTLP
          path: otlp
          widget: FormGroup
          simple: true
          children:
            - name: Disabled
              path: disabled
              simple: true
            - name: Include Namespaces
              widget: SimpleList
              path: namespaces.include
              defaultExpanded: true
              children:
                - path: '[]'
            - name: Exclude Namespaces
              widget: SimpleList
              path: namespaces.exclude
              defaultExpanded: true
              children:
                - path: '[]'
    - path: spec.output
      widget: FormGroup
      defaultExpanded: true
      simple: true
      children:
        - name: OTLP
          path: otlp
          widget: FormGroup
          defaultExpanded: true
          simple: true
          children:
            - name: Endpoint
              path: endpoint
              widget: FormGroup
              simple: true
              children:
                - name: Value
                  path: value
                  widget: Text
                  simple: true
                - name: Secret Reference
                  path: valueFrom.secretKeyRef
                  widget: ResourceRef
                  simple: true
                  resource:
                    kind: secret
                    version: v1
                  children:
                    - simple: true
                      path: key
                      enum: $keys($secret.data)
            - name: Protocol
              path: protocol
              simple: true
              widget: FormGroup
              children:
                - name: Value
                  widget: Text
            - name: Authentication
              path: authentication
              widget: FormGroup
              simple: true
              children:
                - name: User
                  path: basic.user
                  widget: FormGroup
                  simple: true
                  children:
                    - name: Value
                      path: value
                      widget: Text
                      simple: true
                    - name: Secret Reference
                      path: valueFrom.secretKeyRef
                      widget: ResourceRef
                      resource:
                        kind: secret
                        version: v1
                      simple: true
                      children:
                        - simple: true
                          path: key
                          enum: $keys($secret.data)
                - name: Password
                  path: basic.password
                  widget: FormGroup
                  simple: true
                  children:
                    - name: Value
                      path: value
                      widget: Text
                      simple: true
                    - name: Secret Reference
                      path: valueFrom.secretKeyRef
                      widget: ResourceRef
                      resource:
                        kind: secret
                        version: v1
                      simple: true
                      children:
                        - simple: true
                          path: key
                          enum: $keys($secret.data)
            - name: Headers
              path: headers[]
              widget: FormGroup
              simple: true
              children:
                - name: Name
                  path: name
                  widget: Text
                  simple: true
                - name: Prefix
                  path: prefix
                  widget: Text
                  simple: true
                - name: Value
                  path: value
                  widget: Text
                  simple: true
                - name: Secret Reference
                  path: valueFrom.secretKeyRef
                  widget: ResourceRef
                  simple: true
                  resource:
                    kind: secret
                    version: v1
                  children:
                    - simple: true
                      path: key
                      enum: $keys($secret.data)
            - name: TLS
              widget: FormGroup
              path: tls
              children:
                - name: Insecure
                  path: insecure
                - name: Skip Certificate Validation
                  path: insecureSkipVerify
                - name: CA
                  path: ca
                  widget: FormGroup
                  simple: true
                  children:
                    - name: Value
                      path: value
                      widget: Text
                      simple: true
                    - name: Secret Reference
                      path: valueFrom.secretKeyRef
                      widget: ResourceRef
                      simple: true
                      resource:
                        kind: secret
                        version: v1
                      children:
                        - simple: true
                          path: key
                          enum: $keys($secret.data)
                - name: Cert
                  path: cert
                  widget: FormGroup
                  simple: true
                  children:
                    - name: Value
                      path: value
                      widget: Text
                      simple: true
                    - name: Secret Reference
                      path: valueFrom.secretKeyRef
                      widget: ResourceRef
                      simple: true
                      resource:
                        kind: secret
                        version: v1
                      children:
                        - simple: true
                          path: key
                          enum: $keys($secret.data)
                - name: Key
                  path: key
                  widget: FormGroup
                  simple: true
                  children:
                    - name: Value
                      path: value
                      widget: Text
                      simple: true
                    - name: Secret Reference
                      path: valueFrom.secretKeyRef
                      widget: ResourceRef
                      simple: true
                      resource:
                        kind: secret
                        version: v1
                      children:
                        - simple: true
                          path: key
                          enum: $keys($secret.data)
  general: |-
    resource:
      kind: MetricPipeline
      group: telemetry.kyma-project.io
      version: v1alpha1
    name: Metric Pipelines
    category: Telemetry
    urlPath: metricpipelines
    scope: cluster
    description: >-
      {{[MetricPipeline custom resource](https://kyma-project.io/#/telemetry-manager/user/resources/05-metricpipeline)}} configures a custom Metric Pipeline.
  list: |-
    - source: >-
        $each(spec.output, function($v, $k) {$v.endpoint.value or
        $v.endpoint.valueFrom.secretKeyRef.name ? $k})
      placeholder: custom
      type: string
      name: Type
      isSelected: true
      widget: Text
    - name: Status
      source: status.conditions
      widget: Columns
      children:
        - name: Type
          source: type
          widget: Badge
        - name: Status
          source: status
          widget: Badge
          highlights:
            positive:
              - 'True'
            critical:
              - 'False'
  presets: |-
    - name: Default
      default: true
      value:
        spec:
          output:
            otlp:
              protocol: 'grpc'
  dataSources: |-
    relatedSecrets:
      resource:
        kind: Secret
        version: v1
      filter: |-
          $item.metadata.name =  $root.spec.output.otlp.authentication.basic.user.valueFrom.secretKeyRef.name or
          $item.metadata.name =  $root.spec.output.otlp.authentication.basic.password.valueFrom.secretKeyRef.name or
          $item.metadata.name = $root.spec.output.otlp.endpoint.valueFrom.secretKeyRef.name or
          $item.metadata.name = $root.spec.output.otlp.headers.valueFrom.secretKeyRef.name or
          $item.metadata.name = $root.spec.output.otlp.tls.ca.valueFrom.secretKeyRef.name or
          $item.metadata.name = $root.spec.output.otlp.tls.cert.valueFrom.secretKeyRef.name or
          $item.metadata.name = $root.spec.output.otlp.tls.key.valueFrom.secretKeyRef.name
---
# Source: telemetry-manager/templates/busola-telemetry.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: telemetry-module
  namespace: default
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/part-of: telemetry
    busola.io/extension: resource
    busola.io/extension-version: "0.5"
    kyma-project.io/module: telemetry
    
    app.kubernetes.io/managed-by: kyma
data: 
  dataSources: |-
    logPipelines:
      resource:
        group: telemetry.kyma-project.io
        version: v1alpha1
        kind: LogPipeline
    metricPipelines:
      resource:
        group: telemetry.kyma-project.io
        version: v1alpha1
        kind: MetricPipeline
    tracePipelines:
      resource:
        group: telemetry.kyma-project.io
        version: v1alpha1
        kind: TracePipeline
  details: |-
    header:
      - name: State
        source: status.state
        widget: Badge
    status:
      body:
        - name: OTLP Endpoints
          widget: Panel
          source: status.endpoints
          fullWidth: true
          children:
            - name: Traces GRPC
              source: traces.grpc
            - name: Traces HTTP
              source: traces.http
            - name: Metrics GRPC
              source: metrics.grpc
            - name: Metrics HTTP
              source: metrics.http
        - name: Condition details
          widget: ConditionList
          source: status.conditions
          highlights:
            - type: LogComponentsHealthy
              positive:
                - 'True'
              critical:
                - 'False'
              warning:
                - 'Unknown'
            - type: MetricComponentsHealthy
              positive:
                - 'True'
              critical:
                - 'False'
              warning:
                - 'Unknown'
            - type: TraceComponentsHealthy
              positive:
                - 'True'
              critical:
                - 'False'
              warning:
                - 'Unknown'
          customContent:
            - value:
                widget: Badge
                source: $filter(status.conditions, function($c){$c.type = 'LogComponentsHealthy'}).reason
              header: Reason
              type: LogComponentsHealthy
            - value: $readableTimestamp($filter(status.conditions, function($c){$c.type = 'LogComponentsHealthy'}).lastTransitionTime)
              header: Last transition time
              type: LogComponentsHealthy
            - value:
                widget: Badge
                source: $filter(status.conditions, function($c){$c.type = 'MetricComponentsHealthy'}).reason
              header: Reason
              type: MetricComponentsHealthy
            - value: $readableTimestamp($filter(status.conditions, function($c){$c.type = 'MetricComponentsHealthy'}).lastTransitionTime)
              header: Last transition time
              type: MetricComponentsHealthy
            - value:
                widget: Badge
                source: $filter(status.conditions, function($c){$c.type = 'TraceComponentsHealthy'}).reason
              header: Reason
              type: TraceComponentsHealthy
            - value: $readableTimestamp($filter(status.conditions, function($c){$c.type = 'TraceComponentsHealthy'}).lastTransitionTime)
              header: Last transition time
              type: TraceComponentsHealthy
    body:
      - name: Logs
        widget: Panel
        visibility: $exists(spec.log.gateway.scaling.static.replicas)
        children:
        - name: Gateway Replicas
          source: spec.log.gateway.scaling.static.replicas
        - name: Scaling Type
          source: spec.log.gateway.scaling.type
      - name: Traces
        widget: Panel
        visibility: $exists(spec.trace.gateway.scaling.static.replicas)
        children:
        - name: Gateway Replicas
          source: spec.trace.gateway.scaling.static.replicas
        - name: Scaling Type
          source: spec.trace.gateway.scaling.type
      - name: Metrics
        widget: Panel
        visibility: $exists(spec.metric.gateway.scaling.static.replicas)
        children:
        - name: Gateway Replicas
          source: spec.metric.gateway.scaling.static.replicas
        - name: Scaling Type
          source: spec.metric.gateway.scaling.type
    resourceGraph:
      colorVariant: 2
      dataSources:
        - source: logPipelines
        - source: metricPipelines
        - source: tracePipelines
  form: |
    - advanced: true
      defaultExpanded: false
      readOnly: false
      decodable: false
      path: spec.log
      name: Logs
      widget: FormGroup
      children:
        - advanced: true
          defaultExpanded: false
          readOnly: false
          decodable: false
          path: gateway
          name: Gateway
          widget: FormGroup
          children:
            - advanced: true
              defaultExpanded: false
              readOnly: false
              decodable: false
              path: scaling
              name: Scaling
              widget: FormGroup
              children:
                - path: type
                  override: false
                  enum:
                    - None
                - advanced: true
                  defaultExpanded: false
                  readOnly: false
                  decodable: false
                  visibility: "$item.spec.log.gateway.scaling.type = 'Static'"
                  path: static
                  name: Static
                  widget: FormGroup
                  children:
                    - advanced: true
                      defaultExpanded: false
                      readOnly: false
                      decodable: false
                      path: replicas
                      name: Replicas
                      simple: false
                      widget: Number
    - advanced: true
      defaultExpanded: false
      readOnly: false
      decodable: false
      path: spec.trace
      name: Traces
      widget: FormGroup
      children:
        - advanced: true
          defaultExpanded: false
          readOnly: false
          decodable: false
          path: gateway
          name: Gateway
          widget: FormGroup
          children:
            - advanced: true
              defaultExpanded: false
              readOnly: false
              decodable: false
              path: scaling
              name: Scaling
              widget: FormGroup
              children:
                - path: type
                  override: false
                  enum:
                    - None
                - advanced: true
                  defaultExpanded: false
                  readOnly: false
                  decodable: false
                  visibility: "$item.spec.trace.gateway.scaling.type = 'Static'"
                  path: static
                  name: Static
                  widget: FormGroup
                  children:
                    - advanced: true
                      defaultExpanded: false
                      readOnly: false
                      decodable: false
                      path: replicas
                      name: Replicas
                      simple: false
                      widget: Number
    - advanced: true
      defaultExpanded: false
      readOnly: false
      decodable: false
      path: spec.metric
      name: Metrics
      widget: FormGroup
      children:
        - advanced: true
          defaultExpanded: false
          readOnly: false
          decodable: false
          path: gateway
          name: Gateway
          widget: FormGroup
          children:
            - advanced: true
              defaultExpanded: false
              readOnly: false
              decodable: false
              path: scaling
              name: Scaling
              widget: FormGroup
              children:
                - path: type
                  override: false
                  enum:
                    - None
                - advanced: true
                  defaultExpanded: false
                  readOnly: false
                  decodable: false
                  visibility: "$item.spec.metric.gateway.scaling.type = 'Static'"
                  path: static
                  name: Static
                  widget: FormGroup
                  children:
                    - advanced: true
                      defaultExpanded: false
                      readOnly: false
                      decodable: false
                      path: replicas
                      name: Replicas
                      simple: false
                      widget: Number
    - path: spec.enrichments
      name: Enrichments
      widget: FormGroup
      children:
        - name: Pod Labels
          widget: GenericList
          path: extractPodLabels
          children:
            - name: Key
              widget: Text
              path: '[].key'
            - name: Key Prefix
              widget: Text
              path: '[].keyPrefix'
  
  general: |
    resource:
      kind: Telemetry
      group: operator.kyma-project.io
      version: v1alpha1
    name: Telemetry
    category: Kyma
    urlPath: telemetries
    scope: namespace
    description: >-
      {{[Telemetry custom resource](https://kyma-project.io/#/telemetry-manager/user/resources/01-telemetry)}} configures the Telemetry module.
    features:
      actions:
        disableCreate: true
        disableDelete: true
  list: |
    - name: State
      source: status.state
      widget: Badge
---
# Source: telemetry-manager/templates/busola-tracepipelines.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: telemetry-tracepipelines
  namespace: default
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/part-of: telemetry
    busola.io/extension: resource
    busola.io/extension-version: "0.5"
    kyma-project.io/module: telemetry
    
    app.kubernetes.io/managed-by: kyma
data: 
  details: |-
    header:
      - source: >-
          $each(spec.output, function($v, $k) {$v.endpoint.value or
          $v.endpoint.valueFrom.secretKeyRef.name ? $k})
        placeholder: custom
        type: string
        name: Type
        isSelected: true
        widget: Text
    status:
      body:
        - name: Condition details
          widget: ConditionList
          source: status.conditions
          highlights:
            - type: GatewayHealthy
              positive:
                - 'True'
              critical:
                - 'False'
              warning:
                - 'Unknown'
            - type: ConfigurationGenerated
              positive:
                - 'True'
              critical:
                - 'False'
              warning:
                - 'Unknown'
            - type: TelemetryFlowHealthy
              positive:
                - 'True'
              critical:
                - 'False'
              warning:
                - 'Unknown'
          customContent:
            - value:
                widget: Badge
                source: $filter(status.conditions, function($c){$c.type = 'GatewayHealthy'}).reason
              header: Reason
              type: GatewayHealthy
            - value: $readableTimestamp($filter(status.conditions, function($c){$c.type = 'GatewayHealthy'}).lastTransitionTime)
              header: Last transition time
              type: GatewayHealthy
            - value:
                widget: Badge
                source: $filter(status.conditions, function($c){$c.type = 'ConfigurationGenerated'}).reason
              header: Reason
              type: ConfigurationGenerated
            - value: $readableTimestamp($filter(status.conditions, function($c){$c.type = 'ConfigurationGenerated'}).lastTransitionTime)
              header: Last transition time
              type: ConfigurationGenerated
            - value:
                widget: Badge
                source: $filter(status.conditions, function($c){$c.type = 'TelemetryFlowHealthy'}).reason
              header: Reason
              type: TelemetryFlowHealthy
            - value: $readableTimestamp($filter(status.conditions, function($c){$c.type = 'TelemetryFlowHealthy'}).lastTransitionTime)
              header: Last transition time
              type: TelemetryFlowHealthy
    body:
      - widget: Panel
        name: Output
        children:
          - name: OTLP
            widget: Panel
            visibility: $exists(spec.output.otlp)
            children:
              - name: Endpoint
                widget: Panel
                visibility: $exists(spec.output.otlp.endpoint)
                children:
                  - name: Value
                    source: spec.output.otlp.endpoint.value
                    visibility: $exists(spec.output.otlp.endpoint.value)
                  - name: Value From Secret
                    widget: ResourceRefs
                    source: spec.output.otlp.endpoint.valueFrom.secretKeyRef
                    kind: Secret
                    visibility: $exists(spec.output.otlp.endpoint.valueFrom.secretKeyRef.name)
              - name: Authentication
                widget: Panel
                visibility: $exists(spec.output.otlp.authentication)
                children:
                  - name: User
                    widget: Panel
                    visibility: $exists(spec.output.otlp.authentication.basic.user)
                    children:
                      - name: Value
                        source: spec.output.otlp.authentication.basic.user.value
                        visibility: $exists(spec.output.otlp.authentication.basic.user.value)
                      - name: Value From Secret
                        widget: ResourceRefs
                        source: >-
                          spec.output.otlp.authentication.basic.user.valueFrom.secretKeyRef
                        kind: Secret
                        visibility: >-
                          $exists(spec.output.otlp.authentication.basic.user.valueFrom.secretKeyRef.name)
                  - name: Password
                    widget: Panel
                    visibility: $exists(spec.output.otlp.authentication.basic.password)
                    children:
                      - name: Value
                        source: spec.output.otlp.authentication.basic.password.value
                        visibility: >-
                          $exists(spec.output.otlp.authentication.basic.password.value)
                      - name: Value From Secret
                        widget: ResourceRefs
                        source: >-
                          spec.output.otlp.authentication.basic.password.valueFrom.secretKeyRef
                        kind: Secret
                        visibility: >-
                          $exists(spec.output.otlp.authentication.basic.password.valueFrom.secretKeyRef.name)
              - name: Headers
                widget: Panel
                visibility: $exists(spec.output.otlp.headers)
                children:
                  - name: Header
                    widget: Panel
                    visibility: $exists(spec.output.otlp.headers[].name)
                    source: spec.output.otlp.headers[]
                    children:
                      - name: Name
                        source: name
                        visibility: $exists(name)
                      - name: Prefix
                        source: prefix
                        visibility: $exists(prefix)
                      - name: Value
                        source: value
                        visibility: $exists(value)
                      - name: Value From Secret
                        widget: ResourceRefs
                        source: valueFrom.secretKeyRef
                        kind: Secret
                        visibility: $exists(valueFrom.secretKeyRef.name)
              - name: TLS
                widget: Panel
                visibility: $exists(spec.output.otlp.tls)
                children:
                  - name: Insecure
                    visibility: $exists(spec.output.otlp.tls.insecure)
                    source: spec.output.otlp.tls.insecure
                  - name: Skip Cert Verification
                    visibility: $exists(spec.output.otlp.tls.insecureSkipVerify)
                    source: spec.output.otlp.tls.insecureSkipVerify
                  - name: Ca
                    widget: Panel
                    visibility: $exists(spec.output.otlp.tls.ca)
                    source: spec.output.otlp.tls.ca
                    children:
                      - name: Value
                        source: value
                        visibility: $exists(value)
                      - name: Value From Secret
                        widget: ResourceRefs
                        source: valueFrom.secretKeyRef
                        kind: Secret
                        visibility: $exists(valueFrom.secretKeyRef.name)
                  - name: Cert
                    widget: Panel
                    visibility: $exists(spec.output.otlp.tls.cert)
                    source: spec.output.otlp.tls.cert
                    children:
                      - name: Value
                        source: value
                        visibility: $exists(value)
                      - name: Value From Secret
                        widget: ResourceRefs
                        source: valueFrom.secretKeyRef
                        kind: Secret
                        visibility: $exists(valueFrom.secretKeyRef.name)
                  - name: Key
                    widget: Panel
                    visibility: $exists(spec.output.otlp.tls.key)
                    source: spec.output.otlp.tls.key
                    children:
                      - name: Value
                        source: value
                        visibility: $exists(value)
                      - name: Value From Secret
                        widget: ResourceRefs
                        source: valueFrom.secretKeyRef
                        kind: Secret
                        visibility: $exists(valueFrom.secretKeyRef.name)
              - widget: Panel
                name: Other Settings
                children:
                  - name: Protocol
                    source: spec.output.otlp.protocol
    resourceGraph:
      colorVariant: 2
      dataSources:
        - source: relatedSecrets
  form: |
    - path: spec.output
      widget: FormGroup
      defaultExpanded: true
      simple: true
      children:
        - name: OTLP
          path: otlp
          widget: FormGroup
          defaultExpanded: true
          simple: true
          children:
            - name: Endpoint
              path: endpoint
              widget: FormGroup
              simple: true
              children:
                - name: Value
                  path: value
                  widget: Text
                  simple: true
                - name: Secret Reference
                  path: valueFrom.secretKeyRef
                  widget: ResourceRef
                  simple: true
                  resource:
                    kind: secret
                    version: v1
                  children:
                    - simple: true
                      path: key
                      enum: $keys($secret.data)
            - name: Protocol
              path: protocol
              simple: true
              widget: FormGroup
              children:
                - name: Value
                  widget: Text
            - name: Authentication
              path: authentication
              widget: FormGroup
              simple: true
              children:
                - name: User
                  path: basic.user
                  widget: FormGroup
                  simple: true
                  children:
                    - name: Value
                      path: value
                      widget: Text
                      simple: true
                    - name: Secret Reference
                      path: valueFrom.secretKeyRef
                      widget: ResourceRef
                      resource:
                        kind: secret
                        version: v1
                      simple: true
                      children:
                        - simple: true
                          path: key
                          enum: $keys($secret.data)
                - name: Password
                  path: basic.password
                  widget: FormGroup
                  simple: true
                  children:
                    - name: Value
                      path: value
                      widget: Text
                      simple: true
                    - name: Secret Reference
                      path: valueFrom.secretKeyRef
                      widget: ResourceRef
                      resource:
                        kind: secret
                        version: v1
                      simple: true
                      children:
                        - simple: true
                          path: key
                          enum: $keys($secret.data)
            - name: Headers
              path: headers[]
              widget: FormGroup
              simple: true
              children:
                - name: Name
                  path: name
                  widget: Text
                  simple: true
                - name: Prefix
                  path: prefix
                  widget: Text
                  simple: true
                - name: Value
                  path: value
                  widget: Text
                  simple: true
                - name: Secret Reference
                  path: valueFrom.secretKeyRef
                  widget: ResourceRef
                  simple: true
                  resource:
                    kind: secret
                    version: v1
                  children:
                    - simple: true
                      path: key
                      enum: $keys($secret.data)
            - name: TLS
              widget: FormGroup
              path: tls
              children:
                - name: Insecure
                  path: insecure
                - name: Skip Certificate Validation
                  path: insecureSkipVerify
                - name: CA
                  path: ca
                  widget: FormGroup
                  simple: true
                  children:
                    - name: Value
                      path: value
                      widget: Text
                      simple: true
                    - name: Secret Reference
                      path: valueFrom.secretKeyRef
                      widget: ResourceRef
                      simple: true
                      resource:
                        kind: secret
                        version: v1
                      children:
                        - simple: true
                          path: key
                          enum: $keys($secret.data)
                - name: Cert
                  path: cert
                  widget: FormGroup
                  simple: true
                  children:
                    - name: Value
                      path: value
                      widget: Text
                      simple: true
                    - name: Secret Reference
                      path: valueFrom.secretKeyRef
                      widget: ResourceRef
                      simple: true
                      resource:
                        kind: secret
                        version: v1
                      children:
                        - simple: true
                          path: key
                          enum: $keys($secret.data)
                - name: Key
                  path: key
                  widget: FormGroup
                  simple: true
                  children:
                    - name: Value
                      path: value
                      widget: Text
                      simple: true
                    - name: Secret Reference
                      path: valueFrom.secretKeyRef
                      widget: ResourceRef
                      simple: true
                      resource:
                        kind: secret
                        version: v1
                      children:
                        - simple: true
                          path: key
                          enum: $keys($secret.data)
  general: |-
    resource:
      kind: TracePipeline
      group: telemetry.kyma-project.io
      version: v1alpha1
    name: Trace Pipelines
    category: Telemetry
    urlPath: tracepipelines
    scope: cluster
    description: >-
      {{[TracePipeline custom resource](https://kyma-project.io/#/telemetry-manager/user/resources/04-tracepipeline)}} configures a custom Trace Pipeline.
  list: |-
    - source: >-
        $each(spec.output, function($v, $k) {$v.endpoint.value or
        $v.endpoint.valueFrom.secretKeyRef.name ? $k})
      placeholder: custom
      type: string
      name: Type
      isSelected: true
      widget: Text
    - name: Status
      source: status.conditions
      widget: Columns
      children:
        - name: Type
          source: type
          widget: Badge
        - name: Status
          source: status
          widget: Badge
          highlights:
            positive:
              - 'True'
            critical:
              - 'False'
  presets: |-
    - name: Default
      default: true
      value:
        spec:
          output:
            otlp:
              protocol: 'grpc'
  dataSources: |-
    relatedSecrets:
      resource:
        kind: Secret
        version: v1
      filter: |-
          $item.metadata.name =  $root.spec.output.otlp.authentication.basic.user.valueFrom.secretKeyRef.name or
          $item.metadata.name =  $root.spec.output.otlp.authentication.basic.password.valueFrom.secretKeyRef.name or
          $item.metadata.name = $root.spec.output.otlp.endpoint.valueFrom.secretKeyRef.name or
          $item.metadata.name = $root.spec.output.otlp.headers.valueFrom.secretKeyRef.name or
          $item.metadata.name = $root.spec.output.otlp.tls.ca.valueFrom.secretKeyRef.name or
          $item.metadata.name = $root.spec.output.otlp.tls.cert.valueFrom.secretKeyRef.name or
          $item.metadata.name = $root.spec.output.otlp.tls.key.valueFrom.secretKeyRef.name
---
# Source: telemetry-manager/charts/experimental/templates/operator.kyma-project.io_telemetries.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.18.0
  name: telemetries.operator.kyma-project.io
spec:
  group: operator.kyma-project.io
  names:
    categories:
    - kyma-modules
    - kyma-telemetry
    kind: Telemetry
    listKind: TelemetryList
    plural: telemetries
    singular: telemetry
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.state
      name: state
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Telemetry is the Schema for the telemetries API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: TelemetrySpec defines the desired state of Telemetry
            properties:
              enrichments:
                description: Enrichments configures optional enrichments of all telemetry
                  data collected by pipelines. This field is optional.
                properties:
                  cluster:
                    description: Cluster provides user-defined cluster definitions
                      to enrich resource attributes.
                    properties:
                      name:
                        description: Name specifies a custom cluster name for the
                          resource attribute `k8s.cluster.name`.
                        type: string
                    required:
                    - name
                    type: object
                  extractPodLabels:
                    description: |-
                      ExtractPodLabels specifies the list of Pod labels to be used for enrichment.
                      This field is optional.
                    items:
                      description: |-
                        PodLabel defines labels from a Pod used for telemetry data enrichments, which can be specified either by a key or a key prefix.
                        Either 'key' or 'keyPrefix' must be specified, but not both.
                        The enriched telemetry data contains resource attributes with key k8s.pod.label.<label_key>.
                      properties:
                        key:
                          description: |-
                            Key specifies the exact label key to be used.
                            This field is optional.
                          type: string
                        keyPrefix:
                          description: |-
                            KeyPrefix specifies a prefix for label keys to be used.
                            This field is optional.
                          type: string
                      type: object
                      x-kubernetes-validations:
                      - message: Either 'key' or 'keyPrefix' must be specified
                        rule: (has(self.key) || has(self.keyPrefix))
                      - message: Either 'key' or 'keyPrefix' must be specified
                        rule: '!(has(self.key) && has(self.keyPrefix))'
                    type: array
                type: object
              log:
                description: Log configures module settings specific to the log features.
                  This field is optional.
                properties:
                  gateway:
                    description: Gateway configures the log gateway.
                    properties:
                      scaling:
                        description: Scaling defines which strategy is used for scaling
                          the gateway, with detailed configuration options for each
                          strategy type.
                        properties:
                          static:
                            description: |-
                              Static is a scaling strategy enabling you to define a custom amount of replicas to be used for the gateway. Present only if Type =
                              StaticScalingStrategyType.
                            properties:
                              replicas:
                                description: Replicas defines a static number of Pods
                                  to run the gateway. Minimum is 1.
                                format: int32
                                minimum: 1
                                type: integer
                            type: object
                          type:
                            description: Type of scaling strategy. Default is none,
                              using a fixed amount of replicas.
                            enum:
                            - Static
                            type: string
                        type: object
                    type: object
                type: object
              metric:
                description: Metric configures module settings specific to the metric
                  features. This field is optional.
                properties:
                  gateway:
                    description: Gateway configures the metric gateway.
                    properties:
                      scaling:
                        description: Scaling defines which strategy is used for scaling
                          the gateway, with detailed configuration options for each
                          strategy type.
                        properties:
                          static:
                            description: |-
                              Static is a scaling strategy enabling you to define a custom amount of replicas to be used for the gateway. Present only if Type =
                              StaticScalingStrategyType.
                            properties:
                              replicas:
                                description: Replicas defines a static number of Pods
                                  to run the gateway. Minimum is 1.
                                format: int32
                                minimum: 1
                                type: integer
                            type: object
                          type:
                            description: Type of scaling strategy. Default is none,
                              using a fixed amount of replicas.
                            enum:
                            - Static
                            type: string
                        type: object
                    type: object
                type: object
              trace:
                description: Trace configures module settings specific to the trace
                  features. This field is optional.
                properties:
                  gateway:
                    description: Gateway configures the trace gateway.
                    properties:
                      scaling:
                        description: Scaling defines which strategy is used for scaling
                          the gateway, with detailed configuration options for each
                          strategy type.
                        properties:
                          static:
                            description: |-
                              Static is a scaling strategy enabling you to define a custom amount of replicas to be used for the gateway. Present only if Type =
                              StaticScalingStrategyType.
                            properties:
                              replicas:
                                description: Replicas defines a static number of Pods
                                  to run the gateway. Minimum is 1.
                                format: int32
                                minimum: 1
                                type: integer
                            type: object
                          type:
                            description: Type of scaling strategy. Default is none,
                              using a fixed amount of replicas.
                            enum:
                            - Static
                            type: string
                        type: object
                    type: object
                type: object
            type: object
          status:
            description: TelemetryStatus defines the observed state of Telemetry
            properties:
              conditions:
                description: |-
                  Conditions contain a set of conditionals to determine the State of Status.
                  If all Conditions are met, State is expected to be in StateReady.
                items:
                  description: Condition contains details for one aspect of the current
                    state of this API Resource.
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              endpoints:
                description: Endpoints for log, trace, and metric gateway.
                nullable: true
                properties:
                  logs:
                    description: Logs contains the endpoints for log gateway supporting
                      OTLP.
                    properties:
                      grpc:
                        description: gRPC endpoint for OTLP.
                        type: string
                      http:
                        description: HTTP endpoint for OTLP.
                        type: string
                    type: object
                  metrics:
                    description: Metrics contains the endpoints for metric gateway
                      supporting OTLP.
                    properties:
                      grpc:
                        description: gRPC endpoint for OTLP.
                        type: string
                      http:
                        description: HTTP endpoint for OTLP.
                        type: string
                    type: object
                  traces:
                    description: Traces contains the endpoints for trace gateway supporting
                      OTLP.
                    properties:
                      grpc:
                        description: gRPC endpoint for OTLP.
                        type: string
                      http:
                        description: HTTP endpoint for OTLP.
                        type: string
                    type: object
                type: object
              state:
                description: |-
                  State signifies current state of Module CR.
                  Value can be one of these three: "Ready", "Deleting", or "Warning".
                enum:
                - Deleting
                - Ready
                - Warning
                type: string
            required:
            - state
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
# Source: telemetry-manager/charts/experimental/templates/telemetry.kyma-project.io_logparsers.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.18.0
  name: logparsers.telemetry.kyma-project.io
spec:
  group: telemetry.kyma-project.io
  names:
    kind: LogParser
    listKind: LogParserList
    plural: logparsers
    singular: logparser
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=="AgentHealthy")].status
      name: Agent Healthy
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    deprecated: true
    deprecationWarning: The LogParser API is deprecated. Instead, log in JSON format
      and use the JSON parsing feature of the LogPipeline
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: LogParser is the Schema for the logparsers API.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: Defines the desired state of LogParser.
            properties:
              parser:
                description: '[Fluent Bit Parsers](https://docs.fluentbit.io/manual/pipeline/parsers).
                  The parser specified here has no effect until it is referenced by
                  a [Pod annotation](https://docs.fluentbit.io/manual/pipeline/filters/kubernetes#kubernetes-annotations)
                  on your workload or by a [Parser Filter](https://docs.fluentbit.io/manual/pipeline/filters/parser)
                  defined in a pipeline''s filters section.'
                type: string
            type: object
          status:
            description: Shows the observed state of the LogParser.
            properties:
              conditions:
                description: An array of conditions describing the status of the parser.
                items:
                  description: Condition contains details for one aspect of the current
                    state of this API Resource.
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
# Source: telemetry-manager/charts/experimental/templates/telemetry.kyma-project.io_logpipelines.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.18.0
  name: logpipelines.telemetry.kyma-project.io
spec:
  group: telemetry.kyma-project.io
  names:
    categories:
    - kyma-telemetry
    - kyma-telemetry-pipelines
    kind: LogPipeline
    listKind: LogPipelineList
    plural: logpipelines
    singular: logpipeline
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=="ConfigurationGenerated")].status
      name: Configuration Generated
      type: string
    - jsonPath: .status.conditions[?(@.type=="AgentHealthy")].status
      name: Agent Healthy
      type: string
    - jsonPath: .status.conditions[?(@.type=="TelemetryFlowHealthy")].status
      name: Flow Healthy
      type: string
    - jsonPath: .status.unsupportedMode
      name: Unsupported Mode
      type: boolean
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: LogPipeline is the Schema for the logpipelines API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: Defines the desired state of LogPipeline
            properties:
              files:
                description: Files is a list of content snippets that are mounted
                  as files in the Fluent Bit configuration, which can be linked in
                  the `custom` filters and a `custom` output. Only available when
                  using an output of type `http` and `custom`.
                items:
                  description: Provides file content to be consumed by a LogPipeline
                    configuration
                  properties:
                    content:
                      description: Content of the file to be mounted in the Fluent
                        Bit configuration.
                      type: string
                    name:
                      description: Name of the file under which the content is mounted
                        in the Fluent Bit configuration.
                      type: string
                  type: object
                type: array
              filters:
                description: Filters configures custom Fluent Bit `filters` to transform
                  logs. Only available when using an output of type `http` and `custom`.
                items:
                  description: LogPipelineFilter configures custom Fluent Bit `filters`
                    to transform logs. Only available when using an output of type
                    `http` and `custom`.
                  properties:
                    custom:
                      description: Custom defines a custom filter in the [Fluent Bit
                        syntax](https://docs.fluentbit.io/manual/pipeline/outputs).
                        If you use a `custom` filter, you put the LogPipeline in unsupported
                        mode. Only available when using an output of type `http` and
                        `custom`.
                      type: string
                  type: object
                type: array
              input:
                description: Input configures additional inputs for log collection.
                properties:
                  application:
                    description: Application input configures the log collection from
                      application containers stdout/stderr by tailing the log files
                      of the underlying container runtime.
                    properties:
                      containers:
                        description: Containers describes whether application logs
                          from specific containers are selected. The options are mutually
                          exclusive.
                        properties:
                          exclude:
                            description: Exclude specifies to exclude only the container
                              logs with the specified container names.
                            items:
                              type: string
                            type: array
                          include:
                            description: Include specifies to include only the container
                              logs with the specified container names.
                            items:
                              type: string
                            type: array
                        type: object
                      dropLabels:
                        description: DropLabels defines whether to drop all Kubernetes
                          labels. The default is `false`. Only available when using
                          an output of type `http` and `custom`. For an `otlp` output,
                          use the label enrichement feature in the Telemetry resource
                          instead.
                        type: boolean
                      enabled:
                        description: If enabled, application logs are collected from
                          application containers stdout/stderr. The default is `true`.
                        type: boolean
                      keepAnnotations:
                        description: KeepAnnotations defines whether to keep all Kubernetes
                          annotations. The default is `false`.  Only available when
                          using an output of type `http` and `custom`.
                        type: boolean
                      keepOriginalBody:
                        description: KeepOriginalBody retains the original log data
                          if the log data is in JSON and it is successfully parsed.
                          If set to `false`, the original log data is removed from
                          the log record. The default is `true`.
                        type: boolean
                      namespaces:
                        description: Namespaces describes whether application logs
                          from specific namespaces are selected. The options are mutually
                          exclusive. System namespaces are excluded by default. Use
                          the `system` attribute with value `true` to enable them.
                        properties:
                          exclude:
                            description: Exclude the container logs of the specified
                              Namespace names.
                            items:
                              type: string
                            type: array
                          include:
                            description: Include only the container logs of the specified
                              Namespace names.
                            items:
                              type: string
                            type: array
                          system:
                            description: System specifies whether to collect logs
                              from system namespaces. If set to `true`, you collect
                              logs from all namespaces including system namespaces,
                              such as like kube-system, istio-system, and kyma-system.
                              The default is `false`.
                            type: boolean
                        type: object
                    type: object
                  otlp:
                    description: OTLP input configures the push endpoint to receive
                      logs from a OTLP source.
                    properties:
                      disabled:
                        description: If set to `true`, no push-based OTLP signals
                          are collected. The default is `false`.
                        type: boolean
                      namespaces:
                        description: Namespaces describes whether push-based OTLP
                          signals from specific namespaces are selected. System namespaces
                          are enabled by default.
                        properties:
                          exclude:
                            description: Exclude signals from the specified Namespace
                              names only.
                            items:
                              type: string
                            type: array
                          include:
                            description: Include signals from the specified Namespace
                              names only.
                            items:
                              type: string
                            type: array
                        type: object
                        x-kubernetes-validations:
                        - message: Can only define one namespace selector - either
                            'include' or 'exclude'
                          rule: '!((has(self.include) && size(self.include) != 0)
                            && (has(self.exclude) && size(self.exclude) != 0))'
                    type: object
                type: object
              output:
                description: Output configures the backend to which logs are sent.
                  You must specify exactly one output per pipeline.
                properties:
                  custom:
                    description: Custom defines a custom output in the [Fluent Bit
                      syntax](https://docs.fluentbit.io/manual/pipeline/outputs) where
                      you want to push the logs. If you use a `custom` output, you
                      put the LogPipeline in unsupported mode. Only available when
                      using an output of type `http` and `custom`.
                    type: string
                  http:
                    description: HTTP configures an HTTP-based output compatible with
                      the Fluent Bit HTTP output plugin.
                    properties:
                      compress:
                        description: Compress defines the compression algorithm to
                          use. Either `none` or `gzip`. Default is `none`.
                        type: string
                      dedot:
                        description: Dedot enables de-dotting of Kubernetes labels
                          and annotations. For compatibility with OpenSearch-based
                          backends, dots (.) are replaced by underscores (_). Default
                          is `false`.
                        type: boolean
                      format:
                        description: Format is the data format to be used in the HTTP
                          request body. Either `gelf`, `json`, `json_stream`, `json_lines`,
                          or `msgpack`. Default is `json`.
                        type: string
                      host:
                        description: Host defines the host of the HTTP backend.
                        properties:
                          value:
                            description: Value as plain text.
                            type: string
                          valueFrom:
                            description: ValueFrom is the value as a reference to
                              a resource.
                            properties:
                              secretKeyRef:
                                description: SecretKeyRef refers to the value of a
                                  specific key in a Secret. You must provide `name`
                                  and `namespace` of the Secret, as well as the name
                                  of the `key`.
                                properties:
                                  key:
                                    description: Key defines the name of the attribute
                                      of the Secret holding the referenced value.
                                    type: string
                                  name:
                                    description: Name of the Secret containing the
                                      referenced value.
                                    type: string
                                  namespace:
                                    description: Namespace containing the Secret with
                                      the referenced value.
                                    type: string
                                required:
                                - key
                                - name
                                - namespace
                                type: object
                            type: object
                        type: object
                      password:
                        description: Password defines the basic auth password.
                        properties:
                          value:
                            description: Value as plain text.
                            type: string
                          valueFrom:
                            description: ValueFrom is the value as a reference to
                              a resource.
                            properties:
                              secretKeyRef:
                                description: SecretKeyRef refers to the value of a
                                  specific key in a Secret. You must provide `name`
                                  and `namespace` of the Secret, as well as the name
                                  of the `key`.
                                properties:
                                  key:
                                    description: Key defines the name of the attribute
                                      of the Secret holding the referenced value.
                                    type: string
                                  name:
                                    description: Name of the Secret containing the
                                      referenced value.
                                    type: string
                                  namespace:
                                    description: Namespace containing the Secret with
                                      the referenced value.
                                    type: string
                                required:
                                - key
                                - name
                                - namespace
                                type: object
                            type: object
                        type: object
                      port:
                        description: Port defines the port of the HTTP backend. Default
                          is 443.
                        type: string
                      tls:
                        description: TLS configures TLS for the HTTP backend.
                        properties:
                          ca:
                            description: CA defines an optional CA certificate for
                              server certificate verification when using TLS. The
                              certificate must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference
                                  to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value
                                      of a specific key in a Secret. You must provide
                                      `name` and `namespace` of the Secret, as well
                                      as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute
                                          of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing
                                          the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret
                                          with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                          cert:
                            description: Cert defines a client certificate to use
                              when using TLS. The certificate must be provided in
                              PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference
                                  to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value
                                      of a specific key in a Secret. You must provide
                                      `name` and `namespace` of the Secret, as well
                                      as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute
                                          of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing
                                          the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret
                                          with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                          disabled:
                            description: Disabled specifies if TLS is disabled or
                              enabled. Default is `false`.
                            type: boolean
                          key:
                            description: Key defines the client key to use when using
                              TLS. The key must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference
                                  to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value
                                      of a specific key in a Secret. You must provide
                                      `name` and `namespace` of the Secret, as well
                                      as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute
                                          of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing
                                          the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret
                                          with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                          skipCertificateValidation:
                            description: If `true`, the validation of certificates
                              is skipped. Default is `false`.
                            type: boolean
                        type: object
                        x-kubernetes-validations:
                        - message: Can define either both 'cert' and 'key', or neither
                          rule: has(self.cert) == has(self.key)
                      uri:
                        description: URI defines the URI of the HTTP backend. Default
                          is "/".
                        type: string
                      user:
                        description: User defines the basic auth user.
                        properties:
                          value:
                            description: Value as plain text.
                            type: string
                          valueFrom:
                            description: ValueFrom is the value as a reference to
                              a resource.
                            properties:
                              secretKeyRef:
                                description: SecretKeyRef refers to the value of a
                                  specific key in a Secret. You must provide `name`
                                  and `namespace` of the Secret, as well as the name
                                  of the `key`.
                                properties:
                                  key:
                                    description: Key defines the name of the attribute
                                      of the Secret holding the referenced value.
                                    type: string
                                  name:
                                    description: Name of the Secret containing the
                                      referenced value.
                                    type: string
                                  namespace:
                                    description: Namespace containing the Secret with
                                      the referenced value.
                                    type: string
                                required:
                                - key
                                - name
                                - namespace
                                type: object
                            type: object
                        type: object
                    type: object
                  otlp:
                    description: OTLP defines an output using the OpenTelemetry protocol.
                    properties:
                      authentication:
                        description: Authentication defines authentication options
                          for the OTLP output
                        properties:
                          basic:
                            description: Basic activates `Basic` authentication for
                              the destination providing relevant Secrets.
                            properties:
                              password:
                                description: Password contains the basic auth password
                                  or a Secret reference.
                                properties:
                                  value:
                                    description: Value as plain text.
                                    type: string
                                  valueFrom:
                                    description: ValueFrom is the value as a reference
                                      to a resource.
                                    properties:
                                      secretKeyRef:
                                        description: SecretKeyRef refers to the value
                                          of a specific key in a Secret. You must
                                          provide `name` and `namespace` of the Secret,
                                          as well as the name of the `key`.
                                        properties:
                                          key:
                                            description: Key defines the name of the
                                              attribute of the Secret holding the
                                              referenced value.
                                            type: string
                                          name:
                                            description: Name of the Secret containing
                                              the referenced value.
                                            type: string
                                          namespace:
                                            description: Namespace containing the
                                              Secret with the referenced value.
                                            type: string
                                        required:
                                        - key
                                        - name
                                        - namespace
                                        type: object
                                    type: object
                                type: object
                              user:
                                description: User contains the basic auth username
                                  or a Secret reference.
                                properties:
                                  value:
                                    description: Value as plain text.
                                    type: string
                                  valueFrom:
                                    description: ValueFrom is the value as a reference
                                      to a resource.
                                    properties:
                                      secretKeyRef:
                                        description: SecretKeyRef refers to the value
                                          of a specific key in a Secret. You must
                                          provide `name` and `namespace` of the Secret,
                                          as well as the name of the `key`.
                                        properties:
                                          key:
                                            description: Key defines the name of the
                                              attribute of the Secret holding the
                                              referenced value.
                                            type: string
                                          name:
                                            description: Name of the Secret containing
                                              the referenced value.
                                            type: string
                                          namespace:
                                            description: Namespace containing the
                                              Secret with the referenced value.
                                            type: string
                                        required:
                                        - key
                                        - name
                                        - namespace
                                        type: object
                                    type: object
                                type: object
                            required:
                            - password
                            - user
                            type: object
                        type: object
                      endpoint:
                        description: Endpoint defines the host and port (<host>:<port>)
                          of an OTLP endpoint.
                        properties:
                          value:
                            description: Value as plain text.
                            type: string
                          valueFrom:
                            description: ValueFrom is the value as a reference to
                              a resource.
                            properties:
                              secretKeyRef:
                                description: SecretKeyRef refers to the value of a
                                  specific key in a Secret. You must provide `name`
                                  and `namespace` of the Secret, as well as the name
                                  of the `key`.
                                properties:
                                  key:
                                    description: Key defines the name of the attribute
                                      of the Secret holding the referenced value.
                                    type: string
                                  name:
                                    description: Name of the Secret containing the
                                      referenced value.
                                    type: string
                                  namespace:
                                    description: Namespace containing the Secret with
                                      the referenced value.
                                    type: string
                                required:
                                - key
                                - name
                                - namespace
                                type: object
                            type: object
                        type: object
                      headers:
                        description: Headers defines custom headers to be added to
                          outgoing HTTP or gRPC requests.
                        items:
                          properties:
                            name:
                              description: Name defines the header name.
                              type: string
                            prefix:
                              description: Prefix defines an optional header value
                                prefix. The prefix is separated from the value by
                                a space character.
                              type: string
                            value:
                              description: Value as plain text.
                              type: string
                            valueFrom:
                              description: ValueFrom is the value as a reference to
                                a resource.
                              properties:
                                secretKeyRef:
                                  description: SecretKeyRef refers to the value of
                                    a specific key in a Secret. You must provide `name`
                                    and `namespace` of the Secret, as well as the
                                    name of the `key`.
                                  properties:
                                    key:
                                      description: Key defines the name of the attribute
                                        of the Secret holding the referenced value.
                                      type: string
                                    name:
                                      description: Name of the Secret containing the
                                        referenced value.
                                      type: string
                                    namespace:
                                      description: Namespace containing the Secret
                                        with the referenced value.
                                      type: string
                                  required:
                                  - key
                                  - name
                                  - namespace
                                  type: object
                              type: object
                          required:
                          - name
                          type: object
                        type: array
                      path:
                        description: Path defines OTLP export URL path (only for the
                          HTTP protocol). This value overrides auto-appended paths
                          `/v1/metrics` and `/v1/traces`
                        type: string
                      protocol:
                        description: Protocol defines the OTLP protocol (`http` or
                          `grpc`). Default is `grpc`.
                        enum:
                        - grpc
                        - http
                        minLength: 1
                        type: string
                      tls:
                        description: TLS defines TLS options for the OTLP output.
                        properties:
                          ca:
                            description: Defines an optional CA certificate for server
                              certificate verification when using TLS. The certificate
                              must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference
                                  to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value
                                      of a specific key in a Secret. You must provide
                                      `name` and `namespace` of the Secret, as well
                                      as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute
                                          of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing
                                          the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret
                                          with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                          cert:
                            description: Defines a client certificate to use when
                              using TLS. The certificate must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference
                                  to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value
                                      of a specific key in a Secret. You must provide
                                      `name` and `namespace` of the Secret, as well
                                      as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute
                                          of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing
                                          the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret
                                          with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                          insecure:
                            description: Insecure defines whether to send requests
                              using plaintext instead of TLS.
                            type: boolean
                          insecureSkipVerify:
                            description: InsecureSkipVerify defines whether to skip
                              server certificate verification when using TLS.
                            type: boolean
                          key:
                            description: Defines the client key to use when using
                              TLS. The key must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference
                                  to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value
                                      of a specific key in a Secret. You must provide
                                      `name` and `namespace` of the Secret, as well
                                      as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute
                                          of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing
                                          the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret
                                          with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                        type: object
                        x-kubernetes-validations:
                        - message: Can define either both 'cert' and 'key', or neither
                          rule: has(self.cert) == has(self.key)
                    required:
                    - endpoint
                    type: object
                    x-kubernetes-validations:
                    - message: Path is only available with HTTP protocol
                      rule: ((!has(self.path) || size(self.path) <= 0) && (has(self.protocol)
                        && self.protocol == 'grpc')) || (has(self.protocol) && self.protocol
                        == 'http')
                type: object
                x-kubernetes-validations:
                - message: Switching to or away from OTLP output is not supported.
                    Please re-create the LogPipeline instead
                  rule: has(self.otlp) == has(oldSelf.otlp)
                - message: Exactly one output must be defined
                  rule: (!has(self.custom) && !has(self.http)) || !(has(self.custom)
                    && has(self.http))
                - message: Exactly one output must be defined
                  rule: (!has(self.custom) && !has(self.otlp)) || ! (has(self.custom)
                    && has(self.otlp))
                - message: Exactly one output must be defined
                  rule: (!has(self.http) && !has(self.otlp)) || ! (has(self.http)
                    && has(self.otlp))
              transform:
                description: Transforms specify a list of transformations to apply
                  to telemetry data.
                items:
                  description: TransformSpec defines a transformation to apply to
                    telemetry data.
                  properties:
                    conditions:
                      description: Conditions specify a list of multiple where clauses,
                        which will be processed as global conditions for the accompanying
                        set of statements. The conditions are ORed together, which
                        means only one condition needs to evaluate to true in order
                        for the statements (including their individual where clauses)
                        to be executed.
                      items:
                        type: string
                      type: array
                    statements:
                      description: Statements specify a list of OTTL statements to
                        perform the transformation.
                      items:
                        type: string
                      type: array
                  type: object
                type: array
              variables:
                description: Variables is a list of mappings from Kubernetes Secret
                  keys to environment variables. Mapped keys are mounted as environment
                  variables, so that they are available as [Variables](https://docs.fluentbit.io/manual/administration/configuring-fluent-bit/classic-mode/variables)
                  in the `custom` filters and a `custom` output. Only available when
                  using an output of type `http` and `custom`.
                items:
                  description: References a Kubernetes secret that should be provided
                    as environment variable to Fluent Bit
                  properties:
                    name:
                      description: Name of the variable to map.
                      type: string
                    valueFrom:
                      properties:
                        secretKeyRef:
                          description: SecretKeyRef refers to the value of a specific
                            key in a Secret. You must provide `name` and `namespace`
                            of the Secret, as well as the name of the `key`.
                          properties:
                            key:
                              description: Key defines the name of the attribute of
                                the Secret holding the referenced value.
                              type: string
                            name:
                              description: Name of the Secret containing the referenced
                                value.
                              type: string
                            namespace:
                              description: Namespace containing the Secret with the
                                referenced value.
                              type: string
                          required:
                          - key
                          - name
                          - namespace
                          type: object
                      type: object
                  type: object
                type: array
            type: object
            x-kubernetes-validations:
            - message: otlp input is only supported with otlp output
              rule: '!((has(self.output.http) || has(self.output.custom))  && has(self.input.otlp))'
            - message: input.application.dropLabels is not supported with otlp output
              rule: '!(has(self.output.otlp) && has(self.input.application.dropLabels))'
            - message: input.application.keepAnnotations is not supported with otlp
                output
              rule: '!(has(self.output.otlp) && has(self.input.application.keepAnnotations))'
            - message: filters are not supported with otlp output
              rule: '!(has(self.output.otlp) && has(self.filters))'
            - message: files not supported with otlp output
              rule: '!(has(self.output.otlp) && has(self.files))'
            - message: variables not supported with otlp output
              rule: '!(has(self.output.otlp) && has(self.variables))'
            - message: transform is only supported with otlp output
              rule: '!(!has(self.output.otlp) && has(self.transform))'
          status:
            description: Shows the observed state of the LogPipeline
            properties:
              conditions:
                description: An array of conditions describing the status of the pipeline.
                items:
                  description: Condition contains details for one aspect of the current
                    state of this API Resource.
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              unsupportedMode:
                description: Is active when the LogPipeline uses a `custom` output
                  or filter; see [unsupported mode](https://github.com/kyma-project/telemetry-manager/blob/main/docs/user/02-logs.md#unsupported-mode).
                type: boolean
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=="ConfigurationGenerated")].status
      name: Configuration Generated
      type: string
    - jsonPath: .status.conditions[?(@.type=="GatewayHealthy")].status
      name: Gateway Healthy
      type: string
    - jsonPath: .status.conditions[?(@.type=="AgentHealthy")].status
      name: Agent Healthy
      type: string
    - jsonPath: .status.conditions[?(@.type=="TelemetryFlowHealthy")].status
      name: Flow Healthy
      type: string
    - jsonPath: .status.unsupportedMode
      name: Unsupported Mode
      type: boolean
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: LogPipeline is the Schema for the logpipelines API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: Defines the desired state of LogPipeline
            properties:
              files:
                description: Files is a list of content snippets that are mounted
                  as files in the Fluent Bit configuration, which can be linked in
                  the `custom` filters and a `custom` output. Only available when
                  using an output of type `http` and `custom`.
                items:
                  description: Provides file content to be consumed by a LogPipeline
                    configuration
                  properties:
                    content:
                      description: Content of the file to be mounted in the Fluent
                        Bit configuration.
                      type: string
                    name:
                      description: Name of the file under which the content is mounted
                        in the Fluent Bit configuration.
                      type: string
                  type: object
                type: array
              filters:
                description: Filters configures custom Fluent Bit `filters` to transform
                  logs. Only available when using an output of type `http` and `custom`.
                items:
                  description: LogPipelineFilter configures custom Fluent Bit `filters`
                    to transform logs. Only available when using an output of type
                    `http` and `custom`.
                  properties:
                    custom:
                      description: Custom defines a custom filter in the [Fluent Bit
                        syntax](https://docs.fluentbit.io/manual/pipeline/outputs).
                        If you use a `custom` filter, you put the LogPipeline in unsupported
                        mode. Only available when using an output of type `http` and
                        `custom`.
                      type: string
                  type: object
                type: array
              input:
                description: Input configures additional inputs for log collection.
                properties:
                  otlp:
                    description: OTLP input configures the push endpoint to receive
                      logs from a OTLP source.
                    properties:
                      disabled:
                        description: If set to `true`, no push-based OTLP signals
                          are collected. The default is `false`.
                        type: boolean
                      namespaces:
                        description: Namespaces describes whether push-based OTLP
                          signals from specific namespaces are selected. System namespaces
                          are enabled by default.
                        properties:
                          exclude:
                            description: Exclude signals from the specified Namespace
                              names only.
                            items:
                              type: string
                            type: array
                          include:
                            description: Include signals from the specified Namespace
                              names only.
                            items:
                              type: string
                            type: array
                        type: object
                        x-kubernetes-validations:
                        - message: Can only define one namespace selector - either
                            'include' or 'exclude'
                          rule: '!((has(self.include) && size(self.include) != 0)
                            && (has(self.exclude) && size(self.exclude) != 0))'
                    type: object
                  runtime:
                    description: Runtime input configures the log collection from
                      application containers stdout/stderr by tailing the log files
                      of the underlying container runtime.
                    properties:
                      containers:
                        description: Containers describes whether application logs
                          from specific containers are selected. The options are mutually
                          exclusive.
                        properties:
                          exclude:
                            description: Exclude specifies to exclude only the container
                              logs with the specified container names.
                            items:
                              type: string
                            type: array
                          include:
                            description: Include specifies to include only the container
                              logs with the specified container names.
                            items:
                              type: string
                            type: array
                        type: object
                      dropLabels:
                        description: DropLabels defines whether to drop all Kubernetes
                          labels. The default is `false`. Only available when using
                          an output of type `http` and `custom`. For an `otlp` output,
                          use the label enrichement feature in the Telemetry resource
                          instead.
                        type: boolean
                      enabled:
                        description: If enabled, application logs are collected from
                          application containers stdout/stderr. The default is `true`.
                        type: boolean
                      keepAnnotations:
                        description: KeepAnnotations defines whether to keep all Kubernetes
                          annotations. The default is `false`.  Only available when
                          using an output of type `http` and `custom`.
                        type: boolean
                      keepOriginalBody:
                        description: KeepOriginalBody retains the original log data
                          if the log data is in JSON and it is successfully parsed.
                          If set to `false`, the original log data is removed from
                          the log record. The default is `true`.
                        type: boolean
                      namespaces:
                        description: Namespaces describes whether application logs
                          from specific namespaces are selected. The options are mutually
                          exclusive. System namespaces are excluded by default. Use
                          the `system` attribute with value `true` to enable them.
                        properties:
                          exclude:
                            description: Exclude the container logs of the specified
                              Namespace names.
                            items:
                              type: string
                            type: array
                          include:
                            description: Include only the container logs of the specified
                              Namespace names.
                            items:
                              type: string
                            type: array
                          system:
                            description: System specifies whether to collect logs
                              from system namespaces. If set to `true`, you collect
                              logs from all namespaces including system namespaces,
                              such as like kube-system, istio-system, and kyma-system.
                              The default is `false`.
                            type: boolean
                        type: object
                    type: object
                type: object
              output:
                description: Output configures the backend to which logs are sent.
                  You must specify exactly one output per pipeline.
                properties:
                  custom:
                    description: Custom defines a custom output in the [Fluent Bit
                      syntax](https://docs.fluentbit.io/manual/pipeline/outputs) where
                      you want to push the logs. If you use a `custom` output, you
                      put the LogPipeline in unsupported mode. Only available when
                      using an output of type `http` and `custom`.
                    type: string
                  http:
                    description: HTTP configures an HTTP-based output compatible with
                      the Fluent Bit HTTP output plugin.
                    properties:
                      compress:
                        description: Compress defines the compression algorithm to
                          use. Either `none` or `gzip`. Default is `none`.
                        type: string
                      dedot:
                        description: Dedot enables de-dotting of Kubernetes labels
                          and annotations. For compatibility with OpenSearch-based
                          backends, dots (.) are replaced by underscores (_). Default
                          is `false`.
                        type: boolean
                      format:
                        description: Format is the data format to be used in the HTTP
                          request body. Either `gelf`, `json`, `json_stream`, `json_lines`,
                          or `msgpack`. Default is `json`.
                        type: string
                      host:
                        description: Host defines the host of the HTTP backend.
                        properties:
                          value:
                            description: Value as plain text.
                            type: string
                          valueFrom:
                            description: ValueFrom is the value as a reference to
                              a resource.
                            properties:
                              secretKeyRef:
                                description: SecretKeyRef refers to the value of a
                                  specific key in a Secret. You must provide `name`
                                  and `namespace` of the Secret, as well as the name
                                  of the `key`.
                                properties:
                                  key:
                                    description: Key defines the name of the attribute
                                      of the Secret holding the referenced value.
                                    type: string
                                  name:
                                    description: Name of the Secret containing the
                                      referenced value.
                                    type: string
                                  namespace:
                                    description: Namespace containing the Secret with
                                      the referenced value.
                                    type: string
                                required:
                                - key
                                - name
                                - namespace
                                type: object
                            type: object
                        type: object
                      password:
                        description: Password defines the basic auth password.
                        properties:
                          value:
                            description: Value as plain text.
                            type: string
                          valueFrom:
                            description: ValueFrom is the value as a reference to
                              a resource.
                            properties:
                              secretKeyRef:
                                description: SecretKeyRef refers to the value of a
                                  specific key in a Secret. You must provide `name`
                                  and `namespace` of the Secret, as well as the name
                                  of the `key`.
                                properties:
                                  key:
                                    description: Key defines the name of the attribute
                                      of the Secret holding the referenced value.
                                    type: string
                                  name:
                                    description: Name of the Secret containing the
                                      referenced value.
                                    type: string
                                  namespace:
                                    description: Namespace containing the Secret with
                                      the referenced value.
                                    type: string
                                required:
                                - key
                                - name
                                - namespace
                                type: object
                            type: object
                        type: object
                      port:
                        description: Port defines the port of the HTTP backend. Default
                          is 443.
                        type: string
                      tls:
                        description: TLS configures TLS for the HTTP backend.
                        properties:
                          ca:
                            description: Defines an optional CA certificate for server
                              certificate verification when using TLS. The certificate
                              must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference
                                  to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value
                                      of a specific key in a Secret. You must provide
                                      `name` and `namespace` of the Secret, as well
                                      as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute
                                          of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing
                                          the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret
                                          with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                          cert:
                            description: Defines a client certificate to use when
                              using TLS. The certificate must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference
                                  to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value
                                      of a specific key in a Secret. You must provide
                                      `name` and `namespace` of the Secret, as well
                                      as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute
                                          of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing
                                          the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret
                                          with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                          disabled:
                            description: Disabled specifies if TLS is disabled or
                              enabled. Default is `false`.
                            type: boolean
                          key:
                            description: Defines the client key to use when using
                              TLS. The key must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference
                                  to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value
                                      of a specific key in a Secret. You must provide
                                      `name` and `namespace` of the Secret, as well
                                      as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute
                                          of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing
                                          the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret
                                          with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                          skipCertificateValidation:
                            description: If `true`, the validation of certificates
                              is skipped. Default is `false`.
                            type: boolean
                        type: object
                        x-kubernetes-validations:
                        - message: Can define either both 'cert' and 'key', or neither
                          rule: has(self.cert) == has(self.key)
                      uri:
                        description: URI defines the URI of the HTTP backend. Default
                          is "/".
                        type: string
                      user:
                        description: User defines the basic auth user.
                        properties:
                          value:
                            description: Value as plain text.
                            type: string
                          valueFrom:
                            description: ValueFrom is the value as a reference to
                              a resource.
                            properties:
                              secretKeyRef:
                                description: SecretKeyRef refers to the value of a
                                  specific key in a Secret. You must provide `name`
                                  and `namespace` of the Secret, as well as the name
                                  of the `key`.
                                properties:
                                  key:
                                    description: Key defines the name of the attribute
                                      of the Secret holding the referenced value.
                                    type: string
                                  name:
                                    description: Name of the Secret containing the
                                      referenced value.
                                    type: string
                                  namespace:
                                    description: Namespace containing the Secret with
                                      the referenced value.
                                    type: string
                                required:
                                - key
                                - name
                                - namespace
                                type: object
                            type: object
                        type: object
                    type: object
                  otlp:
                    description: OTLP defines an output using the OpenTelemetry protocol.
                    properties:
                      authentication:
                        description: Authentication defines authentication options
                          for the OTLP output
                        properties:
                          basic:
                            description: Basic activates `Basic` authentication for
                              the destination providing relevant Secrets.
                            properties:
                              password:
                                description: Password contains the basic auth password
                                  or a Secret reference.
                                properties:
                                  value:
                                    description: Value as plain text.
                                    type: string
                                  valueFrom:
                                    description: ValueFrom is the value as a reference
                                      to a resource.
                                    properties:
                                      secretKeyRef:
                                        description: SecretKeyRef refers to the value
                                          of a specific key in a Secret. You must
                                          provide `name` and `namespace` of the Secret,
                                          as well as the name of the `key`.
                                        properties:
                                          key:
                                            description: Key defines the name of the
                                              attribute of the Secret holding the
                                              referenced value.
                                            type: string
                                          name:
                                            description: Name of the Secret containing
                                              the referenced value.
                                            type: string
                                          namespace:
                                            description: Namespace containing the
                                              Secret with the referenced value.
                                            type: string
                                        required:
                                        - key
                                        - name
                                        - namespace
                                        type: object
                                    type: object
                                type: object
                              user:
                                description: User contains the basic auth username
                                  or a Secret reference.
                                properties:
                                  value:
                                    description: Value as plain text.
                                    type: string
                                  valueFrom:
                                    description: ValueFrom is the value as a reference
                                      to a resource.
                                    properties:
                                      secretKeyRef:
                                        description: SecretKeyRef refers to the value
                                          of a specific key in a Secret. You must
                                          provide `name` and `namespace` of the Secret,
                                          as well as the name of the `key`.
                                        properties:
                                          key:
                                            description: Key defines the name of the
                                              attribute of the Secret holding the
                                              referenced value.
                                            type: string
                                          name:
                                            description: Name of the Secret containing
                                              the referenced value.
                                            type: string
                                          namespace:
                                            description: Namespace containing the
                                              Secret with the referenced value.
                                            type: string
                                        required:
                                        - key
                                        - name
                                        - namespace
                                        type: object
                                    type: object
                                type: object
                            required:
                            - password
                            - user
                            type: object
                        type: object
                      endpoint:
                        description: Endpoint defines the host and port (<host>:<port>)
                          of an OTLP endpoint.
                        properties:
                          value:
                            description: Value as plain text.
                            type: string
                          valueFrom:
                            description: ValueFrom is the value as a reference to
                              a resource.
                            properties:
                              secretKeyRef:
                                description: SecretKeyRef refers to the value of a
                                  specific key in a Secret. You must provide `name`
                                  and `namespace` of the Secret, as well as the name
                                  of the `key`.
                                properties:
                                  key:
                                    description: Key defines the name of the attribute
                                      of the Secret holding the referenced value.
                                    type: string
                                  name:
                                    description: Name of the Secret containing the
                                      referenced value.
                                    type: string
                                  namespace:
                                    description: Namespace containing the Secret with
                                      the referenced value.
                                    type: string
                                required:
                                - key
                                - name
                                - namespace
                                type: object
                            type: object
                        type: object
                      headers:
                        description: Headers defines custom headers to be added to
                          outgoing HTTP or gRPC requests.
                        items:
                          properties:
                            name:
                              description: Name defines the header name.
                              type: string
                            prefix:
                              description: Prefix defines an optional header value
                                prefix. The prefix is separated from the value by
                                a space character.
                              type: string
                            value:
                              description: Value as plain text.
                              type: string
                            valueFrom:
                              description: ValueFrom is the value as a reference to
                                a resource.
                              properties:
                                secretKeyRef:
                                  description: SecretKeyRef refers to the value of
                                    a specific key in a Secret. You must provide `name`
                                    and `namespace` of the Secret, as well as the
                                    name of the `key`.
                                  properties:
                                    key:
                                      description: Key defines the name of the attribute
                                        of the Secret holding the referenced value.
                                      type: string
                                    name:
                                      description: Name of the Secret containing the
                                        referenced value.
                                      type: string
                                    namespace:
                                      description: Namespace containing the Secret
                                        with the referenced value.
                                      type: string
                                  required:
                                  - key
                                  - name
                                  - namespace
                                  type: object
                              type: object
                          required:
                          - name
                          type: object
                        type: array
                      path:
                        description: Path defines OTLP export URL path (only for the
                          HTTP protocol). This value overrides auto-appended paths
                          `/v1/metrics` and `/v1/traces`
                        type: string
                      protocol:
                        description: Protocol defines the OTLP protocol (`http` or
                          `grpc`). Default is `grpc``.
                        enum:
                        - grpc
                        - http
                        type: string
                      tls:
                        description: TLS defines TLS options for the OTLP output.
                        properties:
                          ca:
                            description: Defines an optional CA certificate for server
                              certificate verification when using TLS. The certificate
                              must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference
                                  to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value
                                      of a specific key in a Secret. You must provide
                                      `name` and `namespace` of the Secret, as well
                                      as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute
                                          of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing
                                          the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret
                                          with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                          cert:
                            description: Defines a client certificate to use when
                              using TLS. The certificate must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference
                                  to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value
                                      of a specific key in a Secret. You must provide
                                      `name` and `namespace` of the Secret, as well
                                      as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute
                                          of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing
                                          the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret
                                          with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                          disabled:
                            description: Disabled specifies if TLS is disabled or
                              enabled. Default is `false`.
                            type: boolean
                          key:
                            description: Defines the client key to use when using
                              TLS. The key must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference
                                  to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value
                                      of a specific key in a Secret. You must provide
                                      `name` and `namespace` of the Secret, as well
                                      as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute
                                          of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing
                                          the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret
                                          with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                          skipCertificateValidation:
                            description: If `true`, the validation of certificates
                              is skipped. Default is `false`.
                            type: boolean
                        type: object
                        x-kubernetes-validations:
                        - message: Can define either both 'cert' and 'key', or neither
                          rule: has(self.cert) == has(self.key)
                    required:
                    - endpoint
                    type: object
                    x-kubernetes-validations:
                    - message: Path is only available with HTTP protocol
                      rule: ((!has(self.path) || size(self.path) <= 0) && (has(self.protocol)
                        && self.protocol == 'grpc')) || (has(self.protocol) && self.protocol
                        == 'http')
                type: object
                x-kubernetes-validations:
                - message: Switching to or away from OTLP output is not supported.
                    Please re-create the LogPipeline instead
                  rule: has(self.otlp) == has(oldSelf.otlp)
                - message: Exactly one output must be defined
                  rule: (!has(self.custom) && !has(self.http)) || !(has(self.custom)
                    && has(self.http))
                - message: Exactly one output must be defined
                  rule: (!has(self.custom) && !has(self.otlp)) || ! (has(self.custom)
                    && has(self.otlp))
                - message: Exactly one output must be defined
                  rule: (!has(self.http) && !has(self.otlp)) || ! (has(self.http)
                    && has(self.otlp))
              transform:
                description: Transforms specify a list of transformations to apply
                  to telemetry data.
                items:
                  description: TransformSpec defines a transformation to apply to
                    telemetry data.
                  properties:
                    conditions:
                      description: Conditions specify a list of multiple where clauses,
                        which will be processed as global conditions for the accompanying
                        set of statements. The conditions are ORed together, which
                        means only one condition needs to evaluate to true in order
                        for the statements (including their individual where clauses)
                        to be executed.
                      items:
                        type: string
                      type: array
                    statements:
                      description: Statements specify a list of OTTL statements to
                        perform the transformation.
                      items:
                        type: string
                      type: array
                  type: object
                type: array
              variables:
                description: Variables is a list of mappings from Kubernetes Secret
                  keys to environment variables. Mapped keys are mounted as environment
                  variables, so that they are available as [Variables](https://docs.fluentbit.io/manual/administration/configuring-fluent-bit/classic-mode/variables)
                  in the `custom` filters and a `custom` output. Only available when
                  using an output of type `http` and `custom`.
                items:
                  description: References a Kubernetes secret that should be provided
                    as environment variable to Fluent Bit
                  properties:
                    name:
                      description: Name of the variable to map.
                      type: string
                    valueFrom:
                      properties:
                        secretKeyRef:
                          description: SecretKeyRef refers to the value of a specific
                            key in a Secret. You must provide `name` and `namespace`
                            of the Secret, as well as the name of the `key`.
                          properties:
                            key:
                              description: Key defines the name of the attribute of
                                the Secret holding the referenced value.
                              type: string
                            name:
                              description: Name of the Secret containing the referenced
                                value.
                              type: string
                            namespace:
                              description: Namespace containing the Secret with the
                                referenced value.
                              type: string
                          required:
                          - key
                          - name
                          - namespace
                          type: object
                      type: object
                  type: object
                type: array
            type: object
            x-kubernetes-validations:
            - message: otlp input is only supported with otlp output
              rule: '!((has(self.output.http) || has(self.output.custom))  && has(self.input.otlp))'
            - message: input.runtime.dropLabels is not supported with otlp output
              rule: '!(has(self.output.otlp) && has(self.input.runtime.dropLabels))'
            - message: input.runtime.keepAnnotations is not supported with otlp output
              rule: '!(has(self.output.otlp) && has(self.input.runtime.keepAnnotations))'
            - message: filters are not supported with otlp output
              rule: '!(has(self.output.otlp) && has(self.filters))'
            - message: files not supported with otlp output
              rule: '!(has(self.output.otlp) && has(self.files))'
            - message: variables not supported with otlp output
              rule: '!(has(self.output.otlp) && has(self.variables))'
            - message: transform is only supported with otlp output
              rule: '!(!has(self.output.otlp) && has(self.transform))'
          status:
            description: Shows the observed state of the LogPipeline
            properties:
              conditions:
                description: An array of conditions describing the status of the pipeline.
                items:
                  description: Condition contains details for one aspect of the current
                    state of this API Resource.
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              unsupportedMode:
                description: Is active when the LogPipeline uses a `custom` output
                  or filter; see [unsupported mode](https://github.com/kyma-project/telemetry-manager/blob/main/docs/user/02-logs.md#unsupported-mode).
                type: boolean
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
# Source: telemetry-manager/charts/experimental/templates/telemetry.kyma-project.io_metricpipelines.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.18.0
  name: metricpipelines.telemetry.kyma-project.io
spec:
  group: telemetry.kyma-project.io
  names:
    categories:
    - kyma-telemetry
    - kyma-telemetry-pipelines
    kind: MetricPipeline
    listKind: MetricPipelineList
    plural: metricpipelines
    singular: metricpipeline
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=="ConfigurationGenerated")].status
      name: Configuration Generated
      type: string
    - jsonPath: .status.conditions[?(@.type=="GatewayHealthy")].status
      name: Gateway Healthy
      type: string
    - jsonPath: .status.conditions[?(@.type=="AgentHealthy")].status
      name: Agent Healthy
      type: string
    - jsonPath: .status.conditions[?(@.type=="TelemetryFlowHealthy")].status
      name: Flow Healthy
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: MetricPipeline is the Schema for the metricpipelines API.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: Spec defines the desired characteristics of MetricPipeline.
            properties:
              input:
                description: Input configures additional inputs for metric collection.
                properties:
                  istio:
                    description: Istio input configures collection of Istio metrics
                      from applications running in the Istio service mesh.
                    properties:
                      diagnosticMetrics:
                        description: DiagnosticMetrics configures collection of additional
                          diagnostic metrics. The default is `false`.
                        properties:
                          enabled:
                            description: If enabled, diagnostic metrics are collected.
                              The default is `false`.
                            type: boolean
                        type: object
                      enabled:
                        description: Enabled specifies that istio-proxy metrics are
                          scraped from Pods that have the istio-proxy sidecar injected.
                          The default is `false`.
                        type: boolean
                      envoyMetrics:
                        description: EnvoyMetrics enables the collection of additional
                          Envoy metrics with prefix `envoy_`. The default is `false`.
                        properties:
                          enabled:
                            description: Enabled specifies that Envoy metrics with
                              prefix `envoy_` are scraped additionally. The default
                              is `false`.
                            type: boolean
                        type: object
                      namespaces:
                        description: Namespaces configures the namespaces for which
                          the collection should be activated. By default, all namespaces
                          including system namespaces are enabled.
                        properties:
                          exclude:
                            description: Exclude signals from the specified Namespace
                              names only.
                            items:
                              type: string
                            type: array
                          include:
                            description: Include signals from the specified Namespace
                              names only.
                            items:
                              type: string
                            type: array
                        type: object
                        x-kubernetes-validations:
                        - message: Can only define one namespace selector - either
                            'include' or 'exclude'
                          rule: '!((has(self.include) && size(self.include) != 0)
                            && (has(self.exclude) && size(self.exclude) != 0))'
                    type: object
                  otlp:
                    description: OTLP input configures the push endpoint to receive
                      metrics from an OTLP source.
                    properties:
                      disabled:
                        description: If set to `true`, no push-based OTLP signals
                          are collected. The default is `false`.
                        type: boolean
                      namespaces:
                        description: Namespaces describes whether push-based OTLP
                          signals from specific namespaces are selected. System namespaces
                          are enabled by default.
                        properties:
                          exclude:
                            description: Exclude signals from the specified Namespace
                              names only.
                            items:
                              type: string
                            type: array
                          include:
                            description: Include signals from the specified Namespace
                              names only.
                            items:
                              type: string
                            type: array
                        type: object
                        x-kubernetes-validations:
                        - message: Can only define one namespace selector - either
                            'include' or 'exclude'
                          rule: '!((has(self.include) && size(self.include) != 0)
                            && (has(self.exclude) && size(self.exclude) != 0))'
                    type: object
                  prometheus:
                    description: Prometheus input configures collection of application
                      metrics in the pull-based Prometheus protocol using endpoint
                      discovery based on annotations.
                    properties:
                      diagnosticMetrics:
                        description: DiagnosticMetrics configures collection of additional
                          diagnostic metrics. The default is `false`.
                        properties:
                          enabled:
                            description: If enabled, diagnostic metrics are collected.
                              The default is `false`.
                            type: boolean
                        type: object
                      enabled:
                        description: Enabled specifies whether Service endpoints and
                          Pods marked with `prometheus.io/scrape=true` annotation
                          are scraped. The default is `false`.
                        type: boolean
                      namespaces:
                        description: Namespaces specifies from which namespaces metrics
                          are collected. By default, all namespaces except the system
                          namespaces are enabled. To enable all namespaces including
                          system namespaces, use an empty struct notation.
                        properties:
                          exclude:
                            description: Exclude signals from the specified Namespace
                              names only.
                            items:
                              type: string
                            type: array
                          include:
                            description: Include signals from the specified Namespace
                              names only.
                            items:
                              type: string
                            type: array
                        type: object
                        x-kubernetes-validations:
                        - message: Can only define one namespace selector - either
                            'include' or 'exclude'
                          rule: '!((has(self.include) && size(self.include) != 0)
                            && (has(self.exclude) && size(self.exclude) != 0))'
                    type: object
                  runtime:
                    description: Runtime input configures collection of Kubernetes
                      runtime metrics.
                    properties:
                      enabled:
                        description: Enabled specifies whether runtime metrics are
                          collected. The default is `false`.
                        type: boolean
                      namespaces:
                        description: Namespaces specifies from which namespaces metrics
                          are collected. By default, all namespaces except the system
                          namespaces are enabled. To enable all namespaces including
                          system namespaces, use an empty struct notation.
                        properties:
                          exclude:
                            description: Exclude signals from the specified Namespace
                              names only.
                            items:
                              type: string
                            type: array
                          include:
                            description: Include signals from the specified Namespace
                              names only.
                            items:
                              type: string
                            type: array
                        type: object
                        x-kubernetes-validations:
                        - message: Can only define one namespace selector - either
                            'include' or 'exclude'
                          rule: '!((has(self.include) && size(self.include) != 0)
                            && (has(self.exclude) && size(self.exclude) != 0))'
                      resources:
                        description: Resources configures the Kubernetes resource
                          types for which metrics are collected.
                        properties:
                          container:
                            description: Container configures container runtime metrics
                              collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics
                                  for the resource type are collected. The default
                                  is `true`.
                                type: boolean
                            type: object
                          daemonset:
                            description: DaemonSet configures DaemonSet runtime metrics
                              collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics
                                  for the resource type are collected. The default
                                  is `true`.
                                type: boolean
                            type: object
                          deployment:
                            description: Deployment configures Deployment runtime
                              metrics collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics
                                  for the resource type are collected. The default
                                  is `true`.
                                type: boolean
                            type: object
                          job:
                            description: Job configures Job runtime metrics collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics
                                  for the resource type are collected. The default
                                  is `true`.
                                type: boolean
                            type: object
                          node:
                            description: Node configures Node runtime metrics collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics
                                  for the resource type are collected. The default
                                  is `true`.
                                type: boolean
                            type: object
                          pod:
                            description: Pod configures Pod runtime metrics collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics
                                  for the resource type are collected. The default
                                  is `true`.
                                type: boolean
                            type: object
                          statefulset:
                            description: StatefulSet configures StatefulSet runtime
                              metrics collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics
                                  for the resource type are collected. The default
                                  is `true`.
                                type: boolean
                            type: object
                          volume:
                            description: Volume configures Volume runtime metrics
                              collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics
                                  for the resource type are collected. The default
                                  is `true`.
                                type: boolean
                            type: object
                        type: object
                    type: object
                type: object
              output:
                description: Output configures the backend to which metrics are sent.
                  You must specify exactly one output per pipeline.
                properties:
                  otlp:
                    description: OTLP output defines an output using the OpenTelemetry
                      protocol.
                    properties:
                      authentication:
                        description: Authentication defines authentication options
                          for the OTLP output
                        properties:
                          basic:
                            description: Basic activates `Basic` authentication for
                              the destination providing relevant Secrets.
                            properties:
                              password:
                                description: Password contains the basic auth password
                                  or a Secret reference.
                                properties:
                                  value:
                                    description: Value as plain text.
                                    type: string
                                  valueFrom:
                                    description: ValueFrom is the value as a reference
                                      to a resource.
                                    properties:
                                      secretKeyRef:
                                        description: SecretKeyRef refers to the value
                                          of a specific key in a Secret. You must
                                          provide `name` and `namespace` of the Secret,
                                          as well as the name of the `key`.
                                        properties:
                                          key:
                                            description: Key defines the name of the
                                              attribute of the Secret holding the
                                              referenced value.
                                            type: string
                                          name:
                                            description: Name of the Secret containing
                                              the referenced value.
                                            type: string
                                          namespace:
                                            description: Namespace containing the
                                              Secret with the referenced value.
                                            type: string
                                        required:
                                        - key
                                        - name
                                        - namespace
                                        type: object
                                    type: object
                                type: object
                              user:
                                description: User contains the basic auth username
                                  or a Secret reference.
                                properties:
                                  value:
                                    description: Value as plain text.
                                    type: string
                                  valueFrom:
                                    description: ValueFrom is the value as a reference
                                      to a resource.
                                    properties:
                                      secretKeyRef:
                                        description: SecretKeyRef refers to the value
                                          of a specific key in a Secret. You must
                                          provide `name` and `namespace` of the Secret,
                                          as well as the name of the `key`.
                                        properties:
                                          key:
                                            description: Key defines the name of the
                                              attribute of the Secret holding the
                                              referenced value.
                                            type: string
                                          name:
                                            description: Name of the Secret containing
                                              the referenced value.
                                            type: string
                                          namespace:
                                            description: Namespace containing the
                                              Secret with the referenced value.
                                            type: string
                                        required:
                                        - key
                                        - name
                                        - namespace
                                        type: object
                                    type: object
                                type: object
                            required:
                            - password
                            - user
                            type: object
                        type: object
                      endpoint:
                        description: Endpoint defines the host and port (<host>:<port>)
                          of an OTLP endpoint.
                        properties:
                          value:
                            description: Value as plain text.
                            type: string
                          valueFrom:
                            description: ValueFrom is the value as a reference to
                              a resource.
                            properties:
                              secretKeyRef:
                                description: SecretKeyRef refers to the value of a
                                  specific key in a Secret. You must provide `name`
                                  and `namespace` of the Secret, as well as the name
                                  of the `key`.
                                properties:
                                  key:
                                    description: Key defines the name of the attribute
                                      of the Secret holding the referenced value.
                                    type: string
                                  name:
                                    description: Name of the Secret containing the
                                      referenced value.
                                    type: string
                                  namespace:
                                    description: Namespace containing the Secret with
                                      the referenced value.
                                    type: string
                                required:
                                - key
                                - name
                                - namespace
                                type: object
                            type: object
                        type: object
                      headers:
                        description: Headers defines custom headers to be added to
                          outgoing HTTP or gRPC requests.
                        items:
                          properties:
                            name:
                              description: Name defines the header name.
                              type: string
                            prefix:
                              description: Prefix defines an optional header value
                                prefix. The prefix is separated from the value by
                                a space character.
                              type: string
                            value:
                              description: Value as plain text.
                              type: string
                            valueFrom:
                              description: ValueFrom is the value as a reference to
                                a resource.
                              properties:
                                secretKeyRef:
                                  description: SecretKeyRef refers to the value of
                                    a specific key in a Secret. You must provide `name`
                                    and `namespace` of the Secret, as well as the
                                    name of the `key`.
                                  properties:
                                    key:
                                      description: Key defines the name of the attribute
                                        of the Secret holding the referenced value.
                                      type: string
                                    name:
                                      description: Name of the Secret containing the
                                        referenced value.
                                      type: string
                                    namespace:
                                      description: Namespace containing the Secret
                                        with the referenced value.
                                      type: string
                                  required:
                                  - key
                                  - name
                                  - namespace
                                  type: object
                              type: object
                          required:
                          - name
                          type: object
                        type: array
                      path:
                        description: Path defines OTLP export URL path (only for the
                          HTTP protocol). This value overrides auto-appended paths
                          `/v1/metrics` and `/v1/traces`
                        type: string
                      protocol:
                        description: Protocol defines the OTLP protocol (`http` or
                          `grpc`). Default is `grpc`.
                        enum:
                        - grpc
                        - http
                        minLength: 1
                        type: string
                      tls:
                        description: TLS defines TLS options for the OTLP output.
                        properties:
                          ca:
                            description: Defines an optional CA certificate for server
                              certificate verification when using TLS. The certificate
                              must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference
                                  to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value
                                      of a specific key in a Secret. You must provide
                                      `name` and `namespace` of the Secret, as well
                                      as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute
                                          of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing
                                          the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret
                                          with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                          cert:
                            description: Defines a client certificate to use when
                              using TLS. The certificate must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference
                                  to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value
                                      of a specific key in a Secret. You must provide
                                      `name` and `namespace` of the Secret, as well
                                      as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute
                                          of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing
                                          the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret
                                          with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                          insecure:
                            description: Insecure defines whether to send requests
                              using plaintext instead of TLS.
                            type: boolean
                          insecureSkipVerify:
                            description: InsecureSkipVerify defines whether to skip
                              server certificate verification when using TLS.
                            type: boolean
                          key:
                            description: Defines the client key to use when using
                              TLS. The key must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference
                                  to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value
                                      of a specific key in a Secret. You must provide
                                      `name` and `namespace` of the Secret, as well
                                      as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute
                                          of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing
                                          the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret
                                          with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                        type: object
                        x-kubernetes-validations:
                        - message: Can define either both 'cert' and 'key', or neither
                          rule: has(self.cert) == has(self.key)
                    required:
                    - endpoint
                    type: object
                    x-kubernetes-validations:
                    - message: Path is only available with HTTP protocol
                      rule: ((!has(self.path) || size(self.path) <= 0) && (has(self.protocol)
                        && self.protocol == 'grpc')) || (has(self.protocol) && self.protocol
                        == 'http')
                required:
                - otlp
                type: object
              transform:
                description: Transforms specify a list of transformations to apply
                  to telemetry data.
                items:
                  description: TransformSpec defines a transformation to apply to
                    telemetry data.
                  properties:
                    conditions:
                      description: Conditions specify a list of multiple where clauses,
                        which will be processed as global conditions for the accompanying
                        set of statements. The conditions are ORed together, which
                        means only one condition needs to evaluate to true in order
                        for the statements (including their individual where clauses)
                        to be executed.
                      items:
                        type: string
                      type: array
                    statements:
                      description: Statements specify a list of OTTL statements to
                        perform the transformation.
                      items:
                        type: string
                      type: array
                  type: object
                type: array
            type: object
          status:
            description: Status represents the current information/status of MetricPipeline.
            properties:
              conditions:
                description: An array of conditions describing the status of the pipeline.
                items:
                  description: Condition contains details for one aspect of the current
                    state of this API Resource.
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=="ConfigurationGenerated")].status
      name: Configuration Generated
      type: string
    - jsonPath: .status.conditions[?(@.type=="GatewayHealthy")].status
      name: Gateway Healthy
      type: string
    - jsonPath: .status.conditions[?(@.type=="AgentHealthy")].status
      name: Agent Healthy
      type: string
    - jsonPath: .status.conditions[?(@.type=="TelemetryFlowHealthy")].status
      name: Flow Healthy
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: MetricPipeline is the Schema for the metricpipelines API.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: Spec defines the desired characteristics of MetricPipeline.
            properties:
              input:
                description: Input configures additional inputs for metric collection.
                properties:
                  istio:
                    description: Istio input configures collection of Istio metrics
                      from applications running in the Istio service mesh.
                    properties:
                      diagnosticMetrics:
                        description: DiagnosticMetrics configures collection of additional
                          diagnostic metrics. The default is `false`.
                        properties:
                          enabled:
                            description: If enabled, diagnostic metrics are collected.
                              The default is `false`.
                            type: boolean
                        type: object
                      enabled:
                        description: Enabled specifies that istio-proxy metrics are
                          scraped from Pods that have the istio-proxy sidecar injected.
                          The default is `false`.
                        type: boolean
                      envoyMetrics:
                        description: EnvoyMetrics enables the collection of additional
                          Envoy metrics with prefix `envoy_`. The default is `false`.
                        properties:
                          enabled:
                            description: Enabled specifies that Envoy metrics with
                              prefix `envoy_` are scraped additionally. The default
                              is `false`.
                            type: boolean
                        type: object
                      namespaces:
                        description: Namespaces configures the namespaces for which
                          the collection should be activated. By default, all namespaces
                          including system namespaces are enabled.
                        properties:
                          exclude:
                            description: Exclude signals from the specified Namespace
                              names only.
                            items:
                              type: string
                            type: array
                          include:
                            description: Include signals from the specified Namespace
                              names only.
                            items:
                              type: string
                            type: array
                        type: object
                        x-kubernetes-validations:
                        - message: Can only define one namespace selector - either
                            'include' or 'exclude'
                          rule: '!((has(self.include) && size(self.include) != 0)
                            && (has(self.exclude) && size(self.exclude) != 0))'
                    type: object
                  otlp:
                    description: OTLP input configures the push endpoint to receive
                      metrics from an OTLP source.
                    properties:
                      disabled:
                        description: If set to `true`, no push-based OTLP signals
                          are collected. The default is `false`.
                        type: boolean
                      namespaces:
                        description: Namespaces describes whether push-based OTLP
                          signals from specific namespaces are selected. System namespaces
                          are enabled by default.
                        properties:
                          exclude:
                            description: Exclude signals from the specified Namespace
                              names only.
                            items:
                              type: string
                            type: array
                          include:
                            description: Include signals from the specified Namespace
                              names only.
                            items:
                              type: string
                            type: array
                        type: object
                        x-kubernetes-validations:
                        - message: Can only define one namespace selector - either
                            'include' or 'exclude'
                          rule: '!((has(self.include) && size(self.include) != 0)
                            && (has(self.exclude) && size(self.exclude) != 0))'
                    type: object
                  prometheus:
                    description: Prometheus input configures collection of application
                      metrics in the pull-based Prometheus protocol using endpoint
                      discovery based on annotations.
                    properties:
                      diagnosticMetrics:
                        description: DiagnosticMetrics configures collection of additional
                          diagnostic metrics. The default is `false`.
                        properties:
                          enabled:
                            description: If enabled, diagnostic metrics are collected.
                              The default is `false`.
                            type: boolean
                        type: object
                      enabled:
                        description: Enabled specifies whether Service endpoints and
                          Pods marked with `prometheus.io/scrape=true` annotation
                          are scraped. The default is `false`.
                        type: boolean
                      namespaces:
                        description: Namespaces specifies from which namespaces metrics
                          are collected. By default, all namespaces except the system
                          namespaces are enabled. To enable all namespaces including
                          system namespaces, use an empty struct notation.
                        properties:
                          exclude:
                            description: Exclude signals from the specified Namespace
                              names only.
                            items:
                              type: string
                            type: array
                          include:
                            description: Include signals from the specified Namespace
                              names only.
                            items:
                              type: string
                            type: array
                        type: object
                        x-kubernetes-validations:
                        - message: Can only define one namespace selector - either
                            'include' or 'exclude'
                          rule: '!((has(self.include) && size(self.include) != 0)
                            && (has(self.exclude) && size(self.exclude) != 0))'
                    type: object
                  runtime:
                    description: Runtime input configures collection of Kubernetes
                      runtime metrics.
                    properties:
                      enabled:
                        description: Enabled specifies whether runtime metrics are
                          collected. The default is `false`.
                        type: boolean
                      namespaces:
                        description: Namespaces specifies from which namespaces metrics
                          are collected. By default, all namespaces except the system
                          namespaces are enabled. To enable all namespaces including
                          system namespaces, use an empty struct notation.
                        properties:
                          exclude:
                            description: Exclude signals from the specified Namespace
                              names only.
                            items:
                              type: string
                            type: array
                          include:
                            description: Include signals from the specified Namespace
                              names only.
                            items:
                              type: string
                            type: array
                        type: object
                        x-kubernetes-validations:
                        - message: Can only define one namespace selector - either
                            'include' or 'exclude'
                          rule: '!((has(self.include) && size(self.include) != 0)
                            && (has(self.exclude) && size(self.exclude) != 0))'
                      resources:
                        description: Resources configures the Kubernetes resource
                          types for which metrics are collected.
                        properties:
                          container:
                            description: Container configures container runtime metrics
                              collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics
                                  for the resource type are collected. The default
                                  is `true`.
                                type: boolean
                            type: object
                          daemonset:
                            description: DaemonSet configures DaemonSet runtime metrics
                              collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics
                                  for the resource type are collected. The default
                                  is `true`.
                                type: boolean
                            type: object
                          deployment:
                            description: Deployment configures Deployment runtime
                              metrics collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics
                                  for the resource type are collected. The default
                                  is `true`.
                                type: boolean
                            type: object
                          job:
                            description: Job configures Job runtime metrics collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics
                                  for the resource type are collected. The default
                                  is `true`.
                                type: boolean
                            type: object
                          node:
                            description: Node configures Node runtime metrics collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics
                                  for the resource type are collected. The default
                                  is `true`.
                                type: boolean
                            type: object
                          pod:
                            description: Pod configures Pod runtime metrics collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics
                                  for the resource type are collected. The default
                                  is `true`.
                                type: boolean
                            type: object
                          statefulset:
                            description: StatefulSet configures StatefulSet runtime
                              metrics collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics
                                  for the resource type are collected. The default
                                  is `true`.
                                type: boolean
                            type: object
                          volume:
                            description: Volume configures Volume runtime metrics
                              collection.
                            properties:
                              enabled:
                                description: Enabled specifies that the runtime metrics
                                  for the resource type are collected. The default
                                  is `true`.
                                type: boolean
                            type: object
                        type: object
                    type: object
                type: object
              output:
                description: Output configures the backend to which metrics are sent.
                  You must specify exactly one output per pipeline.
                properties:
                  otlp:
                    description: OTLP output defines an output using the OpenTelemetry
                      protocol.
                    properties:
                      authentication:
                        description: Authentication defines authentication options
                          for the OTLP output
                        properties:
                          basic:
                            description: Basic activates `Basic` authentication for
                              the destination providing relevant Secrets.
                            properties:
                              password:
                                description: Password contains the basic auth password
                                  or a Secret reference.
                                properties:
                                  value:
                                    description: Value as plain text.
                                    type: string
                                  valueFrom:
                                    description: ValueFrom is the value as a reference
                                      to a resource.
                                    properties:
                                      secretKeyRef:
                                        description: SecretKeyRef refers to the value
                                          of a specific key in a Secret. You must
                                          provide `name` and `namespace` of the Secret,
                                          as well as the name of the `key`.
                                        properties:
                                          key:
                                            description: Key defines the name of the
                                              attribute of the Secret holding the
                                              referenced value.
                                            type: string
                                          name:
                                            description: Name of the Secret containing
                                              the referenced value.
                                            type: string
                                          namespace:
                                            description: Namespace containing the
                                              Secret with the referenced value.
                                            type: string
                                        required:
                                        - key
                                        - name
                                        - namespace
                                        type: object
                                    type: object
                                type: object
                              user:
                                description: User contains the basic auth username
                                  or a Secret reference.
                                properties:
                                  value:
                                    description: Value as plain text.
                                    type: string
                                  valueFrom:
                                    description: ValueFrom is the value as a reference
                                      to a resource.
                                    properties:
                                      secretKeyRef:
                                        description: SecretKeyRef refers to the value
                                          of a specific key in a Secret. You must
                                          provide `name` and `namespace` of the Secret,
                                          as well as the name of the `key`.
                                        properties:
                                          key:
                                            description: Key defines the name of the
                                              attribute of the Secret holding the
                                              referenced value.
                                            type: string
                                          name:
                                            description: Name of the Secret containing
                                              the referenced value.
                                            type: string
                                          namespace:
                                            description: Namespace containing the
                                              Secret with the referenced value.
                                            type: string
                                        required:
                                        - key
                                        - name
                                        - namespace
                                        type: object
                                    type: object
                                type: object
                            required:
                            - password
                            - user
                            type: object
                        type: object
                      endpoint:
                        description: Endpoint defines the host and port (<host>:<port>)
                          of an OTLP endpoint.
                        properties:
                          value:
                            description: Value as plain text.
                            type: string
                          valueFrom:
                            description: ValueFrom is the value as a reference to
                              a resource.
                            properties:
                              secretKeyRef:
                                description: SecretKeyRef refers to the value of a
                                  specific key in a Secret. You must provide `name`
                                  and `namespace` of the Secret, as well as the name
                                  of the `key`.
                                properties:
                                  key:
                                    description: Key defines the name of the attribute
                                      of the Secret holding the referenced value.
                                    type: string
                                  name:
                                    description: Name of the Secret containing the
                                      referenced value.
                                    type: string
                                  namespace:
                                    description: Namespace containing the Secret with
                                      the referenced value.
                                    type: string
                                required:
                                - key
                                - name
                                - namespace
                                type: object
                            type: object
                        type: object
                      headers:
                        description: Headers defines custom headers to be added to
                          outgoing HTTP or gRPC requests.
                        items:
                          properties:
                            name:
                              description: Name defines the header name.
                              type: string
                            prefix:
                              description: Prefix defines an optional header value
                                prefix. The prefix is separated from the value by
                                a space character.
                              type: string
                            value:
                              description: Value as plain text.
                              type: string
                            valueFrom:
                              description: ValueFrom is the value as a reference to
                                a resource.
                              properties:
                                secretKeyRef:
                                  description: SecretKeyRef refers to the value of
                                    a specific key in a Secret. You must provide `name`
                                    and `namespace` of the Secret, as well as the
                                    name of the `key`.
                                  properties:
                                    key:
                                      description: Key defines the name of the attribute
                                        of the Secret holding the referenced value.
                                      type: string
                                    name:
                                      description: Name of the Secret containing the
                                        referenced value.
                                      type: string
                                    namespace:
                                      description: Namespace containing the Secret
                                        with the referenced value.
                                      type: string
                                  required:
                                  - key
                                  - name
                                  - namespace
                                  type: object
                              type: object
                          required:
                          - name
                          type: object
                        type: array
                      path:
                        description: Path defines OTLP export URL path (only for the
                          HTTP protocol). This value overrides auto-appended paths
                          `/v1/metrics` and `/v1/traces`
                        type: string
                      protocol:
                        description: Protocol defines the OTLP protocol (`http` or
                          `grpc`). Default is `grpc``.
                        enum:
                        - grpc
                        - http
                        type: string
                      tls:
                        description: TLS defines TLS options for the OTLP output.
                        properties:
                          ca:
                            description: Defines an optional CA certificate for server
                              certificate verification when using TLS. The certificate
                              must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference
                                  to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value
                                      of a specific key in a Secret. You must provide
                                      `name` and `namespace` of the Secret, as well
                                      as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute
                                          of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing
                                          the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret
                                          with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                          cert:
                            description: Defines a client certificate to use when
                              using TLS. The certificate must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference
                                  to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value
                                      of a specific key in a Secret. You must provide
                                      `name` and `namespace` of the Secret, as well
                                      as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute
                                          of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing
                                          the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret
                                          with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                          disabled:
                            description: Disabled specifies if TLS is disabled or
                              enabled. Default is `false`.
                            type: boolean
                          key:
                            description: Defines the client key to use when using
                              TLS. The key must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference
                                  to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value
                                      of a specific key in a Secret. You must provide
                                      `name` and `namespace` of the Secret, as well
                                      as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute
                                          of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing
                                          the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret
                                          with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                          skipCertificateValidation:
                            description: If `true`, the validation of certificates
                              is skipped. Default is `false`.
                            type: boolean
                        type: object
                        x-kubernetes-validations:
                        - message: Can define either both 'cert' and 'key', or neither
                          rule: has(self.cert) == has(self.key)
                    required:
                    - endpoint
                    type: object
                    x-kubernetes-validations:
                    - message: Path is only available with HTTP protocol
                      rule: ((!has(self.path) || size(self.path) <= 0) && (has(self.protocol)
                        && self.protocol == 'grpc')) || (has(self.protocol) && self.protocol
                        == 'http')
                required:
                - otlp
                type: object
              transform:
                description: Transforms specify a list of transformations to apply
                  to telemetry data.
                items:
                  description: TransformSpec defines a transformation to apply to
                    telemetry data.
                  properties:
                    conditions:
                      description: Conditions specify a list of multiple where clauses,
                        which will be processed as global conditions for the accompanying
                        set of statements. The conditions are ORed together, which
                        means only one condition needs to evaluate to true in order
                        for the statements (including their individual where clauses)
                        to be executed.
                      items:
                        type: string
                      type: array
                    statements:
                      description: Statements specify a list of OTTL statements to
                        perform the transformation.
                      items:
                        type: string
                      type: array
                  type: object
                type: array
            type: object
          status:
            description: Status represents the current information/status of MetricPipeline.
            properties:
              conditions:
                description: An array of conditions describing the status of the pipeline.
                items:
                  description: Condition contains details for one aspect of the current
                    state of this API Resource.
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
# Source: telemetry-manager/charts/experimental/templates/telemetry.kyma-project.io_tracepipelines.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.18.0
  name: tracepipelines.telemetry.kyma-project.io
spec:
  group: telemetry.kyma-project.io
  names:
    categories:
    - kyma-telemetry
    - kyma-telemetry-pipelines
    kind: TracePipeline
    listKind: TracePipelineList
    plural: tracepipelines
    singular: tracepipeline
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=="ConfigurationGenerated")].status
      name: Configuration Generated
      type: string
    - jsonPath: .status.conditions[?(@.type=="GatewayHealthy")].status
      name: Gateway Healthy
      type: string
    - jsonPath: .status.conditions[?(@.type=="TelemetryFlowHealthy")].status
      name: Flow Healthy
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: TracePipeline is the Schema for the tracepipelines API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: Spec defines the desired state of TracePipeline
            properties:
              output:
                description: Output configures the backend to which traces  are sent.
                  You must specify exactly one output per pipeline.
                properties:
                  otlp:
                    description: OTLP output defines an output using the OpenTelemetry
                      protocol.
                    properties:
                      authentication:
                        description: Authentication defines authentication options
                          for the OTLP output
                        properties:
                          basic:
                            description: Basic activates `Basic` authentication for
                              the destination providing relevant Secrets.
                            properties:
                              password:
                                description: Password contains the basic auth password
                                  or a Secret reference.
                                properties:
                                  value:
                                    description: Value as plain text.
                                    type: string
                                  valueFrom:
                                    description: ValueFrom is the value as a reference
                                      to a resource.
                                    properties:
                                      secretKeyRef:
                                        description: SecretKeyRef refers to the value
                                          of a specific key in a Secret. You must
                                          provide `name` and `namespace` of the Secret,
                                          as well as the name of the `key`.
                                        properties:
                                          key:
                                            description: Key defines the name of the
                                              attribute of the Secret holding the
                                              referenced value.
                                            type: string
                                          name:
                                            description: Name of the Secret containing
                                              the referenced value.
                                            type: string
                                          namespace:
                                            description: Namespace containing the
                                              Secret with the referenced value.
                                            type: string
                                        required:
                                        - key
                                        - name
                                        - namespace
                                        type: object
                                    type: object
                                type: object
                              user:
                                description: User contains the basic auth username
                                  or a Secret reference.
                                properties:
                                  value:
                                    description: Value as plain text.
                                    type: string
                                  valueFrom:
                                    description: ValueFrom is the value as a reference
                                      to a resource.
                                    properties:
                                      secretKeyRef:
                                        description: SecretKeyRef refers to the value
                                          of a specific key in a Secret. You must
                                          provide `name` and `namespace` of the Secret,
                                          as well as the name of the `key`.
                                        properties:
                                          key:
                                            description: Key defines the name of the
                                              attribute of the Secret holding the
                                              referenced value.
                                            type: string
                                          name:
                                            description: Name of the Secret containing
                                              the referenced value.
                                            type: string
                                          namespace:
                                            description: Namespace containing the
                                              Secret with the referenced value.
                                            type: string
                                        required:
                                        - key
                                        - name
                                        - namespace
                                        type: object
                                    type: object
                                type: object
                            required:
                            - password
                            - user
                            type: object
                        type: object
                      endpoint:
                        description: Endpoint defines the host and port (<host>:<port>)
                          of an OTLP endpoint.
                        properties:
                          value:
                            description: Value as plain text.
                            type: string
                          valueFrom:
                            description: ValueFrom is the value as a reference to
                              a resource.
                            properties:
                              secretKeyRef:
                                description: SecretKeyRef refers to the value of a
                                  specific key in a Secret. You must provide `name`
                                  and `namespace` of the Secret, as well as the name
                                  of the `key`.
                                properties:
                                  key:
                                    description: Key defines the name of the attribute
                                      of the Secret holding the referenced value.
                                    type: string
                                  name:
                                    description: Name of the Secret containing the
                                      referenced value.
                                    type: string
                                  namespace:
                                    description: Namespace containing the Secret with
                                      the referenced value.
                                    type: string
                                required:
                                - key
                                - name
                                - namespace
                                type: object
                            type: object
                        type: object
                      headers:
                        description: Headers defines custom headers to be added to
                          outgoing HTTP or gRPC requests.
                        items:
                          properties:
                            name:
                              description: Name defines the header name.
                              type: string
                            prefix:
                              description: Prefix defines an optional header value
                                prefix. The prefix is separated from the value by
                                a space character.
                              type: string
                            value:
                              description: Value as plain text.
                              type: string
                            valueFrom:
                              description: ValueFrom is the value as a reference to
                                a resource.
                              properties:
                                secretKeyRef:
                                  description: SecretKeyRef refers to the value of
                                    a specific key in a Secret. You must provide `name`
                                    and `namespace` of the Secret, as well as the
                                    name of the `key`.
                                  properties:
                                    key:
                                      description: Key defines the name of the attribute
                                        of the Secret holding the referenced value.
                                      type: string
                                    name:
                                      description: Name of the Secret containing the
                                        referenced value.
                                      type: string
                                    namespace:
                                      description: Namespace containing the Secret
                                        with the referenced value.
                                      type: string
                                  required:
                                  - key
                                  - name
                                  - namespace
                                  type: object
                              type: object
                          required:
                          - name
                          type: object
                        type: array
                      path:
                        description: Path defines OTLP export URL path (only for the
                          HTTP protocol). This value overrides auto-appended paths
                          `/v1/metrics` and `/v1/traces`
                        type: string
                      protocol:
                        description: Protocol defines the OTLP protocol (`http` or
                          `grpc`). Default is `grpc`.
                        enum:
                        - grpc
                        - http
                        minLength: 1
                        type: string
                      tls:
                        description: TLS defines TLS options for the OTLP output.
                        properties:
                          ca:
                            description: Defines an optional CA certificate for server
                              certificate verification when using TLS. The certificate
                              must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference
                                  to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value
                                      of a specific key in a Secret. You must provide
                                      `name` and `namespace` of the Secret, as well
                                      as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute
                                          of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing
                                          the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret
                                          with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                          cert:
                            description: Defines a client certificate to use when
                              using TLS. The certificate must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference
                                  to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value
                                      of a specific key in a Secret. You must provide
                                      `name` and `namespace` of the Secret, as well
                                      as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute
                                          of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing
                                          the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret
                                          with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                          insecure:
                            description: Insecure defines whether to send requests
                              using plaintext instead of TLS.
                            type: boolean
                          insecureSkipVerify:
                            description: InsecureSkipVerify defines whether to skip
                              server certificate verification when using TLS.
                            type: boolean
                          key:
                            description: Defines the client key to use when using
                              TLS. The key must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference
                                  to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value
                                      of a specific key in a Secret. You must provide
                                      `name` and `namespace` of the Secret, as well
                                      as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute
                                          of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing
                                          the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret
                                          with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                        type: object
                        x-kubernetes-validations:
                        - message: Can define either both 'cert' and 'key', or neither
                          rule: has(self.cert) == has(self.key)
                    required:
                    - endpoint
                    type: object
                    x-kubernetes-validations:
                    - message: Path is only available with HTTP protocol
                      rule: ((!has(self.path) || size(self.path) <= 0) && (has(self.protocol)
                        && self.protocol == 'grpc')) || (has(self.protocol) && self.protocol
                        == 'http')
                required:
                - otlp
                type: object
              transform:
                description: Transforms specify a list of transformations to apply
                  to telemetry data.
                items:
                  description: TransformSpec defines a transformation to apply to
                    telemetry data.
                  properties:
                    conditions:
                      description: Conditions specify a list of multiple where clauses,
                        which will be processed as global conditions for the accompanying
                        set of statements. The conditions are ORed together, which
                        means only one condition needs to evaluate to true in order
                        for the statements (including their individual where clauses)
                        to be executed.
                      items:
                        type: string
                      type: array
                    statements:
                      description: Statements specify a list of OTTL statements to
                        perform the transformation.
                      items:
                        type: string
                      type: array
                  type: object
                type: array
            required:
            - output
            type: object
          status:
            description: Status shows the observed state of the TracePipeline
            properties:
              conditions:
                description: An array of conditions describing the status of the pipeline.
                items:
                  description: Condition contains details for one aspect of the current
                    state of this API Resource.
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=="ConfigurationGenerated")].status
      name: Configuration Generated
      type: string
    - jsonPath: .status.conditions[?(@.type=="GatewayHealthy")].status
      name: Gateway Healthy
      type: string
    - jsonPath: .status.conditions[?(@.type=="TelemetryFlowHealthy")].status
      name: Flow Healthy
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: TracePipeline is the Schema for the tracepipelines API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: Spec defines the desired state of TracePipeline
            properties:
              output:
                description: Output configures the backend to which traces  are sent.
                  You must specify exactly one output per pipeline.
                properties:
                  otlp:
                    description: OTLP output defines an output using the OpenTelemetry
                      protocol.
                    properties:
                      authentication:
                        description: Authentication defines authentication options
                          for the OTLP output
                        properties:
                          basic:
                            description: Basic activates `Basic` authentication for
                              the destination providing relevant Secrets.
                            properties:
                              password:
                                description: Password contains the basic auth password
                                  or a Secret reference.
                                properties:
                                  value:
                                    description: Value as plain text.
                                    type: string
                                  valueFrom:
                                    description: ValueFrom is the value as a reference
                                      to a resource.
                                    properties:
                                      secretKeyRef:
                                        description: SecretKeyRef refers to the value
                                          of a specific key in a Secret. You must
                                          provide `name` and `namespace` of the Secret,
                                          as well as the name of the `key`.
                                        properties:
                                          key:
                                            description: Key defines the name of the
                                              attribute of the Secret holding the
                                              referenced value.
                                            type: string
                                          name:
                                            description: Name of the Secret containing
                                              the referenced value.
                                            type: string
                                          namespace:
                                            description: Namespace containing the
                                              Secret with the referenced value.
                                            type: string
                                        required:
                                        - key
                                        - name
                                        - namespace
                                        type: object
                                    type: object
                                type: object
                              user:
                                description: User contains the basic auth username
                                  or a Secret reference.
                                properties:
                                  value:
                                    description: Value as plain text.
                                    type: string
                                  valueFrom:
                                    description: ValueFrom is the value as a reference
                                      to a resource.
                                    properties:
                                      secretKeyRef:
                                        description: SecretKeyRef refers to the value
                                          of a specific key in a Secret. You must
                                          provide `name` and `namespace` of the Secret,
                                          as well as the name of the `key`.
                                        properties:
                                          key:
                                            description: Key defines the name of the
                                              attribute of the Secret holding the
                                              referenced value.
                                            type: string
                                          name:
                                            description: Name of the Secret containing
                                              the referenced value.
                                            type: string
                                          namespace:
                                            description: Namespace containing the
                                              Secret with the referenced value.
                                            type: string
                                        required:
                                        - key
                                        - name
                                        - namespace
                                        type: object
                                    type: object
                                type: object
                            required:
                            - password
                            - user
                            type: object
                        type: object
                      endpoint:
                        description: Endpoint defines the host and port (<host>:<port>)
                          of an OTLP endpoint.
                        properties:
                          value:
                            description: Value as plain text.
                            type: string
                          valueFrom:
                            description: ValueFrom is the value as a reference to
                              a resource.
                            properties:
                              secretKeyRef:
                                description: SecretKeyRef refers to the value of a
                                  specific key in a Secret. You must provide `name`
                                  and `namespace` of the Secret, as well as the name
                                  of the `key`.
                                properties:
                                  key:
                                    description: Key defines the name of the attribute
                                      of the Secret holding the referenced value.
                                    type: string
                                  name:
                                    description: Name of the Secret containing the
                                      referenced value.
                                    type: string
                                  namespace:
                                    description: Namespace containing the Secret with
                                      the referenced value.
                                    type: string
                                required:
                                - key
                                - name
                                - namespace
                                type: object
                            type: object
                        type: object
                      headers:
                        description: Headers defines custom headers to be added to
                          outgoing HTTP or gRPC requests.
                        items:
                          properties:
                            name:
                              description: Name defines the header name.
                              type: string
                            prefix:
                              description: Prefix defines an optional header value
                                prefix. The prefix is separated from the value by
                                a space character.
                              type: string
                            value:
                              description: Value as plain text.
                              type: string
                            valueFrom:
                              description: ValueFrom is the value as a reference to
                                a resource.
                              properties:
                                secretKeyRef:
                                  description: SecretKeyRef refers to the value of
                                    a specific key in a Secret. You must provide `name`
                                    and `namespace` of the Secret, as well as the
                                    name of the `key`.
                                  properties:
                                    key:
                                      description: Key defines the name of the attribute
                                        of the Secret holding the referenced value.
                                      type: string
                                    name:
                                      description: Name of the Secret containing the
                                        referenced value.
                                      type: string
                                    namespace:
                                      description: Namespace containing the Secret
                                        with the referenced value.
                                      type: string
                                  required:
                                  - key
                                  - name
                                  - namespace
                                  type: object
                              type: object
                          required:
                          - name
                          type: object
                        type: array
                      path:
                        description: Path defines OTLP export URL path (only for the
                          HTTP protocol). This value overrides auto-appended paths
                          `/v1/metrics` and `/v1/traces`
                        type: string
                      protocol:
                        description: Protocol defines the OTLP protocol (`http` or
                          `grpc`). Default is `grpc``.
                        enum:
                        - grpc
                        - http
                        type: string
                      tls:
                        description: TLS defines TLS options for the OTLP output.
                        properties:
                          ca:
                            description: Defines an optional CA certificate for server
                              certificate verification when using TLS. The certificate
                              must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference
                                  to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value
                                      of a specific key in a Secret. You must provide
                                      `name` and `namespace` of the Secret, as well
                                      as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute
                                          of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing
                                          the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret
                                          with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                          cert:
                            description: Defines a client certificate to use when
                              using TLS. The certificate must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference
                                  to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value
                                      of a specific key in a Secret. You must provide
                                      `name` and `namespace` of the Secret, as well
                                      as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute
                                          of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing
                                          the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret
                                          with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                          disabled:
                            description: Disabled specifies if TLS is disabled or
                              enabled. Default is `false`.
                            type: boolean
                          key:
                            description: Defines the client key to use when using
                              TLS. The key must be provided in PEM format.
                            properties:
                              value:
                                description: Value as plain text.
                                type: string
                              valueFrom:
                                description: ValueFrom is the value as a reference
                                  to a resource.
                                properties:
                                  secretKeyRef:
                                    description: SecretKeyRef refers to the value
                                      of a specific key in a Secret. You must provide
                                      `name` and `namespace` of the Secret, as well
                                      as the name of the `key`.
                                    properties:
                                      key:
                                        description: Key defines the name of the attribute
                                          of the Secret holding the referenced value.
                                        type: string
                                      name:
                                        description: Name of the Secret containing
                                          the referenced value.
                                        type: string
                                      namespace:
                                        description: Namespace containing the Secret
                                          with the referenced value.
                                        type: string
                                    required:
                                    - key
                                    - name
                                    - namespace
                                    type: object
                                type: object
                            type: object
                          skipCertificateValidation:
                            description: If `true`, the validation of certificates
                              is skipped. Default is `false`.
                            type: boolean
                        type: object
                        x-kubernetes-validations:
                        - message: Can define either both 'cert' and 'key', or neither
                          rule: has(self.cert) == has(self.key)
                    required:
                    - endpoint
                    type: object
                    x-kubernetes-validations:
                    - message: Path is only available with HTTP protocol
                      rule: ((!has(self.path) || size(self.path) <= 0) && (has(self.protocol)
                        && self.protocol == 'grpc')) || (has(self.protocol) && self.protocol
                        == 'http')
                required:
                - otlp
                type: object
              transform:
                description: Transforms specify a list of transformations to apply
                  to telemetry data.
                items:
                  description: TransformSpec defines a transformation to apply to
                    telemetry data.
                  properties:
                    conditions:
                      description: Conditions specify a list of multiple where clauses,
                        which will be processed as global conditions for the accompanying
                        set of statements. The conditions are ORed together, which
                        means only one condition needs to evaluate to true in order
                        for the statements (including their individual where clauses)
                        to be executed.
                      items:
                        type: string
                      type: array
                    statements:
                      description: Statements specify a list of OTTL statements to
                        perform the transformation.
                      items:
                        type: string
                      type: array
                  type: object
                type: array
            required:
            - output
            type: object
          status:
            description: Status shows the observed state of the TracePipeline
            properties:
              conditions:
                description: An array of conditions describing the status of the pipeline.
                items:
                  description: Condition contains details for one aspect of the current
                    state of this API Resource.
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
# Source: telemetry-manager/templates/manager-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: telemetry-manager-role
rules:
  ##########################
  # Policy rules for manager
  ##########################
  - apiGroups:
      - ""
    resources:
      - secrets
      - configmaps
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - mutatingwebhookconfigurations
      - validatingwebhookconfigurations
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      - apps
    resources:
      - daemonsets
      - deployments
      - replicasets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - networkpolicies
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - operator.kyma-project.io
    resources:
      - telemetries
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - clusterrolebindings
      - clusterroles
      - rolebindings
      - roles
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - security.istio.io
    resources:
      - peerauthentications
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - telemetry.kyma-project.io
    resources:
      - logparsers
      - logpipelines
      - metricpipelines
      - tracepipelines
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - telemetry.kyma-project.io
    resources:
      - logparsers/finalizers
      - logpipelines/finalizers
      - metricpipelines/finalizers
    verbs:
      - update
  - apiGroups:
      - telemetry.kyma-project.io
    resources:
      - logparsers/status
      - logpipelines/status
      - metricpipelines/status
      - tracepipelines/status
    verbs:
      - get
      - patch
      - update

  #############################
  # Policy rules for fluent-bit
  #############################
  - apiGroups:
      - ""
    resources:
      - namespaces
      - pods
    verbs:
      - get
      - list
      - watch

  ###############################
  # Policy rules for metric-agent
  ###############################
  - apiGroups:
      - ""
    resources:
      - nodes
      - nodes/metrics
      - nodes/stats
      - nodes/proxy
      - nodes/spec
      - services
      - endpoints
      - pods
      - pods/status
      - events
      - namespaces
      - namespaces/status
      - replicationcontrollers
      - replicationcontrollers/status
      - resourcequotas
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - /metrics
      - /metrics/cadvisor
    verbs:
      - get
  - apiGroups:
      - apps
    resources:
      - daemonsets
      - deployments
      - replicasets
      - statefulsets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - daemonsets
      - deployments
      - replicasets
      - statefulsets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - batch
    resources:
      - jobs
      - cronjobs
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - autoscaling
    resources:
      - horizontalpodautoscalers
    verbs:
      - get
      - list
      - watch

  #################################
  # Policy rules for metric-gateway
  #################################
  - apiGroups:
      - ""
    resources:
      - namespaces
      - pods
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - replicasets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - operator.kyma-project.io
    resources:
      - telemetries
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - telemetry.kyma-project.io
    resources:
      - metricpipelines
      - tracepipelines
      - logpipelines
    verbs:
      - get
      - list
      - watch

  ###############################
  # Policy rules for self-monitor
  ###############################
  - apiGroups:
      - ""
    resources:
      - services
      - endpoints
      - pods
    verbs:
      - get
      - list
      - watch

  ################################
  # Policy rules for trace-gateway
  ################################
  - apiGroups:
      - ""
    resources:
      - namespaces
      - pods
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - replicasets
    verbs:
      - get
      - list
      - watch
---
# Source: telemetry-manager/templates/manager-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: telemetry-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: 'telemetry-manager-role'
subjects:
  - kind: ServiceAccount
    name: 'telemetry-manager'
    namespace: 'default'
---
# Source: telemetry-manager/templates/manager-leader-election-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: telemetry-manager-leader-election-role
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/part-of: telemetry
    kyma-project.io/module: telemetry
    
    app.kubernetes.io/managed-by: kyma
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
# Source: telemetry-manager/templates/manager-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: telemetry-manager-role
  namespace: default
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - serviceaccounts
      - services
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - create
      - delete
      - patch
      - update
  - apiGroups:
      - apps
    resources:
      - daemonsets
      - deployments
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - networkpolicies
    verbs:
      - create
      - delete
      - patch
      - update
  - apiGroups:
      - operator.kyma-project.io
    resources:
      - telemetries
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - operator.kyma-project.io
    resources:
      - telemetries/finalizers
    verbs:
      - update
  - apiGroups:
      - operator.kyma-project.io
    resources:
      - telemetries/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - security.istio.io
    resources:
      - peerauthentications
    verbs:
      - create
      - delete
      - patch
      - update
---
# Source: telemetry-manager/templates/manager-rbac.yaml
# permissions to do leader election.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: telemetry-manager-leader-election-role
  namespace: default
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
---
# Source: telemetry-manager/templates/manager-leader-election-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: telemetry-manager-leader-election-rolebinding
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/part-of: telemetry
    kyma-project.io/module: telemetry
    
    app.kubernetes.io/managed-by: kyma
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: 'telemetry-manager-leader-election-role'
subjects:
- kind: ServiceAccount
  name: 'telemetry-manager'
  namespace: 'default'
---
# Source: telemetry-manager/templates/manager-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: telemetry-manager-rolebinding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: 'telemetry-manager-role'
subjects:
  - kind: ServiceAccount
    name: 'telemetry-manager'
    namespace: 'default'
---
# Source: telemetry-manager/templates/manager-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: telemetry-manager-leader-election-rolebinding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: 'telemetry-manager-leader-election-role'
subjects:
  - kind: ServiceAccount
    name: 'telemetry-manager'
    namespace: 'default'
---
# Source: telemetry-manager/templates/manager-metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: telemetry-manager-metrics
  namespace: default
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/part-of: telemetry
    kyma-project.io/module: telemetry
    
    app.kubernetes.io/managed-by: kyma
  annotations:
    prometheus.io/port: "8080"
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/instance: telemetry
    app.kubernetes.io/name: manager
    control-plane: telemetry-manager
    kyma-project.io/component: controller
    
  ports:
  - name: http-metrics
    port: 8080
    targetPort: 8080
---
# Source: telemetry-manager/templates/manager-webhook-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: telemetry-manager-webhook
  namespace: default
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/part-of: telemetry
    kyma-project.io/module: telemetry
    
    app.kubernetes.io/managed-by: kyma
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/instance: telemetry
    app.kubernetes.io/name: manager
    control-plane: telemetry-manager
    kyma-project.io/component: controller
    
  ports:
  - port: 443
    protocol: TCP
    targetPort: 9443
---
# Source: telemetry-manager/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: telemetry-manager
  namespace: default
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/part-of: telemetry
    kyma-project.io/module: telemetry
    
    app.kubernetes.io/managed-by: kyma
spec:
  replicas: 
  selector:
    matchLabels:
      app.kubernetes.io/instance: telemetry
      app.kubernetes.io/name: manager
      control-plane: telemetry-manager
      kyma-project.io/component: controller
      
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: telemetry
        app.kubernetes.io/name: manager
        control-plane: telemetry-manager
        kyma-project.io/component: controller
        
      annotations:
        kubectl.kubernetes.io/default-container: manager
        sidecar.istio.io/inject: "false"
    spec:
      containers:
      - args:
        - --cert-dir=/tmp
        - --high-priority-class-name=telemetry-priority-class-high
        - --normal-priority-class-name=telemetry-priority-class
        - --enable-v1beta1-log-pipelines=true
        command:
        - /manager
        env:
        - name: GOMEMLIMIT
          value: "300MiB"
        - name: APP_LOG_LEVEL
          value: "info"
        - name: MANAGER_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: FLUENT_BIT_IMAGE
          value: "europe-docker.pkg.dev/kyma-project/prod/external/fluent/fluent-bit:4.0.8"
        - name: FLUENT_BIT_EXPORTER_IMAGE
          value: "europe-docker.pkg.dev/kyma-project/prod/directory-size-exporter:v20250724-d99b68f4"
        - name: OTEL_COLLECTOR_IMAGE
          value: "europe-docker.pkg.dev/kyma-project/prod/kyma-otel-collector:0.132.0-main"
        - name: SELF_MONITOR_IMAGE
          value: "europe-docker.pkg.dev/kyma-project/prod/tpi/telemetry-self-monitor:3.5.0-8d9d348"
        - name: ALPINE_IMAGE
          value: "europe-docker.pkg.dev/kyma-project/prod/external/library/alpine:3.22.1"
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: "cluster.local"
        image: europe-docker.pkg.dev/kyma-project/prod/telemetry-manager:main
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 20
        name: manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            memory: 384Mi
          requests:
            cpu: 5m
            memory: 50Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: false
        volumeMounts:
        - mountPath: /tmp
          name: crt-volume
      priorityClassName: telemetry-priority-class
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: telemetry-manager
      terminationGracePeriodSeconds: 10
      volumes:
      - emptyDir: {}
        name: crt-volume
---
# Source: telemetry-manager/templates/mutating-webhook.kyma-project.io.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: telemetry-mutating-webhook.kyma-project.io
  annotations:
    cert-manager.io/inject-ca-from: default/telemetry-
  labels:
    
    app.kubernetes.io/managed-by: kyma
webhooks:
- name: mutating-metricpipelines-v1beta1.kyma-project.io
  clientConfig:
    service:
      name: telemetry-manager-webhook
      namespace: kyma-system
      path: /mutate-telemetry-kyma-project-io-v1beta1-metricpipeline
      port: 443
  admissionReviewVersions:
    - v1beta1
    - v1
  sideEffects: None
  failurePolicy: Fail
  matchPolicy: Exact
  timeoutSeconds: 15
  namespaceSelector: {}
  objectSelector: {}
  rules:
    - apiGroups:
        - telemetry.kyma-project.io
      apiVersions:
        - v1beta1
      operations:
        - CREATE
        - UPDATE
      resources:
        - metricpipelines
      scope: '*'
- name: mutating-tracepipelines-v1beta1.kyma-project.io
  clientConfig:
    service:
      name: telemetry-manager-webhook
      namespace: kyma-system
      path: /mutate-telemetry-kyma-project-io-v1beta1-tracepipeline
      port: 443
  admissionReviewVersions:
    - v1beta1
    - v1
  sideEffects: None
  failurePolicy: Fail
  matchPolicy: Exact
  timeoutSeconds: 15
  namespaceSelector: {}
  objectSelector: {}
  rules:
    - apiGroups:
        - telemetry.kyma-project.io
      apiVersions:
        - v1beta1
      operations:
        - CREATE
        - UPDATE
      resources:
        - tracepipelines
      scope: '*'
- name: mutating-logpipelines-v1beta1.kyma-project.io
  clientConfig:
    service:
      name: telemetry-manager-webhook
      namespace: kyma-system
      path: /mutate-telemetry-kyma-project-io-v1beta1-logpipeline
      port: 443
  admissionReviewVersions:
    - v1beta1
    - v1
  sideEffects: None
  failurePolicy: Fail
  matchPolicy: Exact
  timeoutSeconds: 15
  namespaceSelector: {}
  objectSelector: {}
  rules:
    - apiGroups:
        - telemetry.kyma-project.io
      apiVersions:
        - v1beta1
      operations:
        - CREATE
        - UPDATE
      resources:
        - logpipelines
      scope: '*'
- admissionReviewVersions:
  - v1beta1
  - v1
  clientConfig:
    service:
      name: 'telemetry-manager-webhook'
      namespace: 'default'
      path: /mutate-telemetry-kyma-project-io-v1alpha1-metricpipeline
      port: 443
  failurePolicy: Fail
  matchPolicy: Exact
  name: mutating-metricpipelines-v1alpha1.kyma-project.io
  namespaceSelector: {}
  objectSelector: {}
  rules:
  - apiGroups:
    - telemetry.kyma-project.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - metricpipelines
    scope: '*'
  sideEffects: None
  timeoutSeconds: 15
- admissionReviewVersions:
  - v1beta1
  - v1
  clientConfig:
    service:
      name: 'telemetry-manager-webhook'
      namespace: 'default'
      path: /mutate-telemetry-kyma-project-io-v1alpha1-tracepipeline
      port: 443
  failurePolicy: Fail
  matchPolicy: Exact
  name: mutating-tracepipelines-v1alpha1.kyma-project.io
  namespaceSelector: {}
  objectSelector: {}
  rules:
  - apiGroups:
    - telemetry.kyma-project.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - tracepipelines
    scope: '*'
  sideEffects: None
  timeoutSeconds: 15
- admissionReviewVersions:
  - v1beta1
  - v1
  clientConfig:
    service:
      name: 'telemetry-manager-webhook'
      namespace: 'default'
      path: /mutate-telemetry-kyma-project-io-v1alpha1-logpipeline
      port: 443
  failurePolicy: Fail
  matchPolicy: Exact
  name: mutating-logpipelines-v1alpha1.kyma-project.io
  namespaceSelector: {}
  objectSelector: {}
  rules:
  - apiGroups:
    - telemetry.kyma-project.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - logpipelines
    scope: '*'
  sideEffects: None
  timeoutSeconds: 15
---
# Source: telemetry-manager/templates/validating-webhook.kyma-project.io.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: telemetry-validating-webhook.kyma-project.io
  annotations:
    cert-manager.io/inject-ca-from: default/telemetry-
  labels:
    
    app.kubernetes.io/managed-by: kyma
webhooks:
- admissionReviewVersions:
  - v1beta1
  - v1
  clientConfig:
    service:
      name: 'telemetry-manager-webhook'
      namespace: 'default'
      path: /validate-logpipeline
      port: 443
  failurePolicy: Fail
  matchPolicy: Exact
  name: validating-logpipelines.kyma-project.io
  namespaceSelector: {}
  objectSelector: {}
  rules:
  - apiGroups:
    - telemetry.kyma-project.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - logpipelines
    scope: '*'
  sideEffects: None
  timeoutSeconds: 15
- admissionReviewVersions:
  - v1beta1
  - v1
  clientConfig:
    service:
      name: 'telemetry-manager-webhook'
      namespace: 'default'
      path: /validate-logparser
      port: 443
  failurePolicy: Fail
  matchPolicy: Exact
  name: validating-logparsers.kyma-project.io
  namespaceSelector: {}
  objectSelector: {}
  rules:
  - apiGroups:
    - telemetry.kyma-project.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - logparsers
    scope: '*'
  sideEffects: None
  timeoutSeconds: 15
